/* Generated by Cython 0.25.2 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [], 
        "include_dirs": [
            "/Users/wckdouglas/miniconda2/lib/python2.7/site-packages/numpy/core/include", 
            "/Users/wckdouglas/miniconda2/lib/python2.7/site-packages/pysam", 
            "/Users/wckdouglas/miniconda2/lib/python2.7/site-packages/pysam/include/htslib", 
            "/Users/wckdouglas/miniconda2/lib/python2.7/site-packages/pysam/include/samtools"
        ]
    }, 
    "module_name": "tgirt_seq_tools.read_cluster"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_2"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #elif defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__tgirt_seq_tools__read_cluster
#define __PYX_HAVE_API__tgirt_seq_tools__read_cluster
#include <math.h>
#include <string.h>
#include <stdio.h>
#include "pythread.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "tgirt_seq_tools/read_cluster.pyx",
  "tgirt_seq_tools/read_cluster.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup;
struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode;
struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual;
struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr;
struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior;
struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr;
struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr;
struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence;
struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr;

/* "tgirt_seq_tools/read_cluster.pxd":1
 * cdef class readGroup:             # <<<<<<<<<<<<<<
 *     cdef public:
 *         str barcode
 */
struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup {
  PyObject_HEAD
  PyObject *barcode;
  PyObject *R1;
  PyObject *R2;
  PyObject *R1_flag;
  PyObject *R2_flag;
  PyObject *R1_position;
  PyObject *R2_position;
  PyObject *R1_chrom;
  PyObject *R2_chrom;
  PyObject *concensus_read1;
  PyObject *concensus_read2;
  PyObject *member_count_list;
  PyObject *concensus_flag1;
  PyObject *concensus_flag2;
  PyObject *fastq_record;
};


/* "tgirt_seq_tools/read_cluster.pyx":35
 * 
 * 
 * def mode(any_list):             # <<<<<<<<<<<<<<
 *     any_list = list(any_list)
 *     count_tuple = map(lambda x: (any_list.count(x), x), set(any_list))
 */
struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode {
  PyObject_HEAD
  PyObject *__pyx_v_any_list;
};


/* "tgirt_seq_tools/read_cluster.pyx":104
 * 
 * 
 * def cumulative_product_qual(qs, hit=True):             # <<<<<<<<<<<<<<
 *     '''
 *     cythonize numpy.prod
 */
struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual {
  PyObject_HEAD
  PyObject *__pyx_v_qs;
};


/* "tgirt_seq_tools/read_cluster.pyx":109
 *     '''
 *     if hit:
 *         result = np.log10(sum(1-q for q in qs))             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr {
  PyObject_HEAD
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual *__pyx_outer_scope;
  PyObject *__pyx_v_q;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "tgirt_seq_tools/read_cluster.pyx":124
 * 
 * 
 * cdef double calculatePosterior(column_bases, column_qualities, guess_base):             # <<<<<<<<<<<<<<
 *     '''
 *     From each column of the sequence alignemnt (base position),
 */
struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior {
  PyObject_HEAD
  PyObject *__pyx_v_qual_hit;
  PyObject *__pyx_v_qual_missed;
};


/* "tgirt_seq_tools/read_cluster.pyx":136
 *     qual_missed = column_qualities[~correct_base]
 *     qual_hit = column_qualities[correct_base]
 *     hit = sum(log10(1 - q) for q in qual_to_prob(qual_hit))             # <<<<<<<<<<<<<<
 *     missed = sum(log10(q/3.0) for q in qual_to_prob(qual_missed))
 *     log_posterior = missed + hit
 */
struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr {
  PyObject_HEAD
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior *__pyx_outer_scope;
  PyObject *__pyx_v_q;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "tgirt_seq_tools/read_cluster.pyx":137
 *     qual_hit = column_qualities[correct_base]
 *     hit = sum(log10(1 - q) for q in qual_to_prob(qual_hit))
 *     missed = sum(log10(q/3.0) for q in qual_to_prob(qual_missed))             # <<<<<<<<<<<<<<
 *     log_posterior = missed + hit
 *     return log_posterior
 */
struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr {
  PyObject_HEAD
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior *__pyx_outer_scope;
  PyObject *__pyx_v_q;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "tgirt_seq_tools/read_cluster.pyx":202
 * 
 * 
 * def concensus_sequence(conserved, aln_table):             # <<<<<<<<<<<<<<
 *     """given a list of sequences, a list of quality and sequence length.
 *         assertion: all seq in seqlist should have same length (see function: selectSeqLength)
 */
struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence {
  PyObject_HEAD
  PyObject *__pyx_v_qual_list;
  PyObject *__pyx_v_seq_len;
  PyObject *__pyx_v_seq_list;
};


/* "tgirt_seq_tools/read_cluster.pyx":225
 *         seq_list = np.array(map(list, in_seq_list))
 *         qual_list = np.array(map(list, in_qual_list))
 *         iter_list = ((seq_list[:,pos], qual_list[:,pos]) for pos in xrange(seq_len))             # <<<<<<<<<<<<<<
 *         if conserved:
 *             for base, posterior_correct_prob in imap(vote_concensus_base, iter_list):
 */
struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr {
  PyObject_HEAD
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence *__pyx_outer_scope;
  PyObject *__pyx_v_pos;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_SubtractCObj(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_TrueDivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace);
#else
#define __Pyx_PyFloat_TrueDivideObjC(op1, op2, floatval, inplace)\
    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_TrueDivideObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* IncludeStringH.proto */
#include <string.h>

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static int __Pyx_Coroutine_clear(PyObject *self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.math' */

/* Module declarations from 'cpython.version' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'tgirt_seq_tools.read_cluster' */
static PyTypeObject *__pyx_ptype_15tgirt_seq_tools_12read_cluster_readGroup = 0;
static PyTypeObject *__pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode = 0;
static PyTypeObject *__pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual = 0;
static PyTypeObject *__pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr = 0;
static PyTypeObject *__pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior = 0;
static PyTypeObject *__pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr = 0;
static PyTypeObject *__pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr = 0;
static PyTypeObject *__pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence = 0;
static PyTypeObject *__pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr = 0;
static double __pyx_v_15tgirt_seq_tools_12read_cluster_min_q;
static double __pyx_v_15tgirt_seq_tools_12read_cluster_max_q;
static double __pyx_v_15tgirt_seq_tools_12read_cluster_max_prob;
static double __pyx_f_15tgirt_seq_tools_12read_cluster_clip(double, double, double); /*proto*/
static double __pyx_f_15tgirt_seq_tools_12read_cluster_error_prob_to_phred(double); /*proto*/
static PyObject *__pyx_f_15tgirt_seq_tools_12read_cluster_phred_to_string(double); /*proto*/
static PyObject *__pyx_f_15tgirt_seq_tools_12read_cluster_prob_to_qual_string(PyObject *); /*proto*/
static double __pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior(PyObject *, PyObject *, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "tgirt_seq_tools.read_cluster"
int __pyx_module_is_main_tgirt_seq_tools__read_cluster = 0;

/* Implementation of 'tgirt_seq_tools.read_cluster' */
static PyObject *__pyx_builtin_map;
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_chr;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_min;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_zip;
static const char __pyx_k_N[] = "N";
static const char __pyx_k_q[] = "q";
static const char __pyx_k__5[] = "";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_qs[] = "qs";
static const char __pyx_k_aln[] = "aln";
static const char __pyx_k_arg[] = "arg";
static const char __pyx_k_chr[] = "chr";
static const char __pyx_k_hit[] = "hit";
static const char __pyx_k_len[] = "len";
static const char __pyx_k_map[] = "map";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_ord[] = "ord";
static const char __pyx_k_pos[] = "pos";
static const char __pyx_k_seq[] = "seq";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_tag[] = "tag";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_imap[] = "imap";
static const char __pyx_k_izip[] = "izip";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_qual[] = "qual";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_int16[] = "int16";
static const char __pyx_k_int32[] = "int32";
static const char __pyx_k_log10[] = "log10";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_pysam[] = "pysam";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_argmax[] = "argmax";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_np_len[] = "np_len";
static const char __pyx_k_np_ord[] = "np_ord";
static const char __pyx_k_otypes[] = "otypes";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_strand[] = "strand";
static const char __pyx_k_string[] = "string";
static const char __pyx_k_unique[] = "unique";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_get_tag[] = "get_tag";
static const char __pyx_k_quality[] = "quality";
static const char __pyx_k_seq_len[] = "seq_len";
static const char __pyx_k_any_list[] = "any_list";
static const char __pyx_k_is_read1[] = "is_read1";
static const char __pyx_k_is_read2[] = "is_read2";
static const char __pyx_k_seq_list[] = "seq_list";
static const char __pyx_k_sequence[] = "sequence";
static const char __pyx_k_aln_table[] = "aln_table";
static const char __pyx_k_base_qual[] = "base_qual";
static const char __pyx_k_best_vote[] = "best_vote";
static const char __pyx_k_conserved[] = "conserved";
static const char __pyx_k_iter_list[] = "iter_list";
static const char __pyx_k_itertools[] = "itertools";
static const char __pyx_k_len_array[] = "len_array";
static const char __pyx_k_logsumexp[] = "logsumexp";
static const char __pyx_k_maketrans[] = "maketrans";
static const char __pyx_k_qual_list[] = "qual_list";
static const char __pyx_k_translate[] = "translate";
static const char __pyx_k_vectorize[] = "vectorize";
static const char __pyx_k_ACTGNactgn[] = "ACTGNactgn";
static const char __pyx_k_TGACNTGACN[] = "TGACNTGACN";
static const char __pyx_k_best_index[] = "best_index";
static const char __pyx_k_best_quals[] = "best_quals";
static const char __pyx_k_complement[] = "complement";
static const char __pyx_k_fix_strand[] = "fix_strand";
static const char __pyx_k_guess_base[] = "guess_base";
static const char __pyx_k_is_reverse[] = "is_reverse";
static const char __pyx_k_len_filter[] = "len_filter";
static const char __pyx_k_scipy_misc[] = "scipy.misc";
static const char __pyx_k_count_tuple[] = "count_tuple";
static const char __pyx_k_in_seq_list[] = "in_seq_list";
static const char __pyx_k_likelihoods[] = "likelihoods";
static const char __pyx_k_column_bases[] = "column_bases";
static const char __pyx_k_in_qual_list[] = "in_qual_list";
static const char __pyx_k_qual_to_prob[] = "qual_to_prob";
static const char __pyx_k_reference_id[] = "reference_id";
static const char __pyx_k_best_fraction[] = "best_fraction";
static const char __pyx_k_log_posterior[] = "log_posterior";
static const char __pyx_k_put_alignment[] = "put_alignment";
static const char __pyx_k_return_counts[] = "return_counts";
static const char __pyx_k_concensus_base[] = "concensus_base";
static const char __pyx_k_log_posteriors[] = "log_posteriors";
static const char __pyx_k_possible_bases[] = "possible_bases";
static const char __pyx_k_query_sequence[] = "query_sequence";
static const char __pyx_k_possible_counts[] = "possible_counts";
static const char __pyx_k_total_posterior[] = "total_posterior";
static const char __pyx_k_column_qualities[] = "column_qualities";
static const char __pyx_k_s__i_member_1_s_s[] = "@%s_%i_member/1\n%s\n+\n%s\n";
static const char __pyx_k_s__i_member_2_s_s[] = "@%s_%i_member/2\n%s\n+\n%s\n";
static const char __pyx_k_arg_max_likelihood[] = "arg_max_likelihood";
static const char __pyx_k_concensus_sequence[] = "concensus_sequence";
static const char __pyx_k_mode_locals_lambda[] = "mode.<locals>.<lambda>";
static const char __pyx_k_reverse_complement[] = "reverse_complement";
static const char __pyx_k_in_column_qualities[] = "in_column_qualities";
static const char __pyx_k_vote_concensus_base[] = "vote_concensus_base";
static const char __pyx_k_Unequal_R1_list_vs_R2[] = "Unequal R1 list vs R2";
static const char __pyx_k_number_possible_bases[] = "number_possible_bases";
static const char __pyx_k_posterior_correct_prob[] = "posterior_correct_prob";
static const char __pyx_k_cumulative_product_qual[] = "cumulative_product_qual";
static const char __pyx_k_calculate_concensus_base[] = "calculate_concensus_base";
static const char __pyx_k_No_concensus_read_generated[] = "No concensus read generated";
static const char __pyx_k_tgirt_seq_tools_read_cluster[] = "tgirt_seq_tools.read_cluster";
static const char __pyx_k_posterior_correct_probability[] = "posterior_correct_probability";
static const char __pyx_k_Users_wckdouglas_scripts_softwa[] = "/Users/wckdouglas/scripts/softwares/python/tgirt_seq_tools/tgirt_seq_tools/read_cluster.pyx";
static const char __pyx_k_calculatePosterior_locals_genexp[] = "calculatePosterior.<locals>.genexpr";
static const char __pyx_k_concensus_sequence_locals_genexp[] = "concensus_sequence.<locals>.genexpr";
static const char __pyx_k_cumulative_product_qual_locals_g[] = "cumulative_product_qual.<locals>.genexpr";
static PyObject *__pyx_n_s_ACTGNactgn;
static PyObject *__pyx_n_s_N;
static PyObject *__pyx_kp_s_No_concensus_read_generated;
static PyObject *__pyx_n_s_TGACNTGACN;
static PyObject *__pyx_kp_s_Unequal_R1_list_vs_R2;
static PyObject *__pyx_kp_s_Users_wckdouglas_scripts_softwa;
static PyObject *__pyx_kp_s__5;
static PyObject *__pyx_n_s_aln;
static PyObject *__pyx_n_s_aln_table;
static PyObject *__pyx_n_s_any_list;
static PyObject *__pyx_n_s_arg;
static PyObject *__pyx_n_s_arg_max_likelihood;
static PyObject *__pyx_n_s_argmax;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_base_qual;
static PyObject *__pyx_n_s_best_fraction;
static PyObject *__pyx_n_s_best_index;
static PyObject *__pyx_n_s_best_quals;
static PyObject *__pyx_n_s_best_vote;
static PyObject *__pyx_n_s_calculatePosterior_locals_genexp;
static PyObject *__pyx_n_s_calculate_concensus_base;
static PyObject *__pyx_n_s_chr;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_column_bases;
static PyObject *__pyx_n_s_column_qualities;
static PyObject *__pyx_n_s_complement;
static PyObject *__pyx_n_s_concensus_base;
static PyObject *__pyx_n_s_concensus_sequence;
static PyObject *__pyx_n_s_concensus_sequence_locals_genexp;
static PyObject *__pyx_n_s_conserved;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_n_s_count_tuple;
static PyObject *__pyx_n_s_cumulative_product_qual;
static PyObject *__pyx_n_s_cumulative_product_qual_locals_g;
static PyObject *__pyx_n_s_fix_strand;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get_tag;
static PyObject *__pyx_n_s_guess_base;
static PyObject *__pyx_n_s_hit;
static PyObject *__pyx_n_s_imap;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_in_column_qualities;
static PyObject *__pyx_n_s_in_qual_list;
static PyObject *__pyx_n_s_in_seq_list;
static PyObject *__pyx_n_s_int16;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_is_read1;
static PyObject *__pyx_n_s_is_read2;
static PyObject *__pyx_n_s_is_reverse;
static PyObject *__pyx_n_s_iter_list;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_n_s_izip;
static PyObject *__pyx_n_s_len;
static PyObject *__pyx_n_s_len_array;
static PyObject *__pyx_n_s_len_filter;
static PyObject *__pyx_n_s_likelihoods;
static PyObject *__pyx_n_s_log10;
static PyObject *__pyx_n_s_log_posterior;
static PyObject *__pyx_n_s_log_posteriors;
static PyObject *__pyx_n_s_logsumexp;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_maketrans;
static PyObject *__pyx_n_s_map;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_min;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_mode_locals_lambda;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_np_len;
static PyObject *__pyx_n_s_np_ord;
static PyObject *__pyx_n_s_number_possible_bases;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_ord;
static PyObject *__pyx_n_s_otypes;
static PyObject *__pyx_n_s_pos;
static PyObject *__pyx_n_s_possible_bases;
static PyObject *__pyx_n_s_possible_counts;
static PyObject *__pyx_n_s_posterior_correct_prob;
static PyObject *__pyx_n_s_posterior_correct_probability;
static PyObject *__pyx_n_s_put_alignment;
static PyObject *__pyx_n_s_pysam;
static PyObject *__pyx_n_s_q;
static PyObject *__pyx_n_s_qs;
static PyObject *__pyx_n_s_qual;
static PyObject *__pyx_n_s_qual_list;
static PyObject *__pyx_n_s_qual_to_prob;
static PyObject *__pyx_n_s_quality;
static PyObject *__pyx_n_s_query_sequence;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reference_id;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_return_counts;
static PyObject *__pyx_n_s_reverse_complement;
static PyObject *__pyx_kp_s_s__i_member_1_s_s;
static PyObject *__pyx_kp_s_s__i_member_2_s_s;
static PyObject *__pyx_n_s_scipy_misc;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_seq;
static PyObject *__pyx_n_s_seq_len;
static PyObject *__pyx_n_s_seq_list;
static PyObject *__pyx_n_s_sequence;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_strand;
static PyObject *__pyx_n_s_string;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_tag;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_tgirt_seq_tools_read_cluster;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_total_posterior;
static PyObject *__pyx_n_s_translate;
static PyObject *__pyx_n_s_unique;
static PyObject *__pyx_n_s_vectorize;
static PyObject *__pyx_n_s_vote_concensus_base;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_reverse_complement(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_seq); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_2fix_strand(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_seq, PyObject *__pyx_v_qual, PyBoolObject *__pyx_v_strand); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_4mode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_any_list); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_6qual_to_prob(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_base_qual); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_23cumulative_product_qual_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_8cumulative_product_qual(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_qs, PyObject *__pyx_v_hit); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_18calculatePosterior_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_18calculatePosterior_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_10calculate_concensus_base(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_12vote_concensus_base(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_18concensus_sequence_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_14concensus_sequence(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_conserved, PyObject *__pyx_v_aln_table); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup___init__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_aln, PyObject *__pyx_v_tag); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_2put_alignment(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_aln); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_4cluster(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_conserved); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_6generate_fastq_record(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7barcode___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7barcode_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7barcode_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_2R1___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_2R1_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_2R1_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_2R2___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_2R2_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_2R2_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7R1_flag___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7R1_flag_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7R1_flag_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7R2_flag___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7R2_flag_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7R2_flag_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_11R1_position___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_11R1_position_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_11R1_position_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_11R2_position___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_11R2_position_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_11R2_position_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_8R1_chrom___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_8R1_chrom_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_8R1_chrom_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_8R2_chrom___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_8R2_chrom_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_8R2_chrom_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read1___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read1_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read1_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read2___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read2_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read2_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_17member_count_list___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_17member_count_list_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_17member_count_list_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag1___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag1_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag1_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag2___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag2_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag2_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_12fastq_record___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_12fastq_record_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_12fastq_record_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_15tgirt_seq_tools_12read_cluster_readGroup(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_9;
static PyObject *__pyx_float_3_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_33;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_slice_;
static PyObject *__pyx_slice__2;
static PyObject *__pyx_slice__3;
static PyObject *__pyx_slice__4;
static PyObject *__pyx_slice__6;
static PyObject *__pyx_slice__8;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__10;
static PyObject *__pyx_slice__11;
static PyObject *__pyx_slice__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__24;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__30;

/* "tgirt_seq_tools/read_cluster.pyx":21
 * 
 * complement =  string.maketrans('ACTGNactgn','TGACNTGACN')
 * def reverse_complement(seq):             # <<<<<<<<<<<<<<
 *     '''
 *     Generate reverse complement as name suggested....-,-
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_1reverse_complement(PyObject *__pyx_self, PyObject *__pyx_v_seq); /*proto*/
static char __pyx_doc_15tgirt_seq_tools_12read_cluster_reverse_complement[] = "\n    Generate reverse complement as name suggested....-,-\n    ";
static PyMethodDef __pyx_mdef_15tgirt_seq_tools_12read_cluster_1reverse_complement = {"reverse_complement", (PyCFunction)__pyx_pw_15tgirt_seq_tools_12read_cluster_1reverse_complement, METH_O, __pyx_doc_15tgirt_seq_tools_12read_cluster_reverse_complement};
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_1reverse_complement(PyObject *__pyx_self, PyObject *__pyx_v_seq) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reverse_complement (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_reverse_complement(__pyx_self, ((PyObject *)__pyx_v_seq));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_reverse_complement(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_seq) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("reverse_complement", 0);

  /* "tgirt_seq_tools/read_cluster.pyx":25
 *     Generate reverse complement as name suggested....-,-
 *     '''
 *     return seq.translate(complement)[::-1]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_seq, __pyx_n_s_translate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_complement); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 25, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_slice_); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "tgirt_seq_tools/read_cluster.pyx":21
 * 
 * complement =  string.maketrans('ACTGNactgn','TGACNTGACN')
 * def reverse_complement(seq):             # <<<<<<<<<<<<<<
 *     '''
 *     Generate reverse complement as name suggested....-,-
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.reverse_complement", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pyx":28
 * 
 * 
 * def fix_strand(str seq, str qual, bool strand):             # <<<<<<<<<<<<<<
 *     if strand:
 *         seq = reverse_complement(seq)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_3fix_strand(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15tgirt_seq_tools_12read_cluster_3fix_strand = {"fix_strand", (PyCFunction)__pyx_pw_15tgirt_seq_tools_12read_cluster_3fix_strand, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_3fix_strand(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_seq = 0;
  PyObject *__pyx_v_qual = 0;
  PyBoolObject *__pyx_v_strand = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fix_strand (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_seq,&__pyx_n_s_qual,&__pyx_n_s_strand,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_seq)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_qual)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fix_strand", 1, 3, 3, 1); __PYX_ERR(0, 28, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_strand)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fix_strand", 1, 3, 3, 2); __PYX_ERR(0, 28, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fix_strand") < 0)) __PYX_ERR(0, 28, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_seq = ((PyObject*)values[0]);
    __pyx_v_qual = ((PyObject*)values[1]);
    __pyx_v_strand = ((PyBoolObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fix_strand", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 28, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.fix_strand", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_seq), (&PyString_Type), 1, "seq", 1))) __PYX_ERR(0, 28, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_qual), (&PyString_Type), 1, "qual", 1))) __PYX_ERR(0, 28, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_strand), __pyx_ptype_7cpython_4bool_bool, 1, "strand", 0))) __PYX_ERR(0, 28, __pyx_L1_error)
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_2fix_strand(__pyx_self, __pyx_v_seq, __pyx_v_qual, __pyx_v_strand);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_2fix_strand(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_seq, PyObject *__pyx_v_qual, PyBoolObject *__pyx_v_strand) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("fix_strand", 0);
  __Pyx_INCREF(__pyx_v_seq);
  __Pyx_INCREF(__pyx_v_qual);

  /* "tgirt_seq_tools/read_cluster.pyx":29
 * 
 * def fix_strand(str seq, str qual, bool strand):
 *     if strand:             # <<<<<<<<<<<<<<
 *         seq = reverse_complement(seq)
 *         qual = qual[::-1]
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_strand)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 29, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "tgirt_seq_tools/read_cluster.pyx":30
 * def fix_strand(str seq, str qual, bool strand):
 *     if strand:
 *         seq = reverse_complement(seq)             # <<<<<<<<<<<<<<
 *         qual = qual[::-1]
 *     return seq, qual
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_reverse_complement); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 30, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_seq); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_seq};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_seq};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 30, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_seq);
        __Pyx_GIVEREF(__pyx_v_seq);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_seq);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 30, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_seq, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":31
 *     if strand:
 *         seq = reverse_complement(seq)
 *         qual = qual[::-1]             # <<<<<<<<<<<<<<
 *     return seq, qual
 * 
 */
    __pyx_t_2 = PyObject_GetItem(__pyx_v_qual, __pyx_slice__2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_qual, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":29
 * 
 * def fix_strand(str seq, str qual, bool strand):
 *     if strand:             # <<<<<<<<<<<<<<
 *         seq = reverse_complement(seq)
 *         qual = qual[::-1]
 */
  }

  /* "tgirt_seq_tools/read_cluster.pyx":32
 *         seq = reverse_complement(seq)
 *         qual = qual[::-1]
 *     return seq, qual             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_seq);
  __Pyx_GIVEREF(__pyx_v_seq);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_seq);
  __Pyx_INCREF(__pyx_v_qual);
  __Pyx_GIVEREF(__pyx_v_qual);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_qual);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "tgirt_seq_tools/read_cluster.pyx":28
 * 
 * 
 * def fix_strand(str seq, str qual, bool strand):             # <<<<<<<<<<<<<<
 *     if strand:
 *         seq = reverse_complement(seq)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.fix_strand", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_seq);
  __Pyx_XDECREF(__pyx_v_qual);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pyx":35
 * 
 * 
 * def mode(any_list):             # <<<<<<<<<<<<<<
 *     any_list = list(any_list)
 *     count_tuple = map(lambda x: (any_list.count(x), x), set(any_list))
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_5mode(PyObject *__pyx_self, PyObject *__pyx_v_any_list); /*proto*/
static PyMethodDef __pyx_mdef_15tgirt_seq_tools_12read_cluster_5mode = {"mode", (PyCFunction)__pyx_pw_15tgirt_seq_tools_12read_cluster_5mode, METH_O, 0};
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_5mode(PyObject *__pyx_self, PyObject *__pyx_v_any_list) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mode (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_4mode(__pyx_self, ((PyObject *)__pyx_v_any_list));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pyx":37
 * def mode(any_list):
 *     any_list = list(any_list)
 *     count_tuple = map(lambda x: (any_list.count(x), x), set(any_list))             # <<<<<<<<<<<<<<
 *     return max(count_tuple)[1]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_4mode_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_15tgirt_seq_tools_12read_cluster_4mode_lambda = {"lambda", (PyCFunction)__pyx_pw_15tgirt_seq_tools_12read_cluster_4mode_lambda, METH_O, 0};
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_4mode_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode *__pyx_cur_scope;
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("lambda", 0);
  __pyx_outer_scope = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_any_list)) { __Pyx_RaiseClosureNameError("any_list"); __PYX_ERR(0, 37, __pyx_L1_error) }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_any_list, __pyx_n_s_count); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_x};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_x};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 37, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_x);
      __Pyx_GIVEREF(__pyx_v_x);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_x);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_x);
  __Pyx_GIVEREF(__pyx_v_x);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_x);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.mode.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pyx":35
 * 
 * 
 * def mode(any_list):             # <<<<<<<<<<<<<<
 *     any_list = list(any_list)
 *     count_tuple = map(lambda x: (any_list.count(x), x), set(any_list))
 */

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_4mode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_any_list) {
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode *__pyx_cur_scope;
  PyObject *__pyx_v_count_tuple = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("mode", 0);
  __pyx_cur_scope = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode *)__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode(__pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 35, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_any_list = __pyx_v_any_list;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_any_list);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_any_list);

  /* "tgirt_seq_tools/read_cluster.pyx":36
 * 
 * def mode(any_list):
 *     any_list = list(any_list)             # <<<<<<<<<<<<<<
 *     count_tuple = map(lambda x: (any_list.count(x), x), set(any_list))
 *     return max(count_tuple)[1]
 */
  __pyx_t_1 = PySequence_List(__pyx_cur_scope->__pyx_v_any_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_any_list);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_any_list, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":37
 * def mode(any_list):
 *     any_list = list(any_list)
 *     count_tuple = map(lambda x: (any_list.count(x), x), set(any_list))             # <<<<<<<<<<<<<<
 *     return max(count_tuple)[1]
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_15tgirt_seq_tools_12read_cluster_4mode_lambda, 0, __pyx_n_s_mode_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_tgirt_seq_tools_read_cluster, __pyx_d, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySet_New(__pyx_cur_scope->__pyx_v_any_list); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_count_tuple = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":38
 *     any_list = list(any_list)
 *     count_tuple = map(lambda x: (any_list.count(x), x), set(any_list))
 *     return max(count_tuple)[1]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_count_tuple);
  __Pyx_GIVEREF(__pyx_v_count_tuple);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_count_tuple);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_max, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "tgirt_seq_tools/read_cluster.pyx":35
 * 
 * 
 * def mode(any_list):             # <<<<<<<<<<<<<<
 *     any_list = list(any_list)
 *     count_tuple = map(lambda x: (any_list.count(x), x), set(any_list))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.mode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_count_tuple);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pyx":41
 * 
 * 
 * cdef double clip(double q, double floor, double ceiling):             # <<<<<<<<<<<<<<
 *     '''
 *     mimic np.clip
 */

static double __pyx_f_15tgirt_seq_tools_12read_cluster_clip(double __pyx_v_q, double __pyx_v_floor, double __pyx_v_ceiling) {
  double __pyx_v_res;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("clip", 0);

  /* "tgirt_seq_tools/read_cluster.pyx":47
 *     cdef:
 *         double res
 *     if q < floor:             # <<<<<<<<<<<<<<
 *         res = floor
 *     elif q > ceiling:
 */
  __pyx_t_1 = ((__pyx_v_q < __pyx_v_floor) != 0);
  if (__pyx_t_1) {

    /* "tgirt_seq_tools/read_cluster.pyx":48
 *         double res
 *     if q < floor:
 *         res = floor             # <<<<<<<<<<<<<<
 *     elif q > ceiling:
 *         res = ceiling
 */
    __pyx_v_res = __pyx_v_floor;

    /* "tgirt_seq_tools/read_cluster.pyx":47
 *     cdef:
 *         double res
 *     if q < floor:             # <<<<<<<<<<<<<<
 *         res = floor
 *     elif q > ceiling:
 */
    goto __pyx_L3;
  }

  /* "tgirt_seq_tools/read_cluster.pyx":49
 *     if q < floor:
 *         res = floor
 *     elif q > ceiling:             # <<<<<<<<<<<<<<
 *         res = ceiling
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_q > __pyx_v_ceiling) != 0);
  if (__pyx_t_1) {

    /* "tgirt_seq_tools/read_cluster.pyx":50
 *         res = floor
 *     elif q > ceiling:
 *         res = ceiling             # <<<<<<<<<<<<<<
 *     else:
 *         res = q
 */
    __pyx_v_res = __pyx_v_ceiling;

    /* "tgirt_seq_tools/read_cluster.pyx":49
 *     if q < floor:
 *         res = floor
 *     elif q > ceiling:             # <<<<<<<<<<<<<<
 *         res = ceiling
 *     else:
 */
    goto __pyx_L3;
  }

  /* "tgirt_seq_tools/read_cluster.pyx":52
 *         res = ceiling
 *     else:
 *         res = q             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  /*else*/ {
    __pyx_v_res = __pyx_v_q;
  }
  __pyx_L3:;

  /* "tgirt_seq_tools/read_cluster.pyx":53
 *     else:
 *         res = q
 *     return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "tgirt_seq_tools/read_cluster.pyx":41
 * 
 * 
 * cdef double clip(double q, double floor, double ceiling):             # <<<<<<<<<<<<<<
 *     '''
 *     mimic np.clip
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pyx":56
 * 
 * 
 * cdef double error_prob_to_phred(double error_prob):             # <<<<<<<<<<<<<<
 *     '''
 *     probability to Phred score
 */

static double __pyx_f_15tgirt_seq_tools_12read_cluster_error_prob_to_phred(double __pyx_v_error_prob) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("error_prob_to_phred", 0);

  /* "tgirt_seq_tools/read_cluster.pyx":60
 *     probability to Phred score
 *     '''
 *     return -10 * log10(1- error_prob)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (-10.0 * log10((1.0 - __pyx_v_error_prob)));
  goto __pyx_L0;

  /* "tgirt_seq_tools/read_cluster.pyx":56
 * 
 * 
 * cdef double error_prob_to_phred(double error_prob):             # <<<<<<<<<<<<<<
 *     '''
 *     probability to Phred score
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pyx":63
 * 
 * 
 * cdef str phred_to_string(double phred):             # <<<<<<<<<<<<<<
 *     '''
 *     convert quality score to string
 */

static PyObject *__pyx_f_15tgirt_seq_tools_12read_cluster_phred_to_string(double __pyx_v_phred) {
  double __pyx_v_adjusted_phred;
  int __pyx_v_integer_phred;
  PyObject *__pyx_v_string_phred = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("phred_to_string", 0);

  /* "tgirt_seq_tools/read_cluster.pyx":68
 *     '''
 *     cdef:
 *         double adjusted_phred = phred + 33             # <<<<<<<<<<<<<<
 *         int integer_phred
 *         str string_phred
 */
  __pyx_v_adjusted_phred = (__pyx_v_phred + 33.0);

  /* "tgirt_seq_tools/read_cluster.pyx":72
 *         str string_phred
 * 
 *     adjusted_phred = clip(adjusted_phred, min_q, max_q)             # <<<<<<<<<<<<<<
 *     integer_phred = int(adjusted_phred)
 *     string_phred =chr(integer_phred)
 */
  __pyx_v_adjusted_phred = __pyx_f_15tgirt_seq_tools_12read_cluster_clip(__pyx_v_adjusted_phred, __pyx_v_15tgirt_seq_tools_12read_cluster_min_q, __pyx_v_15tgirt_seq_tools_12read_cluster_max_q);

  /* "tgirt_seq_tools/read_cluster.pyx":73
 * 
 *     adjusted_phred = clip(adjusted_phred, min_q, max_q)
 *     integer_phred = int(adjusted_phred)             # <<<<<<<<<<<<<<
 *     string_phred =chr(integer_phred)
 *     return string_phred
 */
  __pyx_v_integer_phred = ((int)__pyx_v_adjusted_phred);

  /* "tgirt_seq_tools/read_cluster.pyx":74
 *     adjusted_phred = clip(adjusted_phred, min_q, max_q)
 *     integer_phred = int(adjusted_phred)
 *     string_phred =chr(integer_phred)             # <<<<<<<<<<<<<<
 *     return string_phred
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_integer_phred); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_chr, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 74, __pyx_L1_error)
  __pyx_v_string_phred = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":75
 *     integer_phred = int(adjusted_phred)
 *     string_phred =chr(integer_phred)
 *     return string_phred             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_string_phred);
  __pyx_r = __pyx_v_string_phred;
  goto __pyx_L0;

  /* "tgirt_seq_tools/read_cluster.pyx":63
 * 
 * 
 * cdef str phred_to_string(double phred):             # <<<<<<<<<<<<<<
 *     '''
 *     convert quality score to string
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.phred_to_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_string_phred);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pyx":78
 * 
 * 
 * cdef str prob_to_qual_string(posterior):             # <<<<<<<<<<<<<<
 *     '''
 *     Input a list of probabilities and output quality string
 */

static PyObject *__pyx_f_15tgirt_seq_tools_12read_cluster_prob_to_qual_string(PyObject *__pyx_v_posterior) {
  double __pyx_v_q;
  PyObject *__pyx_v_qual_char = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("prob_to_qual_string", 0);

  /* "tgirt_seq_tools/read_cluster.pyx":87
 * 
 *     # convert posterior to quality score
 *     q = clip(posterior, 0, max_prob)             # <<<<<<<<<<<<<<
 *     q = error_prob_to_phred(q)
 *     qual_char = phred_to_string(q)
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_posterior); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 87, __pyx_L1_error)
  __pyx_v_q = __pyx_f_15tgirt_seq_tools_12read_cluster_clip(__pyx_t_1, 0.0, __pyx_v_15tgirt_seq_tools_12read_cluster_max_prob);

  /* "tgirt_seq_tools/read_cluster.pyx":88
 *     # convert posterior to quality score
 *     q = clip(posterior, 0, max_prob)
 *     q = error_prob_to_phred(q)             # <<<<<<<<<<<<<<
 *     qual_char = phred_to_string(q)
 *     return qual_char
 */
  __pyx_v_q = __pyx_f_15tgirt_seq_tools_12read_cluster_error_prob_to_phred(__pyx_v_q);

  /* "tgirt_seq_tools/read_cluster.pyx":89
 *     q = clip(posterior, 0, max_prob)
 *     q = error_prob_to_phred(q)
 *     qual_char = phred_to_string(q)             # <<<<<<<<<<<<<<
 *     return qual_char
 * 
 */
  __pyx_t_2 = __pyx_f_15tgirt_seq_tools_12read_cluster_phred_to_string(__pyx_v_q); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_qual_char = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":90
 *     q = error_prob_to_phred(q)
 *     qual_char = phred_to_string(q)
 *     return qual_char             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_qual_char);
  __pyx_r = __pyx_v_qual_char;
  goto __pyx_L0;

  /* "tgirt_seq_tools/read_cluster.pyx":78
 * 
 * 
 * cdef str prob_to_qual_string(posterior):             # <<<<<<<<<<<<<<
 *     '''
 *     Input a list of probabilities and output quality string
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.prob_to_qual_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_qual_char);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pyx":93
 * 
 * 
 * def qual_to_prob(base_qual):             # <<<<<<<<<<<<<<
 *     '''
 *     Given a q list,
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_7qual_to_prob(PyObject *__pyx_self, PyObject *__pyx_v_base_qual); /*proto*/
static char __pyx_doc_15tgirt_seq_tools_12read_cluster_6qual_to_prob[] = "\n    Given a q list,\n    return a list of prob\n    ";
static PyMethodDef __pyx_mdef_15tgirt_seq_tools_12read_cluster_7qual_to_prob = {"qual_to_prob", (PyCFunction)__pyx_pw_15tgirt_seq_tools_12read_cluster_7qual_to_prob, METH_O, __pyx_doc_15tgirt_seq_tools_12read_cluster_6qual_to_prob};
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_7qual_to_prob(PyObject *__pyx_self, PyObject *__pyx_v_base_qual) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("qual_to_prob (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_6qual_to_prob(__pyx_self, ((PyObject *)__pyx_v_base_qual));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_6qual_to_prob(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_base_qual) {
  double __pyx_v_q;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  __Pyx_RefNannySetupContext("qual_to_prob", 0);

  /* "tgirt_seq_tools/read_cluster.pyx":101
 *         double q
 * 
 *     return [10**(-q/10) for q in base_qual]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_v_base_qual)) || PyTuple_CheckExact(__pyx_v_base_qual)) {
    __pyx_t_2 = __pyx_v_base_qual; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_base_qual); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 101, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 101, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 101, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 101, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 101, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 101, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_q = __pyx_t_6;
    __pyx_t_5 = PyFloat_FromDouble(pow(10.0, ((-__pyx_v_q) / 10.0))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tgirt_seq_tools/read_cluster.pyx":93
 * 
 * 
 * def qual_to_prob(base_qual):             # <<<<<<<<<<<<<<
 *     '''
 *     Given a q list,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.qual_to_prob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pyx":104
 * 
 * 
 * def cumulative_product_qual(qs, hit=True):             # <<<<<<<<<<<<<<
 *     '''
 *     cythonize numpy.prod
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9cumulative_product_qual(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15tgirt_seq_tools_12read_cluster_8cumulative_product_qual[] = "\n    cythonize numpy.prod\n    ";
static PyMethodDef __pyx_mdef_15tgirt_seq_tools_12read_cluster_9cumulative_product_qual = {"cumulative_product_qual", (PyCFunction)__pyx_pw_15tgirt_seq_tools_12read_cluster_9cumulative_product_qual, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15tgirt_seq_tools_12read_cluster_8cumulative_product_qual};
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9cumulative_product_qual(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_qs = 0;
  PyObject *__pyx_v_hit = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cumulative_product_qual (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_qs,&__pyx_n_s_hit,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_qs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hit);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cumulative_product_qual") < 0)) __PYX_ERR(0, 104, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_qs = values[0];
    __pyx_v_hit = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cumulative_product_qual", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 104, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.cumulative_product_qual", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_8cumulative_product_qual(__pyx_self, __pyx_v_qs, __pyx_v_hit);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_15tgirt_seq_tools_12read_cluster_23cumulative_product_qual_2generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "tgirt_seq_tools/read_cluster.pyx":109
 *     '''
 *     if hit:
 *         result = np.log10(sum(1-q for q in qs))             # <<<<<<<<<<<<<<
 *     return result
 * 
 */

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_23cumulative_product_qual_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr *)__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr(__pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 109, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_15tgirt_seq_tools_12read_cluster_23cumulative_product_qual_2generator, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_cumulative_product_qual_locals_g, __pyx_n_s_tgirt_seq_tools_read_cluster); if (unlikely(!gen)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.cumulative_product_qual.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_15tgirt_seq_tools_12read_cluster_23cumulative_product_qual_2generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr *__pyx_cur_scope = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 109, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_qs)) { __Pyx_RaiseClosureNameError("qs"); __PYX_ERR(0, 109, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_qs)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_qs)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_qs; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_qs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 109, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 109, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 109, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 109, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 109, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 109, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_q);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_q, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_cur_scope->__pyx_v_q, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 109, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pyx":104
 * 
 * 
 * def cumulative_product_qual(qs, hit=True):             # <<<<<<<<<<<<<<
 *     '''
 *     cythonize numpy.prod
 */

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_8cumulative_product_qual(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_qs, PyObject *__pyx_v_hit) {
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual *__pyx_cur_scope;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("cumulative_product_qual", 0);
  __pyx_cur_scope = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual *)__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual(__pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 104, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_qs = __pyx_v_qs;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_qs);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_qs);

  /* "tgirt_seq_tools/read_cluster.pyx":108
 *     cythonize numpy.prod
 *     '''
 *     if hit:             # <<<<<<<<<<<<<<
 *         result = np.log10(sum(1-q for q in qs))
 *     return result
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_hit); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 108, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "tgirt_seq_tools/read_cluster.pyx":109
 *     '''
 *     if hit:
 *         result = np.log10(sum(1-q for q in qs))             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_log10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_pf_15tgirt_seq_tools_12read_cluster_23cumulative_product_qual_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 109, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_result = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":108
 *     cythonize numpy.prod
 *     '''
 *     if hit:             # <<<<<<<<<<<<<<
 *         result = np.log10(sum(1-q for q in qs))
 *     return result
 */
  }

  /* "tgirt_seq_tools/read_cluster.pyx":110
 *     if hit:
 *         result = np.log10(sum(1-q for q in qs))
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cdef double cumulative_product(qs):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_result)) { __Pyx_RaiseUnboundLocalError("result"); __PYX_ERR(0, 110, __pyx_L1_error) }
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "tgirt_seq_tools/read_cluster.pyx":104
 * 
 * 
 * def cumulative_product_qual(qs, hit=True):             # <<<<<<<<<<<<<<
 *     '''
 *     cythonize numpy.prod
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.cumulative_product_qual", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pyx":112
 *     return result
 * 
 * cdef double cumulative_product(qs):             # <<<<<<<<<<<<<<
 *     '''
 *     cythonize numpy.prod
 */

static double __pyx_f_15tgirt_seq_tools_12read_cluster_cumulative_product(PyObject *__pyx_v_qs) {
  double __pyx_v_result;
  double __pyx_v_q;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("cumulative_product", 0);

  /* "tgirt_seq_tools/read_cluster.pyx":117
 *     '''
 *     cdef:
 *         double result = 1.0             # <<<<<<<<<<<<<<
 *         double q
 *     for q in qs:
 */
  __pyx_v_result = 1.0;

  /* "tgirt_seq_tools/read_cluster.pyx":119
 *         double result = 1.0
 *         double q
 *     for q in qs:             # <<<<<<<<<<<<<<
 *         result = q * result
 *     return result
 */
  if (likely(PyList_CheckExact(__pyx_v_qs)) || PyTuple_CheckExact(__pyx_v_qs)) {
    __pyx_t_1 = __pyx_v_qs; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_qs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 119, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 119, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 119, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 119, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 119, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 119, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_q = __pyx_t_5;

    /* "tgirt_seq_tools/read_cluster.pyx":120
 *         double q
 *     for q in qs:
 *         result = q * result             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
    __pyx_v_result = (__pyx_v_q * __pyx_v_result);

    /* "tgirt_seq_tools/read_cluster.pyx":119
 *         double result = 1.0
 *         double q
 *     for q in qs:             # <<<<<<<<<<<<<<
 *         result = q * result
 *     return result
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":121
 *     for q in qs:
 *         result = q * result
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "tgirt_seq_tools/read_cluster.pyx":112
 *     return result
 * 
 * cdef double cumulative_product(qs):             # <<<<<<<<<<<<<<
 *     '''
 *     cythonize numpy.prod
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("tgirt_seq_tools.read_cluster.cumulative_product", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_15tgirt_seq_tools_12read_cluster_18calculatePosterior_2generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "tgirt_seq_tools/read_cluster.pyx":136
 *     qual_missed = column_qualities[~correct_base]
 *     qual_hit = column_qualities[correct_base]
 *     hit = sum(log10(1 - q) for q in qual_to_prob(qual_hit))             # <<<<<<<<<<<<<<
 *     missed = sum(log10(q/3.0) for q in qual_to_prob(qual_missed))
 *     log_posterior = missed + hit
 */

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_18calculatePosterior_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr *)__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr(__pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 136, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_15tgirt_seq_tools_12read_cluster_18calculatePosterior_2generator1, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_calculatePosterior_locals_genexp, __pyx_n_s_tgirt_seq_tools_read_cluster); if (unlikely(!gen)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.calculatePosterior.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_15tgirt_seq_tools_12read_cluster_18calculatePosterior_2generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr *__pyx_cur_scope = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  double __pyx_t_7;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 136, __pyx_L1_error)
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_qual_to_prob); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_qual_hit)) { __Pyx_RaiseClosureNameError("qual_hit"); __PYX_ERR(0, 136, __pyx_L1_error) }
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_qual_hit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_qual_hit};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_qual_hit};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_qual_hit);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_qual_hit);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_qual_hit);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 136, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 136, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 136, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 136, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_q);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_q, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_cur_scope->__pyx_v_q, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyFloat_FromDouble(log10(__pyx_t_7)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 136, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_15tgirt_seq_tools_12read_cluster_18calculatePosterior_5generator2(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "tgirt_seq_tools/read_cluster.pyx":137
 *     qual_hit = column_qualities[correct_base]
 *     hit = sum(log10(1 - q) for q in qual_to_prob(qual_hit))
 *     missed = sum(log10(q/3.0) for q in qual_to_prob(qual_missed))             # <<<<<<<<<<<<<<
 *     log_posterior = missed + hit
 *     return log_posterior
 */

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_18calculatePosterior_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr *)__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr(__pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 137, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_15tgirt_seq_tools_12read_cluster_18calculatePosterior_5generator2, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_calculatePosterior_locals_genexp, __pyx_n_s_tgirt_seq_tools_read_cluster); if (unlikely(!gen)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.calculatePosterior.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_15tgirt_seq_tools_12read_cluster_18calculatePosterior_5generator2(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr *__pyx_cur_scope = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  double __pyx_t_7;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 137, __pyx_L1_error)
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_qual_to_prob); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_qual_missed)) { __Pyx_RaiseClosureNameError("qual_missed"); __PYX_ERR(0, 137, __pyx_L1_error) }
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_qual_missed); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_qual_missed};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_qual_missed};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_qual_missed);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_qual_missed);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_qual_missed);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 137, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 137, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 137, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 137, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_q);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_q, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyFloat_TrueDivideObjC(__pyx_cur_scope->__pyx_v_q, __pyx_float_3_0, 3.0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyFloat_FromDouble(log10(__pyx_t_7)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 137, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pyx":124
 * 
 * 
 * cdef double calculatePosterior(column_bases, column_qualities, guess_base):             # <<<<<<<<<<<<<<
 *     '''
 *     From each column of the sequence alignemnt (base position),
 */

static double __pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior(PyObject *__pyx_v_column_bases, PyObject *__pyx_v_column_qualities, PyObject *__pyx_v_guess_base) {
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior *__pyx_cur_scope;
  double __pyx_v_hit;
  double __pyx_v_missed;
  double __pyx_v_log_posterior;
  PyObject *__pyx_v_correct_base = NULL;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  __Pyx_RefNannySetupContext("calculatePosterior", 0);
  __pyx_cur_scope = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior *)__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior(__pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 124, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "tgirt_seq_tools/read_cluster.pyx":133
 *         double hit, missed, log_posterior
 * 
 *     correct_base = column_bases==guess_base             # <<<<<<<<<<<<<<
 *     qual_missed = column_qualities[~correct_base]
 *     qual_hit = column_qualities[correct_base]
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_column_bases, __pyx_v_guess_base, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
  __pyx_v_correct_base = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":134
 * 
 *     correct_base = column_bases==guess_base
 *     qual_missed = column_qualities[~correct_base]             # <<<<<<<<<<<<<<
 *     qual_hit = column_qualities[correct_base]
 *     hit = sum(log10(1 - q) for q in qual_to_prob(qual_hit))
 */
  __pyx_t_1 = PyNumber_Invert(__pyx_v_correct_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_v_column_qualities, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_qual_missed = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":135
 *     correct_base = column_bases==guess_base
 *     qual_missed = column_qualities[~correct_base]
 *     qual_hit = column_qualities[correct_base]             # <<<<<<<<<<<<<<
 *     hit = sum(log10(1 - q) for q in qual_to_prob(qual_hit))
 *     missed = sum(log10(q/3.0) for q in qual_to_prob(qual_missed))
 */
  __pyx_t_2 = PyObject_GetItem(__pyx_v_column_qualities, __pyx_v_correct_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_qual_hit = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":136
 *     qual_missed = column_qualities[~correct_base]
 *     qual_hit = column_qualities[correct_base]
 *     hit = sum(log10(1 - q) for q in qual_to_prob(qual_hit))             # <<<<<<<<<<<<<<
 *     missed = sum(log10(q/3.0) for q in qual_to_prob(qual_missed))
 *     log_posterior = missed + hit
 */
  __pyx_t_2 = __pyx_pf_15tgirt_seq_tools_12read_cluster_18calculatePosterior_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_hit = __pyx_t_3;

  /* "tgirt_seq_tools/read_cluster.pyx":137
 *     qual_hit = column_qualities[correct_base]
 *     hit = sum(log10(1 - q) for q in qual_to_prob(qual_hit))
 *     missed = sum(log10(q/3.0) for q in qual_to_prob(qual_missed))             # <<<<<<<<<<<<<<
 *     log_posterior = missed + hit
 *     return log_posterior
 */
  __pyx_t_2 = __pyx_pf_15tgirt_seq_tools_12read_cluster_18calculatePosterior_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_missed = __pyx_t_3;

  /* "tgirt_seq_tools/read_cluster.pyx":138
 *     hit = sum(log10(1 - q) for q in qual_to_prob(qual_hit))
 *     missed = sum(log10(q/3.0) for q in qual_to_prob(qual_missed))
 *     log_posterior = missed + hit             # <<<<<<<<<<<<<<
 *     return log_posterior
 * 
 */
  __pyx_v_log_posterior = (__pyx_v_missed + __pyx_v_hit);

  /* "tgirt_seq_tools/read_cluster.pyx":139
 *     missed = sum(log10(q/3.0) for q in qual_to_prob(qual_missed))
 *     log_posterior = missed + hit
 *     return log_posterior             # <<<<<<<<<<<<<<
 * 
 * def calculate_concensus_base(arg):
 */
  __pyx_r = __pyx_v_log_posterior;
  goto __pyx_L0;

  /* "tgirt_seq_tools/read_cluster.pyx":124
 * 
 * 
 * cdef double calculatePosterior(column_bases, column_qualities, guess_base):             # <<<<<<<<<<<<<<
 *     '''
 *     From each column of the sequence alignemnt (base position),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("tgirt_seq_tools.read_cluster.calculatePosterior", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_correct_base);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pyx":141
 *     return log_posterior
 * 
 * def calculate_concensus_base(arg):             # <<<<<<<<<<<<<<
 *     """Given a list of sequences,
 *         a list of quality line and
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_11calculate_concensus_base(PyObject *__pyx_self, PyObject *__pyx_v_arg); /*proto*/
static char __pyx_doc_15tgirt_seq_tools_12read_cluster_10calculate_concensus_base[] = "Given a list of sequences,\n        a list of quality line and\n        a position,\n    return the maximum likelihood base at the given position,\n        along with the mean quality of these concensus bases.\n    ";
static PyMethodDef __pyx_mdef_15tgirt_seq_tools_12read_cluster_11calculate_concensus_base = {"calculate_concensus_base", (PyCFunction)__pyx_pw_15tgirt_seq_tools_12read_cluster_11calculate_concensus_base, METH_O, __pyx_doc_15tgirt_seq_tools_12read_cluster_10calculate_concensus_base};
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_11calculate_concensus_base(PyObject *__pyx_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate_concensus_base (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_10calculate_concensus_base(__pyx_self, ((PyObject *)__pyx_v_arg));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_10calculate_concensus_base(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg) {
  int __pyx_v_number_possible_bases;
  double __pyx_v_log_posterior;
  double __pyx_v_total_posterior;
  double __pyx_v_posterior_correct_probability;
  PyObject *__pyx_v_column_bases = NULL;
  PyObject *__pyx_v_in_column_qualities = NULL;
  PyObject *__pyx_v_column_qualities = NULL;
  PyObject *__pyx_v_possible_bases = NULL;
  PyObject *__pyx_v_concensus_base = NULL;
  PyObject *__pyx_v_log_posteriors = NULL;
  PyObject *__pyx_v_likelihoods = NULL;
  PyObject *__pyx_v_arg_max_likelihood = NULL;
  PyObject *__pyx_v_guess_base = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  double __pyx_t_9;
  __Pyx_RefNannySetupContext("calculate_concensus_base", 0);

  /* "tgirt_seq_tools/read_cluster.pyx":153
 *         double total_posterior
 *         double posterior_correct_probability
 *     column_bases, in_column_qualities = arg             # <<<<<<<<<<<<<<
 *     column_qualities = np_ord(in_column_qualities) - 33
 *     possible_bases = np.unique(column_bases)
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_arg))) || (PyList_CheckExact(__pyx_v_arg))) {
    PyObject* sequence = __pyx_v_arg;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 153, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_arg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) __PYX_ERR(0, 153, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 153, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_column_bases = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_in_column_qualities = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":154
 *         double posterior_correct_probability
 *     column_bases, in_column_qualities = arg
 *     column_qualities = np_ord(in_column_qualities) - 33             # <<<<<<<<<<<<<<
 *     possible_bases = np.unique(column_bases)
 *     number_possible_bases = len(possible_bases)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np_ord); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_in_column_qualities); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_in_column_qualities};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_in_column_qualities};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_in_column_qualities);
      __Pyx_GIVEREF(__pyx_v_in_column_qualities);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_in_column_qualities);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_t_2, __pyx_int_33, 33, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_column_qualities = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":155
 *     column_bases, in_column_qualities = arg
 *     column_qualities = np_ord(in_column_qualities) - 33
 *     possible_bases = np.unique(column_bases)             # <<<<<<<<<<<<<<
 *     number_possible_bases = len(possible_bases)
 *     if number_possible_bases == 1:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_unique); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_column_bases); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_column_bases};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_column_bases};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_v_column_bases);
      __Pyx_GIVEREF(__pyx_v_column_bases);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_column_bases);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_possible_bases = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":156
 *     column_qualities = np_ord(in_column_qualities) - 33
 *     possible_bases = np.unique(column_bases)
 *     number_possible_bases = len(possible_bases)             # <<<<<<<<<<<<<<
 *     if number_possible_bases == 1:
 *         concensus_base = possible_bases[0]
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_possible_bases); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __pyx_v_number_possible_bases = __pyx_t_6;

  /* "tgirt_seq_tools/read_cluster.pyx":157
 *     possible_bases = np.unique(column_bases)
 *     number_possible_bases = len(possible_bases)
 *     if number_possible_bases == 1:             # <<<<<<<<<<<<<<
 *         concensus_base = possible_bases[0]
 *         posterior_correct_probability = max_prob
 */
  __pyx_t_7 = ((__pyx_v_number_possible_bases == 1) != 0);
  if (__pyx_t_7) {

    /* "tgirt_seq_tools/read_cluster.pyx":158
 *     number_possible_bases = len(possible_bases)
 *     if number_possible_bases == 1:
 *         concensus_base = possible_bases[0]             # <<<<<<<<<<<<<<
 *         posterior_correct_probability = max_prob
 *     else:
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_possible_bases, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_concensus_base = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":159
 *     if number_possible_bases == 1:
 *         concensus_base = possible_bases[0]
 *         posterior_correct_probability = max_prob             # <<<<<<<<<<<<<<
 *     else:
 *         log_posteriors = [calculatePosterior(column_bases, column_qualities, guess_base) for guess_base in possible_bases]
 */
    __pyx_v_posterior_correct_probability = __pyx_v_15tgirt_seq_tools_12read_cluster_max_prob;

    /* "tgirt_seq_tools/read_cluster.pyx":157
 *     possible_bases = np.unique(column_bases)
 *     number_possible_bases = len(possible_bases)
 *     if number_possible_bases == 1:             # <<<<<<<<<<<<<<
 *         concensus_base = possible_bases[0]
 *         posterior_correct_probability = max_prob
 */
    goto __pyx_L5;
  }

  /* "tgirt_seq_tools/read_cluster.pyx":161
 *         posterior_correct_probability = max_prob
 *     else:
 *         log_posteriors = [calculatePosterior(column_bases, column_qualities, guess_base) for guess_base in possible_bases]             # <<<<<<<<<<<<<<
 *         total_posterior = logsumexp(log_posteriors)
 *         likelihoods = [log_posterior - total_posterior for log_posterior in log_posteriors]
 */
  /*else*/ {
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_possible_bases)) || PyTuple_CheckExact(__pyx_v_possible_bases)) {
      __pyx_t_5 = __pyx_v_possible_bases; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_possible_bases); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 161, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 161, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 161, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 161, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 161, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_8(__pyx_t_5);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 161, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_guess_base, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = PyFloat_FromDouble(__pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior(__pyx_v_column_bases, __pyx_v_column_qualities, __pyx_v_guess_base)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 161, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_log_posteriors = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":162
 *     else:
 *         log_posteriors = [calculatePosterior(column_bases, column_qualities, guess_base) for guess_base in possible_bases]
 *         total_posterior = logsumexp(log_posteriors)             # <<<<<<<<<<<<<<
 *         likelihoods = [log_posterior - total_posterior for log_posterior in log_posteriors]
 *         arg_max_likelihood = np.argmax(likelihoods)
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_logsumexp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_log_posteriors); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_log_posteriors};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_log_posteriors};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_v_log_posteriors);
        __Pyx_GIVEREF(__pyx_v_log_posteriors);
        PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_log_posteriors);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_total_posterior = __pyx_t_9;

    /* "tgirt_seq_tools/read_cluster.pyx":163
 *         log_posteriors = [calculatePosterior(column_bases, column_qualities, guess_base) for guess_base in possible_bases]
 *         total_posterior = logsumexp(log_posteriors)
 *         likelihoods = [log_posterior - total_posterior for log_posterior in log_posteriors]             # <<<<<<<<<<<<<<
 *         arg_max_likelihood = np.argmax(likelihoods)
 *         concensus_base = possible_bases[arg_max_likelihood]
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __pyx_v_log_posteriors; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
    for (;;) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 163, __pyx_L1_error)
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 163, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_log_posterior = __pyx_t_9;
      __pyx_t_2 = PyFloat_FromDouble((__pyx_v_log_posterior - __pyx_v_total_posterior)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 163, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_likelihoods = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":164
 *         total_posterior = logsumexp(log_posteriors)
 *         likelihoods = [log_posterior - total_posterior for log_posterior in log_posteriors]
 *         arg_max_likelihood = np.argmax(likelihoods)             # <<<<<<<<<<<<<<
 *         concensus_base = possible_bases[arg_max_likelihood]
 *         posterior_correct_probability = exp(likelihoods[arg_max_likelihood])
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_argmax); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_likelihoods); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_likelihoods};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_likelihoods};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 164, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(__pyx_v_likelihoods);
        __Pyx_GIVEREF(__pyx_v_likelihoods);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_likelihoods);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_arg_max_likelihood = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":165
 *         likelihoods = [log_posterior - total_posterior for log_posterior in log_posteriors]
 *         arg_max_likelihood = np.argmax(likelihoods)
 *         concensus_base = possible_bases[arg_max_likelihood]             # <<<<<<<<<<<<<<
 *         posterior_correct_probability = exp(likelihoods[arg_max_likelihood])
 *     return concensus_base, posterior_correct_probability
 */
    __pyx_t_1 = PyObject_GetItem(__pyx_v_possible_bases, __pyx_v_arg_max_likelihood); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_concensus_base = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":166
 *         arg_max_likelihood = np.argmax(likelihoods)
 *         concensus_base = possible_bases[arg_max_likelihood]
 *         posterior_correct_probability = exp(likelihoods[arg_max_likelihood])             # <<<<<<<<<<<<<<
 *     return concensus_base, posterior_correct_probability
 * 
 */
    __pyx_t_1 = PyObject_GetItem(__pyx_v_likelihoods, __pyx_v_arg_max_likelihood); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_posterior_correct_probability = exp(__pyx_t_9);
  }
  __pyx_L5:;

  /* "tgirt_seq_tools/read_cluster.pyx":167
 *         concensus_base = possible_bases[arg_max_likelihood]
 *         posterior_correct_probability = exp(likelihoods[arg_max_likelihood])
 *     return concensus_base, posterior_correct_probability             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_posterior_correct_probability); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_concensus_base);
  __Pyx_GIVEREF(__pyx_v_concensus_base);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_concensus_base);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "tgirt_seq_tools/read_cluster.pyx":141
 *     return log_posterior
 * 
 * def calculate_concensus_base(arg):             # <<<<<<<<<<<<<<
 *     """Given a list of sequences,
 *         a list of quality line and
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.calculate_concensus_base", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_column_bases);
  __Pyx_XDECREF(__pyx_v_in_column_qualities);
  __Pyx_XDECREF(__pyx_v_column_qualities);
  __Pyx_XDECREF(__pyx_v_possible_bases);
  __Pyx_XDECREF(__pyx_v_concensus_base);
  __Pyx_XDECREF(__pyx_v_log_posteriors);
  __Pyx_XDECREF(__pyx_v_likelihoods);
  __Pyx_XDECREF(__pyx_v_arg_max_likelihood);
  __Pyx_XDECREF(__pyx_v_guess_base);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pyx":170
 * 
 * 
 * def vote_concensus_base(arg):             # <<<<<<<<<<<<<<
 *     """Given a list of sequences,
 *         a list of quality line and
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_13vote_concensus_base(PyObject *__pyx_self, PyObject *__pyx_v_arg); /*proto*/
static char __pyx_doc_15tgirt_seq_tools_12read_cluster_12vote_concensus_base[] = "Given a list of sequences,\n        a list of quality line and\n        a position,\n    return the maximum likelihood base at the given position,\n        along with the mean quality of these concensus bases.\n    ";
static PyMethodDef __pyx_mdef_15tgirt_seq_tools_12read_cluster_13vote_concensus_base = {"vote_concensus_base", (PyCFunction)__pyx_pw_15tgirt_seq_tools_12read_cluster_13vote_concensus_base, METH_O, __pyx_doc_15tgirt_seq_tools_12read_cluster_12vote_concensus_base};
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_13vote_concensus_base(PyObject *__pyx_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("vote_concensus_base (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_12vote_concensus_base(__pyx_self, ((PyObject *)__pyx_v_arg));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_12vote_concensus_base(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg) {
  double __pyx_v_posterior_correct_probability;
  PyObject *__pyx_v_column_bases = NULL;
  PyObject *__pyx_v_in_column_qualities = NULL;
  PyObject *__pyx_v_column_qualities = NULL;
  PyObject *__pyx_v_possible_bases = NULL;
  PyObject *__pyx_v_possible_counts = NULL;
  PyObject *__pyx_v_best_vote = NULL;
  PyObject *__pyx_v_best_fraction = NULL;
  PyObject *__pyx_v_concensus_base = NULL;
  PyObject *__pyx_v_best_index = NULL;
  PyObject *__pyx_v_best_quals = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  double __pyx_t_7;
  __Pyx_RefNannySetupContext("vote_concensus_base", 0);

  /* "tgirt_seq_tools/read_cluster.pyx":183
 *         double posterior_correct_probability
 * 
 *     column_bases, in_column_qualities = arg             # <<<<<<<<<<<<<<
 *     column_qualities = np_ord(in_column_qualities) - 33
 *     possible_bases, possible_counts = np.unique(column_bases, return_counts=True)
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_arg))) || (PyList_CheckExact(__pyx_v_arg))) {
    PyObject* sequence = __pyx_v_arg;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 183, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_arg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) __PYX_ERR(0, 183, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 183, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_column_bases = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_in_column_qualities = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":184
 * 
 *     column_bases, in_column_qualities = arg
 *     column_qualities = np_ord(in_column_qualities) - 33             # <<<<<<<<<<<<<<
 *     possible_bases, possible_counts = np.unique(column_bases, return_counts=True)
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np_ord); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_in_column_qualities); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_in_column_qualities};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_in_column_qualities};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 184, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_in_column_qualities);
      __Pyx_GIVEREF(__pyx_v_in_column_qualities);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_in_column_qualities);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_t_2, __pyx_int_33, 33, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_column_qualities = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":185
 *     column_bases, in_column_qualities = arg
 *     column_qualities = np_ord(in_column_qualities) - 33
 *     possible_bases, possible_counts = np.unique(column_bases, return_counts=True)             # <<<<<<<<<<<<<<
 * 
 *     best_vote = possible_counts.max()
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_unique); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_column_bases);
  __Pyx_GIVEREF(__pyx_v_column_bases);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_column_bases);
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_return_counts, Py_True) < 0) __PYX_ERR(0, 185, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 185, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext;
    index = 0; __pyx_t_5 = __pyx_t_4(__pyx_t_2); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    index = 1; __pyx_t_1 = __pyx_t_4(__pyx_t_2); if (unlikely(!__pyx_t_1)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_2), 2) < 0) __PYX_ERR(0, 185, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 185, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  __pyx_v_possible_bases = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_possible_counts = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":187
 *     possible_bases, possible_counts = np.unique(column_bases, return_counts=True)
 * 
 *     best_vote = possible_counts.max()             # <<<<<<<<<<<<<<
 *     best_fraction = best_vote/possible_counts.sum()
 *     if best_fraction < 0.9:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_possible_counts, __pyx_n_s_max); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 187, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 187, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_best_vote = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":188
 * 
 *     best_vote = possible_counts.max()
 *     best_fraction = best_vote/possible_counts.sum()             # <<<<<<<<<<<<<<
 *     if best_fraction < 0.9:
 *         concensus_base = 'N'
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_possible_counts, __pyx_n_s_sum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 188, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_best_vote, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_best_fraction = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":189
 *     best_vote = possible_counts.max()
 *     best_fraction = best_vote/possible_counts.sum()
 *     if best_fraction < 0.9:             # <<<<<<<<<<<<<<
 *         concensus_base = 'N'
 *         posterior_correct_probability = 0
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_best_fraction, __pyx_float_0_9, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "tgirt_seq_tools/read_cluster.pyx":190
 *     best_fraction = best_vote/possible_counts.sum()
 *     if best_fraction < 0.9:
 *         concensus_base = 'N'             # <<<<<<<<<<<<<<
 *         posterior_correct_probability = 0
 * 
 */
    __Pyx_INCREF(__pyx_n_s_N);
    __pyx_v_concensus_base = __pyx_n_s_N;

    /* "tgirt_seq_tools/read_cluster.pyx":191
 *     if best_fraction < 0.9:
 *         concensus_base = 'N'
 *         posterior_correct_probability = 0             # <<<<<<<<<<<<<<
 * 
 *     else:
 */
    __pyx_v_posterior_correct_probability = 0.0;

    /* "tgirt_seq_tools/read_cluster.pyx":189
 *     best_vote = possible_counts.max()
 *     best_fraction = best_vote/possible_counts.sum()
 *     if best_fraction < 0.9:             # <<<<<<<<<<<<<<
 *         concensus_base = 'N'
 *         posterior_correct_probability = 0
 */
    goto __pyx_L7;
  }

  /* "tgirt_seq_tools/read_cluster.pyx":194
 * 
 *     else:
 *         best_index = possible_counts==possible_counts.max()             # <<<<<<<<<<<<<<
 *         concensus_base = possible_bases[best_index][0]
 *         best_quals = column_qualities[column_bases==concensus_base].sum()
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_possible_counts, __pyx_n_s_max); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_possible_counts, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_best_index = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":195
 *     else:
 *         best_index = possible_counts==possible_counts.max()
 *         concensus_base = possible_bases[best_index][0]             # <<<<<<<<<<<<<<
 *         best_quals = column_qualities[column_bases==concensus_base].sum()
 *         posterior_correct_probability = 1 - 10**(-best_quals/10)
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_possible_bases, __pyx_v_best_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_concensus_base = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":196
 *         best_index = possible_counts==possible_counts.max()
 *         concensus_base = possible_bases[best_index][0]
 *         best_quals = column_qualities[column_bases==concensus_base].sum()             # <<<<<<<<<<<<<<
 *         posterior_correct_probability = 1 - 10**(-best_quals/10)
 * 
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_column_bases, __pyx_v_concensus_base, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 196, __pyx_L1_error)
    __pyx_t_5 = PyObject_GetItem(__pyx_v_column_qualities, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_sum); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_best_quals = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":197
 *         concensus_base = possible_bases[best_index][0]
 *         best_quals = column_qualities[column_bases==concensus_base].sum()
 *         posterior_correct_probability = 1 - 10**(-best_quals/10)             # <<<<<<<<<<<<<<
 * 
 *     return concensus_base, posterior_correct_probability
 */
    __pyx_t_1 = PyNumber_Negative(__pyx_v_best_quals); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_1, __pyx_int_10, 10, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Power(__pyx_int_10, __pyx_t_3, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_posterior_correct_probability = __pyx_t_7;
  }
  __pyx_L7:;

  /* "tgirt_seq_tools/read_cluster.pyx":199
 *         posterior_correct_probability = 1 - 10**(-best_quals/10)
 * 
 *     return concensus_base, posterior_correct_probability             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_posterior_correct_probability); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_concensus_base);
  __Pyx_GIVEREF(__pyx_v_concensus_base);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_concensus_base);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tgirt_seq_tools/read_cluster.pyx":170
 * 
 * 
 * def vote_concensus_base(arg):             # <<<<<<<<<<<<<<
 *     """Given a list of sequences,
 *         a list of quality line and
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.vote_concensus_base", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_column_bases);
  __Pyx_XDECREF(__pyx_v_in_column_qualities);
  __Pyx_XDECREF(__pyx_v_column_qualities);
  __Pyx_XDECREF(__pyx_v_possible_bases);
  __Pyx_XDECREF(__pyx_v_possible_counts);
  __Pyx_XDECREF(__pyx_v_best_vote);
  __Pyx_XDECREF(__pyx_v_best_fraction);
  __Pyx_XDECREF(__pyx_v_concensus_base);
  __Pyx_XDECREF(__pyx_v_best_index);
  __Pyx_XDECREF(__pyx_v_best_quals);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pyx":202
 * 
 * 
 * def concensus_sequence(conserved, aln_table):             # <<<<<<<<<<<<<<
 *     """given a list of sequences, a list of quality and sequence length.
 *         assertion: all seq in seqlist should have same length (see function: selectSeqLength)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_15concensus_sequence(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15tgirt_seq_tools_12read_cluster_14concensus_sequence[] = "given a list of sequences, a list of quality and sequence length.\n        assertion: all seq in seqlist should have same length (see function: selectSeqLength)\n    return a consensus sequence and the mean quality line (see function: calculateConcensusBase)\n    ";
static PyMethodDef __pyx_mdef_15tgirt_seq_tools_12read_cluster_15concensus_sequence = {"concensus_sequence", (PyCFunction)__pyx_pw_15tgirt_seq_tools_12read_cluster_15concensus_sequence, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15tgirt_seq_tools_12read_cluster_14concensus_sequence};
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_15concensus_sequence(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_conserved = 0;
  PyObject *__pyx_v_aln_table = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("concensus_sequence (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_conserved,&__pyx_n_s_aln_table,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_conserved)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_aln_table)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("concensus_sequence", 1, 2, 2, 1); __PYX_ERR(0, 202, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "concensus_sequence") < 0)) __PYX_ERR(0, 202, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_conserved = values[0];
    __pyx_v_aln_table = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("concensus_sequence", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 202, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.concensus_sequence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_14concensus_sequence(__pyx_self, __pyx_v_conserved, __pyx_v_aln_table);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_15tgirt_seq_tools_12read_cluster_18concensus_sequence_2generator3(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "tgirt_seq_tools/read_cluster.pyx":225
 *         seq_list = np.array(map(list, in_seq_list))
 *         qual_list = np.array(map(list, in_qual_list))
 *         iter_list = ((seq_list[:,pos], qual_list[:,pos]) for pos in xrange(seq_len))             # <<<<<<<<<<<<<<
 *         if conserved:
 *             for base, posterior_correct_prob in imap(vote_concensus_base, iter_list):
 */

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_18concensus_sequence_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr *)__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr(__pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 225, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_15tgirt_seq_tools_12read_cluster_18concensus_sequence_2generator3, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_concensus_sequence_locals_genexp, __pyx_n_s_tgirt_seq_tools_read_cluster); if (unlikely(!gen)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.concensus_sequence.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_15tgirt_seq_tools_12read_cluster_18concensus_sequence_2generator3(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr *__pyx_cur_scope = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 225, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_seq_len)) { __Pyx_RaiseClosureNameError("seq_len"); __PYX_ERR(0, 225, __pyx_L1_error) }
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_seq_len);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_seq_len);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_seq_len);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 225, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 225, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 225, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 225, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_pos);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_pos, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_seq_list)) { __Pyx_RaiseClosureNameError("seq_list"); __PYX_ERR(0, 225, __pyx_L1_error) }
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_slice__3);
    __Pyx_GIVEREF(__pyx_slice__3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_slice__3);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_pos);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_pos);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_cur_scope->__pyx_v_pos);
    __pyx_t_5 = PyObject_GetItem(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_seq_list, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_qual_list)) { __Pyx_RaiseClosureNameError("qual_list"); __PYX_ERR(0, 225, __pyx_L1_error) }
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_slice__4);
    __Pyx_GIVEREF(__pyx_slice__4);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_slice__4);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_pos);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_pos);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_cur_scope->__pyx_v_pos);
    __pyx_t_6 = PyObject_GetItem(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_qual_list, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 225, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pyx":202
 * 
 * 
 * def concensus_sequence(conserved, aln_table):             # <<<<<<<<<<<<<<
 *     """given a list of sequences, a list of quality and sequence length.
 *         assertion: all seq in seqlist should have same length (see function: selectSeqLength)
 */

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_14concensus_sequence(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_conserved, PyObject *__pyx_v_aln_table) {
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence *__pyx_cur_scope;
  PyObject *__pyx_v_sequence = 0;
  PyObject *__pyx_v_quality = 0;
  double __pyx_v_posterior_correct_prob;
  PyObject *__pyx_v_in_seq_list = NULL;
  PyObject *__pyx_v_in_qual_list = NULL;
  PyObject *__pyx_v_len_array = NULL;
  PyObject *__pyx_v_len_filter = NULL;
  PyObject *__pyx_v_iter_list = NULL;
  PyObject *__pyx_v_base = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *(*__pyx_t_10)(PyObject *);
  double __pyx_t_11;
  __Pyx_RefNannySetupContext("concensus_sequence", 0);
  __pyx_cur_scope = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence *)__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence(__pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 202, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "tgirt_seq_tools/read_cluster.pyx":208
 *     """
 *     cdef:
 *         str sequence = ''             # <<<<<<<<<<<<<<
 *         str quality = ''
 *         double posterior_correct_prob
 */
  __Pyx_INCREF(__pyx_kp_s__5);
  __pyx_v_sequence = __pyx_kp_s__5;

  /* "tgirt_seq_tools/read_cluster.pyx":209
 *     cdef:
 *         str sequence = ''
 *         str quality = ''             # <<<<<<<<<<<<<<
 *         double posterior_correct_prob
 * 
 */
  __Pyx_INCREF(__pyx_kp_s__5);
  __pyx_v_quality = __pyx_kp_s__5;

  /* "tgirt_seq_tools/read_cluster.pyx":212
 *         double posterior_correct_prob
 * 
 *     in_seq_list = aln_table[:,0]             # <<<<<<<<<<<<<<
 *     in_qual_list = aln_table[:,1]
 *     if len(in_seq_list) == 1:
 */
  __pyx_t_1 = PyObject_GetItem(__pyx_v_aln_table, __pyx_tuple__7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_in_seq_list = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":213
 * 
 *     in_seq_list = aln_table[:,0]
 *     in_qual_list = aln_table[:,1]             # <<<<<<<<<<<<<<
 *     if len(in_seq_list) == 1:
 *         sequence = str(in_seq_list[0])
 */
  __pyx_t_1 = PyObject_GetItem(__pyx_v_aln_table, __pyx_tuple__9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_in_qual_list = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":214
 *     in_seq_list = aln_table[:,0]
 *     in_qual_list = aln_table[:,1]
 *     if len(in_seq_list) == 1:             # <<<<<<<<<<<<<<
 *         sequence = str(in_seq_list[0])
 *         quality = str(in_qual_list[0])
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_in_seq_list); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 214, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_3) {

    /* "tgirt_seq_tools/read_cluster.pyx":215
 *     in_qual_list = aln_table[:,1]
 *     if len(in_seq_list) == 1:
 *         sequence = str(in_seq_list[0])             # <<<<<<<<<<<<<<
 *         quality = str(in_qual_list[0])
 *     else:
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_in_seq_list, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_sequence, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":216
 *     if len(in_seq_list) == 1:
 *         sequence = str(in_seq_list[0])
 *         quality = str(in_qual_list[0])             # <<<<<<<<<<<<<<
 *     else:
 *         len_array = np_len(in_seq_list)
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_in_qual_list, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_quality, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":214
 *     in_seq_list = aln_table[:,0]
 *     in_qual_list = aln_table[:,1]
 *     if len(in_seq_list) == 1:             # <<<<<<<<<<<<<<
 *         sequence = str(in_seq_list[0])
 *         quality = str(in_qual_list[0])
 */
    goto __pyx_L3;
  }

  /* "tgirt_seq_tools/read_cluster.pyx":218
 *         quality = str(in_qual_list[0])
 *     else:
 *         len_array = np_len(in_seq_list)             # <<<<<<<<<<<<<<
 *         seq_len = min(len_array)
 *         len_filter = (len_array ==  seq_len)
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np_len); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_in_seq_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_in_seq_list};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_in_seq_list};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 218, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(__pyx_v_in_seq_list);
        __Pyx_GIVEREF(__pyx_v_in_seq_list);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_in_seq_list);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_len_array = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":219
 *     else:
 *         len_array = np_len(in_seq_list)
 *         seq_len = min(len_array)             # <<<<<<<<<<<<<<
 *         len_filter = (len_array ==  seq_len)
 *         in_seq_list = in_seq_list[len_filter]
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_len_array);
    __Pyx_GIVEREF(__pyx_v_len_array);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_len_array);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_min, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_cur_scope->__pyx_v_seq_len = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":220
 *         len_array = np_len(in_seq_list)
 *         seq_len = min(len_array)
 *         len_filter = (len_array ==  seq_len)             # <<<<<<<<<<<<<<
 *         in_seq_list = in_seq_list[len_filter]
 *         in_qual_list = in_qual_list[len_filter]
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_len_array, __pyx_cur_scope->__pyx_v_seq_len, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 220, __pyx_L1_error)
    __pyx_v_len_filter = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":221
 *         seq_len = min(len_array)
 *         len_filter = (len_array ==  seq_len)
 *         in_seq_list = in_seq_list[len_filter]             # <<<<<<<<<<<<<<
 *         in_qual_list = in_qual_list[len_filter]
 *         seq_list = np.array(map(list, in_seq_list))
 */
    __pyx_t_4 = PyObject_GetItem(__pyx_v_in_seq_list, __pyx_v_len_filter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_in_seq_list, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":222
 *         len_filter = (len_array ==  seq_len)
 *         in_seq_list = in_seq_list[len_filter]
 *         in_qual_list = in_qual_list[len_filter]             # <<<<<<<<<<<<<<
 *         seq_list = np.array(map(list, in_seq_list))
 *         qual_list = np.array(map(list, in_qual_list))
 */
    __pyx_t_4 = PyObject_GetItem(__pyx_v_in_qual_list, __pyx_v_len_filter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_in_qual_list, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":223
 *         in_seq_list = in_seq_list[len_filter]
 *         in_qual_list = in_qual_list[len_filter]
 *         seq_list = np.array(map(list, in_seq_list))             # <<<<<<<<<<<<<<
 *         qual_list = np.array(map(list, in_qual_list))
 *         iter_list = ((seq_list[:,pos], qual_list[:,pos]) for pos in xrange(seq_len))
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)(&PyList_Type)));
    __Pyx_GIVEREF(((PyObject *)(&PyList_Type)));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)(&PyList_Type)));
    __Pyx_INCREF(__pyx_v_in_seq_list);
    __Pyx_GIVEREF(__pyx_v_in_seq_list);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_in_seq_list);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_1) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 223, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_5};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 223, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_5};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 223, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 223, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1); __pyx_t_1 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 223, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_cur_scope->__pyx_v_seq_list = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":224
 *         in_qual_list = in_qual_list[len_filter]
 *         seq_list = np.array(map(list, in_seq_list))
 *         qual_list = np.array(map(list, in_qual_list))             # <<<<<<<<<<<<<<
 *         iter_list = ((seq_list[:,pos], qual_list[:,pos]) for pos in xrange(seq_len))
 *         if conserved:
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_array); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(((PyObject *)(&PyList_Type)));
    __Pyx_GIVEREF(((PyObject *)(&PyList_Type)));
    PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)(&PyList_Type)));
    __Pyx_INCREF(__pyx_v_in_qual_list);
    __Pyx_GIVEREF(__pyx_v_in_qual_list);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_in_qual_list);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 224, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 224, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 224, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 224, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_cur_scope->__pyx_v_qual_list = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":225
 *         seq_list = np.array(map(list, in_seq_list))
 *         qual_list = np.array(map(list, in_qual_list))
 *         iter_list = ((seq_list[:,pos], qual_list[:,pos]) for pos in xrange(seq_len))             # <<<<<<<<<<<<<<
 *         if conserved:
 *             for base, posterior_correct_prob in imap(vote_concensus_base, iter_list):
 */
    __pyx_t_4 = __pyx_pf_15tgirt_seq_tools_12read_cluster_18concensus_sequence_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_iter_list = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":226
 *         qual_list = np.array(map(list, in_qual_list))
 *         iter_list = ((seq_list[:,pos], qual_list[:,pos]) for pos in xrange(seq_len))
 *         if conserved:             # <<<<<<<<<<<<<<
 *             for base, posterior_correct_prob in imap(vote_concensus_base, iter_list):
 *                 sequence += base
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_conserved); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 226, __pyx_L1_error)
    if (__pyx_t_3) {

      /* "tgirt_seq_tools/read_cluster.pyx":227
 *         iter_list = ((seq_list[:,pos], qual_list[:,pos]) for pos in xrange(seq_len))
 *         if conserved:
 *             for base, posterior_correct_prob in imap(vote_concensus_base, iter_list):             # <<<<<<<<<<<<<<
 *                 sequence += base
 *                 quality += prob_to_qual_string(posterior_correct_prob)
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_imap); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_vote_concensus_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_iter_list};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 227, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_iter_list};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 227, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 227, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (__pyx_t_5) {
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_8, __pyx_t_1);
        __Pyx_INCREF(__pyx_v_iter_list);
        __Pyx_GIVEREF(__pyx_v_iter_list);
        PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_8, __pyx_v_iter_list);
        __pyx_t_1 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 227, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_7 = __pyx_t_4; __Pyx_INCREF(__pyx_t_7); __pyx_t_2 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_2 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 227, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 227, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_7))) {
            if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 227, __pyx_L1_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_7, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 227, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 227, __pyx_L1_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_7, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 227, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_9(__pyx_t_7);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 227, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
          PyObject* sequence = __pyx_t_4;
          #if !CYTHON_COMPILING_IN_PYPY
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 227, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_1);
          #else
          __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 227, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 227, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_10 = Py_TYPE(__pyx_t_5)->tp_iternext;
          index = 0; __pyx_t_6 = __pyx_t_10(__pyx_t_5); if (unlikely(!__pyx_t_6)) goto __pyx_L7_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_6);
          index = 1; __pyx_t_1 = __pyx_t_10(__pyx_t_5); if (unlikely(!__pyx_t_1)) goto __pyx_L7_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_1);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_5), 2) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
          __pyx_t_10 = NULL;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L8_unpacking_done;
          __pyx_L7_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_10 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 227, __pyx_L1_error)
          __pyx_L8_unpacking_done:;
        }
        __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 227, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_base, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_v_posterior_correct_prob = __pyx_t_11;

        /* "tgirt_seq_tools/read_cluster.pyx":228
 *         if conserved:
 *             for base, posterior_correct_prob in imap(vote_concensus_base, iter_list):
 *                 sequence += base             # <<<<<<<<<<<<<<
 *                 quality += prob_to_qual_string(posterior_correct_prob)
 *         else:
 */
        __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_sequence, __pyx_v_base); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 228, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (!(likely(PyString_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 228, __pyx_L1_error)
        __Pyx_DECREF_SET(__pyx_v_sequence, ((PyObject*)__pyx_t_4));
        __pyx_t_4 = 0;

        /* "tgirt_seq_tools/read_cluster.pyx":229
 *             for base, posterior_correct_prob in imap(vote_concensus_base, iter_list):
 *                 sequence += base
 *                 quality += prob_to_qual_string(posterior_correct_prob)             # <<<<<<<<<<<<<<
 *         else:
 *             for base, posterior_correct_prob in imap(calculate_concensus_base, iter_list):
 */
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_posterior_correct_prob); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 229, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_1 = __pyx_f_15tgirt_seq_tools_12read_cluster_prob_to_qual_string(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_quality, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 229, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF_SET(__pyx_v_quality, ((PyObject*)__pyx_t_4));
        __pyx_t_4 = 0;

        /* "tgirt_seq_tools/read_cluster.pyx":227
 *         iter_list = ((seq_list[:,pos], qual_list[:,pos]) for pos in xrange(seq_len))
 *         if conserved:
 *             for base, posterior_correct_prob in imap(vote_concensus_base, iter_list):             # <<<<<<<<<<<<<<
 *                 sequence += base
 *                 quality += prob_to_qual_string(posterior_correct_prob)
 */
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "tgirt_seq_tools/read_cluster.pyx":226
 *         qual_list = np.array(map(list, in_qual_list))
 *         iter_list = ((seq_list[:,pos], qual_list[:,pos]) for pos in xrange(seq_len))
 *         if conserved:             # <<<<<<<<<<<<<<
 *             for base, posterior_correct_prob in imap(vote_concensus_base, iter_list):
 *                 sequence += base
 */
      goto __pyx_L4;
    }

    /* "tgirt_seq_tools/read_cluster.pyx":231
 *                 quality += prob_to_qual_string(posterior_correct_prob)
 *         else:
 *             for base, posterior_correct_prob in imap(calculate_concensus_base, iter_list):             # <<<<<<<<<<<<<<
 *                 sequence += base
 *                 quality += prob_to_qual_string(posterior_correct_prob)
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_imap); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_calculate_concensus_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_1, __pyx_v_iter_list};
        __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 231, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_1, __pyx_v_iter_list};
        __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 231, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 231, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (__pyx_t_6) {
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_8, __pyx_t_1);
        __Pyx_INCREF(__pyx_v_iter_list);
        __Pyx_GIVEREF(__pyx_v_iter_list);
        PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_8, __pyx_v_iter_list);
        __pyx_t_1 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 231, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
        __pyx_t_4 = __pyx_t_7; __Pyx_INCREF(__pyx_t_4); __pyx_t_2 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_2 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 231, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_9 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 231, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_7); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 231, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 231, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_7); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 231, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 231, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_9(__pyx_t_4);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 231, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
          PyObject* sequence = __pyx_t_7;
          #if !CYTHON_COMPILING_IN_PYPY
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 231, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_1);
          #else
          __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 231, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_6 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 231, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_10 = Py_TYPE(__pyx_t_6)->tp_iternext;
          index = 0; __pyx_t_5 = __pyx_t_10(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L11_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_5);
          index = 1; __pyx_t_1 = __pyx_t_10(__pyx_t_6); if (unlikely(!__pyx_t_1)) goto __pyx_L11_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_1);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_6), 2) < 0) __PYX_ERR(0, 231, __pyx_L1_error)
          __pyx_t_10 = NULL;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          goto __pyx_L12_unpacking_done;
          __pyx_L11_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_10 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 231, __pyx_L1_error)
          __pyx_L12_unpacking_done:;
        }
        __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_base, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_v_posterior_correct_prob = __pyx_t_11;

        /* "tgirt_seq_tools/read_cluster.pyx":232
 *         else:
 *             for base, posterior_correct_prob in imap(calculate_concensus_base, iter_list):
 *                 sequence += base             # <<<<<<<<<<<<<<
 *                 quality += prob_to_qual_string(posterior_correct_prob)
 *     return sequence, quality
 */
        __pyx_t_7 = PyNumber_InPlaceAdd(__pyx_v_sequence, __pyx_v_base); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 232, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (!(likely(PyString_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_7)->tp_name), 0))) __PYX_ERR(0, 232, __pyx_L1_error)
        __Pyx_DECREF_SET(__pyx_v_sequence, ((PyObject*)__pyx_t_7));
        __pyx_t_7 = 0;

        /* "tgirt_seq_tools/read_cluster.pyx":233
 *             for base, posterior_correct_prob in imap(calculate_concensus_base, iter_list):
 *                 sequence += base
 *                 quality += prob_to_qual_string(posterior_correct_prob)             # <<<<<<<<<<<<<<
 *     return sequence, quality
 * 
 */
        __pyx_t_7 = PyFloat_FromDouble(__pyx_v_posterior_correct_prob); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 233, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_1 = __pyx_f_15tgirt_seq_tools_12read_cluster_prob_to_qual_string(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_InPlaceAdd(__pyx_v_quality, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 233, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF_SET(__pyx_v_quality, ((PyObject*)__pyx_t_7));
        __pyx_t_7 = 0;

        /* "tgirt_seq_tools/read_cluster.pyx":231
 *                 quality += prob_to_qual_string(posterior_correct_prob)
 *         else:
 *             for base, posterior_correct_prob in imap(calculate_concensus_base, iter_list):             # <<<<<<<<<<<<<<
 *                 sequence += base
 *                 quality += prob_to_qual_string(posterior_correct_prob)
 */
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_L4:;
  }
  __pyx_L3:;

  /* "tgirt_seq_tools/read_cluster.pyx":234
 *                 sequence += base
 *                 quality += prob_to_qual_string(posterior_correct_prob)
 *     return sequence, quality             # <<<<<<<<<<<<<<
 * 
 * cdef class readGroup:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_sequence);
  __Pyx_GIVEREF(__pyx_v_sequence);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_sequence);
  __Pyx_INCREF(__pyx_v_quality);
  __Pyx_GIVEREF(__pyx_v_quality);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_quality);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "tgirt_seq_tools/read_cluster.pyx":202
 * 
 * 
 * def concensus_sequence(conserved, aln_table):             # <<<<<<<<<<<<<<
 *     """given a list of sequences, a list of quality and sequence length.
 *         assertion: all seq in seqlist should have same length (see function: selectSeqLength)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.concensus_sequence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sequence);
  __Pyx_XDECREF(__pyx_v_quality);
  __Pyx_XDECREF(__pyx_v_in_seq_list);
  __Pyx_XDECREF(__pyx_v_in_qual_list);
  __Pyx_XDECREF(__pyx_v_len_array);
  __Pyx_XDECREF(__pyx_v_len_filter);
  __Pyx_XDECREF(__pyx_v_iter_list);
  __Pyx_XDECREF(__pyx_v_base);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pyx":240
 *     Read group object
 *     '''
 *     def __init__(self,aln, tag):             # <<<<<<<<<<<<<<
 *         #assert self.barcode == '', 'Cluster already initialzed with %s' %(self.barcode)
 * 
 */

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_aln = 0;
  PyObject *__pyx_v_tag = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_aln,&__pyx_n_s_tag,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_aln)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 240, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 240, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_aln = values[0];
    __pyx_v_tag = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 240, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.readGroup.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup___init__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self), __pyx_v_aln, __pyx_v_tag);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup___init__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_aln, PyObject *__pyx_v_tag) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "tgirt_seq_tools/read_cluster.pyx":244
 * 
 *         #self.barcode = aln.query_name.split('_')[0]
 *         self.barcode = aln.get_tag(tag)             # <<<<<<<<<<<<<<
 *         self.R1 = []
 *         self.R2 = []
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_get_tag); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_tag); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_tag};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_tag};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_tag);
      __Pyx_GIVEREF(__pyx_v_tag);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_tag);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->barcode);
  __Pyx_DECREF(__pyx_v_self->barcode);
  __pyx_v_self->barcode = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":245
 *         #self.barcode = aln.query_name.split('_')[0]
 *         self.barcode = aln.get_tag(tag)
 *         self.R1 = []             # <<<<<<<<<<<<<<
 *         self.R2 = []
 *         self.R1_flag = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->R1);
  __Pyx_DECREF(__pyx_v_self->R1);
  __pyx_v_self->R1 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":246
 *         self.barcode = aln.get_tag(tag)
 *         self.R1 = []
 *         self.R2 = []             # <<<<<<<<<<<<<<
 *         self.R1_flag = []
 *         self.R2_flag = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->R2);
  __Pyx_DECREF(__pyx_v_self->R2);
  __pyx_v_self->R2 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":247
 *         self.R1 = []
 *         self.R2 = []
 *         self.R1_flag = []             # <<<<<<<<<<<<<<
 *         self.R2_flag = []
 *         self.R1_position = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->R1_flag);
  __Pyx_DECREF(__pyx_v_self->R1_flag);
  __pyx_v_self->R1_flag = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":248
 *         self.R2 = []
 *         self.R1_flag = []
 *         self.R2_flag = []             # <<<<<<<<<<<<<<
 *         self.R1_position = []
 *         self.R2_position = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->R2_flag);
  __Pyx_DECREF(__pyx_v_self->R2_flag);
  __pyx_v_self->R2_flag = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":249
 *         self.R1_flag = []
 *         self.R2_flag = []
 *         self.R1_position = []             # <<<<<<<<<<<<<<
 *         self.R2_position = []
 *         self.R1_chrom = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->R1_position);
  __Pyx_DECREF(__pyx_v_self->R1_position);
  __pyx_v_self->R1_position = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":250
 *         self.R2_flag = []
 *         self.R1_position = []
 *         self.R2_position = []             # <<<<<<<<<<<<<<
 *         self.R1_chrom = []
 *         self.R2_chrom = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->R2_position);
  __Pyx_DECREF(__pyx_v_self->R2_position);
  __pyx_v_self->R2_position = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":251
 *         self.R1_position = []
 *         self.R2_position = []
 *         self.R1_chrom = []             # <<<<<<<<<<<<<<
 *         self.R2_chrom = []
 *         self.concensus_read1 = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->R1_chrom);
  __Pyx_DECREF(__pyx_v_self->R1_chrom);
  __pyx_v_self->R1_chrom = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":252
 *         self.R2_position = []
 *         self.R1_chrom = []
 *         self.R2_chrom = []             # <<<<<<<<<<<<<<
 *         self.concensus_read1 = []
 *         self.concensus_read2 = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->R2_chrom);
  __Pyx_DECREF(__pyx_v_self->R2_chrom);
  __pyx_v_self->R2_chrom = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":253
 *         self.R1_chrom = []
 *         self.R2_chrom = []
 *         self.concensus_read1 = []             # <<<<<<<<<<<<<<
 *         self.concensus_read2 = []
 *         self.member_count_list = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->concensus_read1);
  __Pyx_DECREF(__pyx_v_self->concensus_read1);
  __pyx_v_self->concensus_read1 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":254
 *         self.R2_chrom = []
 *         self.concensus_read1 = []
 *         self.concensus_read2 = []             # <<<<<<<<<<<<<<
 *         self.member_count_list = []
 *         self.concensus_flag1 = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->concensus_read2);
  __Pyx_DECREF(__pyx_v_self->concensus_read2);
  __pyx_v_self->concensus_read2 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":255
 *         self.concensus_read1 = []
 *         self.concensus_read2 = []
 *         self.member_count_list = []             # <<<<<<<<<<<<<<
 *         self.concensus_flag1 = []
 *         self.concensus_flag2 = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->member_count_list);
  __Pyx_DECREF(__pyx_v_self->member_count_list);
  __pyx_v_self->member_count_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":256
 *         self.concensus_read2 = []
 *         self.member_count_list = []
 *         self.concensus_flag1 = []             # <<<<<<<<<<<<<<
 *         self.concensus_flag2 = []
 *         self.fastq_record = ''
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->concensus_flag1);
  __Pyx_DECREF(__pyx_v_self->concensus_flag1);
  __pyx_v_self->concensus_flag1 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":257
 *         self.member_count_list = []
 *         self.concensus_flag1 = []
 *         self.concensus_flag2 = []             # <<<<<<<<<<<<<<
 *         self.fastq_record = ''
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->concensus_flag2);
  __Pyx_DECREF(__pyx_v_self->concensus_flag2);
  __pyx_v_self->concensus_flag2 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":258
 *         self.concensus_flag1 = []
 *         self.concensus_flag2 = []
 *         self.fastq_record = ''             # <<<<<<<<<<<<<<
 * 
 *         self.put_alignment(aln)
 */
  __Pyx_INCREF(__pyx_kp_s__5);
  __Pyx_GIVEREF(__pyx_kp_s__5);
  __Pyx_GOTREF(__pyx_v_self->fastq_record);
  __Pyx_DECREF(__pyx_v_self->fastq_record);
  __pyx_v_self->fastq_record = __pyx_kp_s__5;

  /* "tgirt_seq_tools/read_cluster.pyx":260
 *         self.fastq_record = ''
 * 
 *         self.put_alignment(aln)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_put_alignment); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_aln); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_aln};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_aln};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_aln);
      __Pyx_GIVEREF(__pyx_v_aln);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_aln);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":240
 *     Read group object
 *     '''
 *     def __init__(self,aln, tag):             # <<<<<<<<<<<<<<
 *         #assert self.barcode == '', 'Cluster already initialzed with %s' %(self.barcode)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.readGroup.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pyx":263
 * 
 * 
 *     def put_alignment(self, aln):             # <<<<<<<<<<<<<<
 *         '''
 *             add alignment to read group
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_3put_alignment(PyObject *__pyx_v_self, PyObject *__pyx_v_aln); /*proto*/
static char __pyx_doc_15tgirt_seq_tools_12read_cluster_9readGroup_2put_alignment[] = "\n            add alignment to read group\n        ";
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_3put_alignment(PyObject *__pyx_v_self, PyObject *__pyx_v_aln) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("put_alignment (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_2put_alignment(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self), ((PyObject *)__pyx_v_aln));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_2put_alignment(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_aln) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("put_alignment", 0);

  /* "tgirt_seq_tools/read_cluster.pyx":268
 *         '''
 * 
 *         if aln.is_read1:             # <<<<<<<<<<<<<<
 *             self.R1.append([aln.query_sequence, aln.qual])
 *             self.R1_flag.append(aln.is_reverse)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_is_read1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "tgirt_seq_tools/read_cluster.pyx":269
 * 
 *         if aln.is_read1:
 *             self.R1.append([aln.query_sequence, aln.qual])             # <<<<<<<<<<<<<<
 *             self.R1_flag.append(aln.is_reverse)
 *             self.R1_position.append(aln.pos)
 */
    if (unlikely(__pyx_v_self->R1 == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
      __PYX_ERR(0, 269, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_query_sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_qual); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_self->R1, __pyx_t_4); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 269, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":270
 *         if aln.is_read1:
 *             self.R1.append([aln.query_sequence, aln.qual])
 *             self.R1_flag.append(aln.is_reverse)             # <<<<<<<<<<<<<<
 *             self.R1_position.append(aln.pos)
 *             self.R1_chrom.append(aln.reference_id)
 */
    if (unlikely(__pyx_v_self->R1_flag == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
      __PYX_ERR(0, 270, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_is_reverse); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_self->R1_flag, __pyx_t_4); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 270, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":271
 *             self.R1.append([aln.query_sequence, aln.qual])
 *             self.R1_flag.append(aln.is_reverse)
 *             self.R1_position.append(aln.pos)             # <<<<<<<<<<<<<<
 *             self.R1_chrom.append(aln.reference_id)
 * 
 */
    if (unlikely(__pyx_v_self->R1_position == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
      __PYX_ERR(0, 271, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_pos); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_self->R1_position, __pyx_t_4); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 271, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":272
 *             self.R1_flag.append(aln.is_reverse)
 *             self.R1_position.append(aln.pos)
 *             self.R1_chrom.append(aln.reference_id)             # <<<<<<<<<<<<<<
 * 
 *         elif aln.is_read2:
 */
    if (unlikely(__pyx_v_self->R1_chrom == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
      __PYX_ERR(0, 272, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_reference_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_self->R1_chrom, __pyx_t_4); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 272, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":268
 *         '''
 * 
 *         if aln.is_read1:             # <<<<<<<<<<<<<<
 *             self.R1.append([aln.query_sequence, aln.qual])
 *             self.R1_flag.append(aln.is_reverse)
 */
    goto __pyx_L3;
  }

  /* "tgirt_seq_tools/read_cluster.pyx":274
 *             self.R1_chrom.append(aln.reference_id)
 * 
 *         elif aln.is_read2:             # <<<<<<<<<<<<<<
 *             self.R2.append([aln.query_sequence, aln.qual])
 *             self.R2_flag.append(aln.is_reverse)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_is_read2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {

    /* "tgirt_seq_tools/read_cluster.pyx":275
 * 
 *         elif aln.is_read2:
 *             self.R2.append([aln.query_sequence, aln.qual])             # <<<<<<<<<<<<<<
 *             self.R2_flag.append(aln.is_reverse)
 *             self.R2_position.append(aln.pos)
 */
    if (unlikely(__pyx_v_self->R2 == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
      __PYX_ERR(0, 275, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_query_sequence); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_qual); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_4);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_self->R2, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":276
 *         elif aln.is_read2:
 *             self.R2.append([aln.query_sequence, aln.qual])
 *             self.R2_flag.append(aln.is_reverse)             # <<<<<<<<<<<<<<
 *             self.R2_position.append(aln.pos)
 *             self.R2_chrom.append(aln.reference_id)
 */
    if (unlikely(__pyx_v_self->R2_flag == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
      __PYX_ERR(0, 276, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_is_reverse); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_self->R2_flag, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":277
 *             self.R2.append([aln.query_sequence, aln.qual])
 *             self.R2_flag.append(aln.is_reverse)
 *             self.R2_position.append(aln.pos)             # <<<<<<<<<<<<<<
 *             self.R2_chrom.append(aln.reference_id)
 * 
 */
    if (unlikely(__pyx_v_self->R2_position == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
      __PYX_ERR(0, 277, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_self->R2_position, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":278
 *             self.R2_flag.append(aln.is_reverse)
 *             self.R2_position.append(aln.pos)
 *             self.R2_chrom.append(aln.reference_id)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    if (unlikely(__pyx_v_self->R2_chrom == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
      __PYX_ERR(0, 278, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_reference_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_self->R2_chrom, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":274
 *             self.R1_chrom.append(aln.reference_id)
 * 
 *         elif aln.is_read2:             # <<<<<<<<<<<<<<
 *             self.R2.append([aln.query_sequence, aln.qual])
 *             self.R2_flag.append(aln.is_reverse)
 */
  }
  __pyx_L3:;

  /* "tgirt_seq_tools/read_cluster.pyx":263
 * 
 * 
 *     def put_alignment(self, aln):             # <<<<<<<<<<<<<<
 *         '''
 *             add alignment to read group
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.readGroup.put_alignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pyx":281
 * 
 * 
 *     def cluster(self, conserved):             # <<<<<<<<<<<<<<
 *         '''
 *             from read group, generate concensus sequence, quality
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_5cluster(PyObject *__pyx_v_self, PyObject *__pyx_v_conserved); /*proto*/
static char __pyx_doc_15tgirt_seq_tools_12read_cluster_9readGroup_4cluster[] = "\n            from read group, generate concensus sequence, quality\n        ";
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_5cluster(PyObject *__pyx_v_self, PyObject *__pyx_v_conserved) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cluster (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_4cluster(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self), ((PyObject *)__pyx_v_conserved));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_4cluster(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_conserved) {
  PyObject *__pyx_v_iterator = NULL;
  PyObject *__pyx_v_R1_array = NULL;
  PyObject *__pyx_v_R2_array = NULL;
  PyObject *__pyx_v_R1_chrom_array = NULL;
  PyObject *__pyx_v_R2_chrom_array = NULL;
  PyObject *__pyx_v_R1_flag_array = NULL;
  PyObject *__pyx_v_R2_flag_array = NULL;
  PyObject *__pyx_v_R1_pos_array = NULL;
  PyObject *__pyx_v_R2_pos_array = NULL;
  PyObject *__pyx_v__chrom1 = NULL;
  PyObject *__pyx_v__chrom2 = NULL;
  PyObject *__pyx_v__pos1 = NULL;
  PyObject *__pyx_v__pos2 = NULL;
  PyObject *__pyx_v__R1_flag = NULL;
  PyObject *__pyx_v__R2_flag = NULL;
  PyObject *__pyx_v_chrom_is_right = NULL;
  PyObject *__pyx_v_flag_is_right = NULL;
  PyObject *__pyx_v_pos_is_right = NULL;
  PyObject *__pyx_v_cluster = NULL;
  PyObject *__pyx_v_R1_filtered = NULL;
  PyObject *__pyx_v_R2_filtered = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_t_14;
  int __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  __Pyx_RefNannySetupContext("cluster", 0);

  /* "tgirt_seq_tools/read_cluster.pyx":285
 *             from read group, generate concensus sequence, quality
 *         '''
 *         assert self.R2 and self.R1, (self.R1, self.R2, self.barcode)             # <<<<<<<<<<<<<<
 *         assert self.R2.shape == self.R1.shape, 'Unequal R1 list vs R2'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = (__pyx_v_self->R2 != Py_None) && (PyList_GET_SIZE(__pyx_v_self->R2) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = (__pyx_v_self->R1 != Py_None) && (PyList_GET_SIZE(__pyx_v_self->R1) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 285, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_self->R1);
      __Pyx_GIVEREF(__pyx_v_self->R1);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self->R1);
      __Pyx_INCREF(__pyx_v_self->R2);
      __Pyx_GIVEREF(__pyx_v_self->R2);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_self->R2);
      __Pyx_INCREF(__pyx_v_self->barcode);
      __Pyx_GIVEREF(__pyx_v_self->barcode);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_self->barcode);
      __pyx_t_4 = PyTuple_Pack(1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 285, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      PyErr_SetObject(PyExc_AssertionError, __pyx_t_4);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 285, __pyx_L1_error)
    }
  }
  #endif

  /* "tgirt_seq_tools/read_cluster.pyx":286
 *         '''
 *         assert self.R2 and self.R1, (self.R1, self.R2, self.barcode)
 *         assert self.R2.shape == self.R1.shape, 'Unequal R1 list vs R2'             # <<<<<<<<<<<<<<
 * 
 *         iterator = set(zip(self.R1_chrom, self.R2_chrom,
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->R2, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->R1, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Unequal_R1_list_vs_R2);
      __PYX_ERR(0, 286, __pyx_L1_error)
    }
  }
  #endif

  /* "tgirt_seq_tools/read_cluster.pyx":288
 *         assert self.R2.shape == self.R1.shape, 'Unequal R1 list vs R2'
 * 
 *         iterator = set(zip(self.R1_chrom, self.R2_chrom,             # <<<<<<<<<<<<<<
 *                            self.R1_position, self.R2_position,
 *                            self.R1_flag, self.R2_flag))
 */
  __pyx_t_5 = PyTuple_New(6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_self->R1_chrom);
  __Pyx_GIVEREF(__pyx_v_self->R1_chrom);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_self->R1_chrom);
  __Pyx_INCREF(__pyx_v_self->R2_chrom);
  __Pyx_GIVEREF(__pyx_v_self->R2_chrom);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_self->R2_chrom);
  __Pyx_INCREF(__pyx_v_self->R1_position);
  __Pyx_GIVEREF(__pyx_v_self->R1_position);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_self->R1_position);
  __Pyx_INCREF(__pyx_v_self->R2_position);
  __Pyx_GIVEREF(__pyx_v_self->R2_position);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_v_self->R2_position);
  __Pyx_INCREF(__pyx_v_self->R1_flag);
  __Pyx_GIVEREF(__pyx_v_self->R1_flag);
  PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_v_self->R1_flag);
  __Pyx_INCREF(__pyx_v_self->R2_flag);
  __Pyx_GIVEREF(__pyx_v_self->R2_flag);
  PyTuple_SET_ITEM(__pyx_t_5, 5, __pyx_v_self->R2_flag);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_iterator = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":292
 *                            self.R1_flag, self.R2_flag))
 * 
 *         R1_array = np.array(self.R1)             # <<<<<<<<<<<<<<
 *         R2_array = np.array(self.R2)
 *         R1_chrom_array = np.array(self.R1_chrom)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_self->R1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_self->R1};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 292, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_self->R1};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 292, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 292, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_self->R1);
      __Pyx_GIVEREF(__pyx_v_self->R1);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_self->R1);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 292, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_R1_array = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":293
 * 
 *         R1_array = np.array(self.R1)
 *         R2_array = np.array(self.R2)             # <<<<<<<<<<<<<<
 *         R1_chrom_array = np.array(self.R1_chrom)
 *         R2_chrom_array = np.array(self.R2_chrom)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_self->R2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_self->R2};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 293, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_self->R2};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 293, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 293, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_self->R2);
      __Pyx_GIVEREF(__pyx_v_self->R2);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_self->R2);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 293, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_R2_array = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":294
 *         R1_array = np.array(self.R1)
 *         R2_array = np.array(self.R2)
 *         R1_chrom_array = np.array(self.R1_chrom)             # <<<<<<<<<<<<<<
 *         R2_chrom_array = np.array(self.R2_chrom)
 *         R1_flag_array = np.array(self.R1_flag)
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_self->R1_chrom); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_self->R1_chrom};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 294, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_self->R1_chrom};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 294, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 294, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_self->R1_chrom);
      __Pyx_GIVEREF(__pyx_v_self->R1_chrom);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_self->R1_chrom);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 294, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_R1_chrom_array = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":295
 *         R2_array = np.array(self.R2)
 *         R1_chrom_array = np.array(self.R1_chrom)
 *         R2_chrom_array = np.array(self.R2_chrom)             # <<<<<<<<<<<<<<
 *         R1_flag_array = np.array(self.R1_flag)
 *         R2_flag_array = np.array(self.R2_flag)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_self->R2_chrom); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_self->R2_chrom};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 295, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_self->R2_chrom};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 295, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_self->R2_chrom);
      __Pyx_GIVEREF(__pyx_v_self->R2_chrom);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_self->R2_chrom);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_R2_chrom_array = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":296
 *         R1_chrom_array = np.array(self.R1_chrom)
 *         R2_chrom_array = np.array(self.R2_chrom)
 *         R1_flag_array = np.array(self.R1_flag)             # <<<<<<<<<<<<<<
 *         R2_flag_array = np.array(self.R2_flag)
 *         R1_pos_array = np.array(self.R1_position)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_self->R1_flag); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_self->R1_flag};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 296, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_self->R1_flag};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 296, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 296, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_self->R1_flag);
      __Pyx_GIVEREF(__pyx_v_self->R1_flag);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_self->R1_flag);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 296, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_R1_flag_array = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":297
 *         R2_chrom_array = np.array(self.R2_chrom)
 *         R1_flag_array = np.array(self.R1_flag)
 *         R2_flag_array = np.array(self.R2_flag)             # <<<<<<<<<<<<<<
 *         R1_pos_array = np.array(self.R1_position)
 *         R2_pos_array = np.array(self.R2_position)
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_self->R2_flag); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_self->R2_flag};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 297, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_self->R2_flag};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 297, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_self->R2_flag);
      __Pyx_GIVEREF(__pyx_v_self->R2_flag);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_self->R2_flag);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_R2_flag_array = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":298
 *         R1_flag_array = np.array(self.R1_flag)
 *         R2_flag_array = np.array(self.R2_flag)
 *         R1_pos_array = np.array(self.R1_position)             # <<<<<<<<<<<<<<
 *         R2_pos_array = np.array(self.R2_position)
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_self->R1_position); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_self->R1_position};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 298, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_self->R1_position};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 298, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 298, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_self->R1_position);
      __Pyx_GIVEREF(__pyx_v_self->R1_position);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_self->R1_position);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 298, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_R1_pos_array = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":299
 *         R2_flag_array = np.array(self.R2_flag)
 *         R1_pos_array = np.array(self.R1_position)
 *         R2_pos_array = np.array(self.R2_position)             # <<<<<<<<<<<<<<
 * 
 *         for _chrom1, _chrom2, _pos1, _pos2, _R1_flag, _R2_flag in iterator:
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_self->R2_position); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_self->R2_position};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 299, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_self->R2_position};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 299, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 299, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_self->R2_position);
      __Pyx_GIVEREF(__pyx_v_self->R2_position);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_self->R2_position);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 299, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_R2_pos_array = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":301
 *         R2_pos_array = np.array(self.R2_position)
 * 
 *         for _chrom1, _chrom2, _pos1, _pos2, _R1_flag, _R2_flag in iterator:             # <<<<<<<<<<<<<<
 *             chrom_is_right = (R1_chrom_array == _chrom1) & (R2_chrom_array == _chrom2)
 *             flag_is_right = (R1_flag_array == _R1_flag) & (R2_flag_array == _R2_flag)
 */
  __pyx_t_5 = PyObject_GetIter(__pyx_v_iterator); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 301, __pyx_L1_error)
  for (;;) {
    {
      __pyx_t_6 = __pyx_t_7(__pyx_t_5);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 301, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
      PyObject* sequence = __pyx_t_6;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 6)) {
        if (size > 6) __Pyx_RaiseTooManyValuesError(6);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 301, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 3); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 4); 
        __pyx_t_11 = PyTuple_GET_ITEM(sequence, 5); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 3); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 4); 
        __pyx_t_11 = PyList_GET_ITEM(sequence, 5); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_11);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[6] = {&__pyx_t_3,&__pyx_t_4,&__pyx_t_8,&__pyx_t_9,&__pyx_t_10,&__pyx_t_11};
        for (i=0; i < 6; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 301, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[6] = {&__pyx_t_3,&__pyx_t_4,&__pyx_t_8,&__pyx_t_9,&__pyx_t_10,&__pyx_t_11};
      __pyx_t_12 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 301, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_13 = Py_TYPE(__pyx_t_12)->tp_iternext;
      for (index=0; index < 6; index++) {
        PyObject* item = __pyx_t_13(__pyx_t_12); if (unlikely(!item)) goto __pyx_L7_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_12), 6) < 0) __PYX_ERR(0, 301, __pyx_L1_error)
      __pyx_t_13 = NULL;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      goto __pyx_L8_unpacking_done;
      __pyx_L7_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 301, __pyx_L1_error)
      __pyx_L8_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v__chrom1, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v__chrom2, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v__pos1, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v__pos2, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v__R1_flag, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v__R2_flag, __pyx_t_11);
    __pyx_t_11 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":302
 * 
 *         for _chrom1, _chrom2, _pos1, _pos2, _R1_flag, _R2_flag in iterator:
 *             chrom_is_right = (R1_chrom_array == _chrom1) & (R2_chrom_array == _chrom2)             # <<<<<<<<<<<<<<
 *             flag_is_right = (R1_flag_array == _R1_flag) & (R2_flag_array == _R2_flag)
 *             pos_is_right = (R1_pos_array == _pos1) & (R2_pos_array == _pos2)
 */
    __pyx_t_6 = PyObject_RichCompare(__pyx_v_R1_chrom_array, __pyx_v__chrom1, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 302, __pyx_L1_error)
    __pyx_t_11 = PyObject_RichCompare(__pyx_v_R2_chrom_array, __pyx_v__chrom2, Py_EQ); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 302, __pyx_L1_error)
    __pyx_t_10 = PyNumber_And(__pyx_t_6, __pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF_SET(__pyx_v_chrom_is_right, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":303
 *         for _chrom1, _chrom2, _pos1, _pos2, _R1_flag, _R2_flag in iterator:
 *             chrom_is_right = (R1_chrom_array == _chrom1) & (R2_chrom_array == _chrom2)
 *             flag_is_right = (R1_flag_array == _R1_flag) & (R2_flag_array == _R2_flag)             # <<<<<<<<<<<<<<
 *             pos_is_right = (R1_pos_array == _pos1) & (R2_pos_array == _pos2)
 * 
 */
    __pyx_t_10 = PyObject_RichCompare(__pyx_v_R1_flag_array, __pyx_v__R1_flag, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 303, __pyx_L1_error)
    __pyx_t_11 = PyObject_RichCompare(__pyx_v_R2_flag_array, __pyx_v__R2_flag, Py_EQ); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 303, __pyx_L1_error)
    __pyx_t_6 = PyNumber_And(__pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF_SET(__pyx_v_flag_is_right, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":304
 *             chrom_is_right = (R1_chrom_array == _chrom1) & (R2_chrom_array == _chrom2)
 *             flag_is_right = (R1_flag_array == _R1_flag) & (R2_flag_array == _R2_flag)
 *             pos_is_right = (R1_pos_array == _pos1) & (R2_pos_array == _pos2)             # <<<<<<<<<<<<<<
 * 
 *             cluster = chrom_is_right & flag_is_right & pos_is_right
 */
    __pyx_t_6 = PyObject_RichCompare(__pyx_v_R1_pos_array, __pyx_v__pos1, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 304, __pyx_L1_error)
    __pyx_t_11 = PyObject_RichCompare(__pyx_v_R2_pos_array, __pyx_v__pos2, Py_EQ); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 304, __pyx_L1_error)
    __pyx_t_10 = PyNumber_And(__pyx_t_6, __pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF_SET(__pyx_v_pos_is_right, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":306
 *             pos_is_right = (R1_pos_array == _pos1) & (R2_pos_array == _pos2)
 * 
 *             cluster = chrom_is_right & flag_is_right & pos_is_right             # <<<<<<<<<<<<<<
 *             R1_filtered, R2_filtered = R1_array[cluster,:], R2_array[cluster,:]
 *             self.concensus_read1.append(concensus_sequence(conserved, R1_filtered))
 */
    __pyx_t_10 = PyNumber_And(__pyx_v_chrom_is_right, __pyx_v_flag_is_right); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = PyNumber_And(__pyx_t_10, __pyx_v_pos_is_right); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_cluster, __pyx_t_11);
    __pyx_t_11 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":307
 * 
 *             cluster = chrom_is_right & flag_is_right & pos_is_right
 *             R1_filtered, R2_filtered = R1_array[cluster,:], R2_array[cluster,:]             # <<<<<<<<<<<<<<
 *             self.concensus_read1.append(concensus_sequence(conserved, R1_filtered))
 *             self.concensus_read2.append(concensus_sequence(conserved, R2_filtered))
 */
    __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_INCREF(__pyx_v_cluster);
    __Pyx_GIVEREF(__pyx_v_cluster);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_v_cluster);
    __Pyx_INCREF(__pyx_slice__10);
    __Pyx_GIVEREF(__pyx_slice__10);
    PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_slice__10);
    __pyx_t_10 = PyObject_GetItem(__pyx_v_R1_array, __pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_INCREF(__pyx_v_cluster);
    __Pyx_GIVEREF(__pyx_v_cluster);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_v_cluster);
    __Pyx_INCREF(__pyx_slice__11);
    __Pyx_GIVEREF(__pyx_slice__11);
    PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_slice__11);
    __pyx_t_6 = PyObject_GetItem(__pyx_v_R2_array, __pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF_SET(__pyx_v_R1_filtered, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_R2_filtered, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":308
 *             cluster = chrom_is_right & flag_is_right & pos_is_right
 *             R1_filtered, R2_filtered = R1_array[cluster,:], R2_array[cluster,:]
 *             self.concensus_read1.append(concensus_sequence(conserved, R1_filtered))             # <<<<<<<<<<<<<<
 *             self.concensus_read2.append(concensus_sequence(conserved, R2_filtered))
 *             self.member_count_list.append(len(R1_filtered[:,1]))
 */
    if (unlikely(__pyx_v_self->concensus_read1 == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
      __PYX_ERR(0, 308, __pyx_L1_error)
    }
    __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_concensus_sequence); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = NULL;
    __pyx_t_14 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
        __pyx_t_14 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_10)) {
      PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_v_conserved, __pyx_v_R1_filtered};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 308, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
      PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_v_conserved, __pyx_v_R1_filtered};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 308, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 308, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_11) {
        __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_11); __pyx_t_11 = NULL;
      }
      __Pyx_INCREF(__pyx_v_conserved);
      __Pyx_GIVEREF(__pyx_v_conserved);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_14, __pyx_v_conserved);
      __Pyx_INCREF(__pyx_v_R1_filtered);
      __Pyx_GIVEREF(__pyx_v_R1_filtered);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_14, __pyx_v_R1_filtered);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_9, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 308, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_self->concensus_read1, __pyx_t_6); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":309
 *             R1_filtered, R2_filtered = R1_array[cluster,:], R2_array[cluster,:]
 *             self.concensus_read1.append(concensus_sequence(conserved, R1_filtered))
 *             self.concensus_read2.append(concensus_sequence(conserved, R2_filtered))             # <<<<<<<<<<<<<<
 *             self.member_count_list.append(len(R1_filtered[:,1]))
 *             self.concensus_flag1.append(_R1_flag)
 */
    if (unlikely(__pyx_v_self->concensus_read2 == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
      __PYX_ERR(0, 309, __pyx_L1_error)
    }
    __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_concensus_sequence); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_9 = NULL;
    __pyx_t_14 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
        __pyx_t_14 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_10)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_v_conserved, __pyx_v_R2_filtered};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 309, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_v_conserved, __pyx_v_R2_filtered};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 309, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    {
      __pyx_t_11 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 309, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_INCREF(__pyx_v_conserved);
      __Pyx_GIVEREF(__pyx_v_conserved);
      PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_14, __pyx_v_conserved);
      __Pyx_INCREF(__pyx_v_R2_filtered);
      __Pyx_GIVEREF(__pyx_v_R2_filtered);
      PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_14, __pyx_v_R2_filtered);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_11, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 309, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_self->concensus_read2, __pyx_t_6); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":310
 *             self.concensus_read1.append(concensus_sequence(conserved, R1_filtered))
 *             self.concensus_read2.append(concensus_sequence(conserved, R2_filtered))
 *             self.member_count_list.append(len(R1_filtered[:,1]))             # <<<<<<<<<<<<<<
 *             self.concensus_flag1.append(_R1_flag)
 *             self.concensus_flag2.append(_R2_flag)
 */
    if (unlikely(__pyx_v_self->member_count_list == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
      __PYX_ERR(0, 310, __pyx_L1_error)
    }
    __pyx_t_6 = PyObject_GetItem(__pyx_v_R1_filtered, __pyx_tuple__13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_16 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_16 == -1)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_16); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_self->member_count_list, __pyx_t_6); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":311
 *             self.concensus_read2.append(concensus_sequence(conserved, R2_filtered))
 *             self.member_count_list.append(len(R1_filtered[:,1]))
 *             self.concensus_flag1.append(_R1_flag)             # <<<<<<<<<<<<<<
 *             self.concensus_flag2.append(_R2_flag)
 * 
 */
    if (unlikely(__pyx_v_self->concensus_flag1 == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
      __PYX_ERR(0, 311, __pyx_L1_error)
    }
    __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_self->concensus_flag1, __pyx_v__R1_flag); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 311, __pyx_L1_error)

    /* "tgirt_seq_tools/read_cluster.pyx":312
 *             self.member_count_list.append(len(R1_filtered[:,1]))
 *             self.concensus_flag1.append(_R1_flag)
 *             self.concensus_flag2.append(_R2_flag)             # <<<<<<<<<<<<<<
 * 
 *     def generate_fastq_record(self):
 */
    if (unlikely(__pyx_v_self->concensus_flag2 == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
      __PYX_ERR(0, 312, __pyx_L1_error)
    }
    __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_self->concensus_flag2, __pyx_v__R2_flag); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 312, __pyx_L1_error)

    /* "tgirt_seq_tools/read_cluster.pyx":301
 *         R2_pos_array = np.array(self.R2_position)
 * 
 *         for _chrom1, _chrom2, _pos1, _pos2, _R1_flag, _R2_flag in iterator:             # <<<<<<<<<<<<<<
 *             chrom_is_right = (R1_chrom_array == _chrom1) & (R2_chrom_array == _chrom2)
 *             flag_is_right = (R1_flag_array == _R1_flag) & (R2_flag_array == _R2_flag)
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":281
 * 
 * 
 *     def cluster(self, conserved):             # <<<<<<<<<<<<<<
 *         '''
 *             from read group, generate concensus sequence, quality
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.readGroup.cluster", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_iterator);
  __Pyx_XDECREF(__pyx_v_R1_array);
  __Pyx_XDECREF(__pyx_v_R2_array);
  __Pyx_XDECREF(__pyx_v_R1_chrom_array);
  __Pyx_XDECREF(__pyx_v_R2_chrom_array);
  __Pyx_XDECREF(__pyx_v_R1_flag_array);
  __Pyx_XDECREF(__pyx_v_R2_flag_array);
  __Pyx_XDECREF(__pyx_v_R1_pos_array);
  __Pyx_XDECREF(__pyx_v_R2_pos_array);
  __Pyx_XDECREF(__pyx_v__chrom1);
  __Pyx_XDECREF(__pyx_v__chrom2);
  __Pyx_XDECREF(__pyx_v__pos1);
  __Pyx_XDECREF(__pyx_v__pos2);
  __Pyx_XDECREF(__pyx_v__R1_flag);
  __Pyx_XDECREF(__pyx_v__R2_flag);
  __Pyx_XDECREF(__pyx_v_chrom_is_right);
  __Pyx_XDECREF(__pyx_v_flag_is_right);
  __Pyx_XDECREF(__pyx_v_pos_is_right);
  __Pyx_XDECREF(__pyx_v_cluster);
  __Pyx_XDECREF(__pyx_v_R1_filtered);
  __Pyx_XDECREF(__pyx_v_R2_filtered);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pyx":314
 *             self.concensus_flag2.append(_R2_flag)
 * 
 *     def generate_fastq_record(self):             # <<<<<<<<<<<<<<
 *         '''
 *             from concensus sequence generate fastq record
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7generate_fastq_record(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_15tgirt_seq_tools_12read_cluster_9readGroup_6generate_fastq_record[] = "\n            from concensus sequence generate fastq record\n        ";
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7generate_fastq_record(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate_fastq_record (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_6generate_fastq_record(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_6generate_fastq_record(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  PyObject *__pyx_v_r1_seq = 0;
  PyObject *__pyx_v_r1_qual = 0;
  PyObject *__pyx_v_r2_seq = 0;
  PyObject *__pyx_v_r2_qual = 0;
  int __pyx_v_member_count;
  PyBoolObject *__pyx_v_strand1 = 0;
  PyBoolObject *__pyx_v_strand2 = 0;
  PyObject *__pyx_v_iterable = NULL;
  PyObject *__pyx_v_fastq_record_1 = NULL;
  PyObject *__pyx_v_fastq_record_2 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  __Pyx_RefNannySetupContext("generate_fastq_record", 0);

  /* "tgirt_seq_tools/read_cluster.pyx":323
 *             bool strand1, strand2
 * 
 *         assert self.concensus_read1, 'No concensus read generated'             # <<<<<<<<<<<<<<
 *         iterable = izip(self.concensus_read1, self.concensus_read2,
 *                         self.member_count_list,
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (__pyx_v_self->concensus_read1 != Py_None) && (PyList_GET_SIZE(__pyx_v_self->concensus_read1) != 0);
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_No_concensus_read_generated);
      __PYX_ERR(0, 323, __pyx_L1_error)
    }
  }
  #endif

  /* "tgirt_seq_tools/read_cluster.pyx":324
 * 
 *         assert self.concensus_read1, 'No concensus read generated'
 *         iterable = izip(self.concensus_read1, self.concensus_read2,             # <<<<<<<<<<<<<<
 *                         self.member_count_list,
 *                         self.concensus_flag1, self.concensus_flag2)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_izip); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "tgirt_seq_tools/read_cluster.pyx":326
 *         iterable = izip(self.concensus_read1, self.concensus_read2,
 *                         self.member_count_list,
 *                         self.concensus_flag1, self.concensus_flag2)             # <<<<<<<<<<<<<<
 *         for (r1_seq, r1_qual), (r2_seq, r2_qual), member_count, strand1, strand2 in iterable:
 *             r1_seq, r1_qual = fix_strand(r1_seq, r1_qual, strand1)
 */
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[6] = {__pyx_t_4, __pyx_v_self->concensus_read1, __pyx_v_self->concensus_read2, __pyx_v_self->member_count_list, __pyx_v_self->concensus_flag1, __pyx_v_self->concensus_flag2};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 324, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[6] = {__pyx_t_4, __pyx_v_self->concensus_read1, __pyx_v_self->concensus_read2, __pyx_v_self->member_count_list, __pyx_v_self->concensus_flag1, __pyx_v_self->concensus_flag2};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 324, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(5+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->concensus_read1);
    __Pyx_GIVEREF(__pyx_v_self->concensus_read1);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_self->concensus_read1);
    __Pyx_INCREF(__pyx_v_self->concensus_read2);
    __Pyx_GIVEREF(__pyx_v_self->concensus_read2);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_self->concensus_read2);
    __Pyx_INCREF(__pyx_v_self->member_count_list);
    __Pyx_GIVEREF(__pyx_v_self->member_count_list);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_self->member_count_list);
    __Pyx_INCREF(__pyx_v_self->concensus_flag1);
    __Pyx_GIVEREF(__pyx_v_self->concensus_flag1);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_v_self->concensus_flag1);
    __Pyx_INCREF(__pyx_v_self->concensus_flag2);
    __Pyx_GIVEREF(__pyx_v_self->concensus_flag2);
    PyTuple_SET_ITEM(__pyx_t_6, 4+__pyx_t_5, __pyx_v_self->concensus_flag2);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_iterable = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":327
 *                         self.member_count_list,
 *                         self.concensus_flag1, self.concensus_flag2)
 *         for (r1_seq, r1_qual), (r2_seq, r2_qual), member_count, strand1, strand2 in iterable:             # <<<<<<<<<<<<<<
 *             r1_seq, r1_qual = fix_strand(r1_seq, r1_qual, strand1)
 *             r2_seq, r2_qual = fix_strand(r2_seq, r2_qual, strand2)
 */
  if (likely(PyList_CheckExact(__pyx_v_iterable)) || PyTuple_CheckExact(__pyx_v_iterable)) {
    __pyx_t_2 = __pyx_v_iterable; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_iterable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 327, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 327, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 327, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 327, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 327, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_8(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 327, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 5)) {
        if (size > 5) __Pyx_RaiseTooManyValuesError(5);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 327, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 3); 
        __pyx_t_11 = PyTuple_GET_ITEM(sequence, 4); 
      } else {
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 3); 
        __pyx_t_11 = PyList_GET_ITEM(sequence, 4); 
      }
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_11);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[5] = {&__pyx_t_6,&__pyx_t_4,&__pyx_t_9,&__pyx_t_10,&__pyx_t_11};
        for (i=0; i < 5; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 327, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[5] = {&__pyx_t_6,&__pyx_t_4,&__pyx_t_9,&__pyx_t_10,&__pyx_t_11};
      __pyx_t_12 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_13 = Py_TYPE(__pyx_t_12)->tp_iternext;
      for (index=0; index < 5; index++) {
        PyObject* item = __pyx_t_13(__pyx_t_12); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_12), 5) < 0) __PYX_ERR(0, 327, __pyx_L1_error)
      __pyx_t_13 = NULL;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 327, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 327, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_7cpython_4bool_bool))))) __PYX_ERR(0, 327, __pyx_L1_error)
    if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_7cpython_4bool_bool))))) __PYX_ERR(0, 327, __pyx_L1_error)
    if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
      PyObject* sequence = __pyx_t_6;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 327, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_12 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_14 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_12 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_14 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_14);
      #else
      __pyx_t_12 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_14 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      #endif
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_15 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_13 = Py_TYPE(__pyx_t_15)->tp_iternext;
      index = 0; __pyx_t_12 = __pyx_t_13(__pyx_t_15); if (unlikely(!__pyx_t_12)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_12);
      index = 1; __pyx_t_14 = __pyx_t_13(__pyx_t_15); if (unlikely(!__pyx_t_14)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_14);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_15), 2) < 0) __PYX_ERR(0, 327, __pyx_L1_error)
      __pyx_t_13 = NULL;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      goto __pyx_L8_unpacking_done;
      __pyx_L7_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_13 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 327, __pyx_L1_error)
      __pyx_L8_unpacking_done:;
    }
    if (!(likely(PyString_CheckExact(__pyx_t_12))||((__pyx_t_12) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_12)->tp_name), 0))) __PYX_ERR(0, 327, __pyx_L1_error)
    if (!(likely(PyString_CheckExact(__pyx_t_14))||((__pyx_t_14) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_14)->tp_name), 0))) __PYX_ERR(0, 327, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_r1_seq, ((PyObject*)__pyx_t_12));
    __pyx_t_12 = 0;
    __Pyx_XDECREF_SET(__pyx_v_r1_qual, ((PyObject*)__pyx_t_14));
    __pyx_t_14 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 327, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_14 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_12 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_14 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_12 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_12);
      #else
      __pyx_t_14 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_12 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_15 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = Py_TYPE(__pyx_t_15)->tp_iternext;
      index = 0; __pyx_t_14 = __pyx_t_13(__pyx_t_15); if (unlikely(!__pyx_t_14)) goto __pyx_L9_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_14);
      index = 1; __pyx_t_12 = __pyx_t_13(__pyx_t_15); if (unlikely(!__pyx_t_12)) goto __pyx_L9_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_12);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_15), 2) < 0) __PYX_ERR(0, 327, __pyx_L1_error)
      __pyx_t_13 = NULL;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      goto __pyx_L10_unpacking_done;
      __pyx_L9_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_13 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 327, __pyx_L1_error)
      __pyx_L10_unpacking_done:;
    }
    if (!(likely(PyString_CheckExact(__pyx_t_14))||((__pyx_t_14) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_14)->tp_name), 0))) __PYX_ERR(0, 327, __pyx_L1_error)
    if (!(likely(PyString_CheckExact(__pyx_t_12))||((__pyx_t_12) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_12)->tp_name), 0))) __PYX_ERR(0, 327, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_r2_seq, ((PyObject*)__pyx_t_14));
    __pyx_t_14 = 0;
    __Pyx_XDECREF_SET(__pyx_v_r2_qual, ((PyObject*)__pyx_t_12));
    __pyx_t_12 = 0;
    __pyx_v_member_count = __pyx_t_5;
    __Pyx_XDECREF_SET(__pyx_v_strand1, ((PyBoolObject *)__pyx_t_10));
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_strand2, ((PyBoolObject *)__pyx_t_11));
    __pyx_t_11 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":328
 *                         self.concensus_flag1, self.concensus_flag2)
 *         for (r1_seq, r1_qual), (r2_seq, r2_qual), member_count, strand1, strand2 in iterable:
 *             r1_seq, r1_qual = fix_strand(r1_seq, r1_qual, strand1)             # <<<<<<<<<<<<<<
 *             r2_seq, r2_qual = fix_strand(r2_seq, r2_qual, strand2)
 *             fastq_record_1 = '@%s_%i_member/1\n%s\n+\n%s\n' %(self.barcode, member_count, r1_seq, r1_qual)
 */
    __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_fix_strand); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_10 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_11)) {
      PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_v_r1_seq, __pyx_v_r1_qual, ((PyObject *)__pyx_v_strand1)};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 328, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
      PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_v_r1_seq, __pyx_v_r1_qual, ((PyObject *)__pyx_v_strand1)};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 328, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_10) {
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10); __pyx_t_10 = NULL;
      }
      __Pyx_INCREF(__pyx_v_r1_seq);
      __Pyx_GIVEREF(__pyx_v_r1_seq);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_5, __pyx_v_r1_seq);
      __Pyx_INCREF(__pyx_v_r1_qual);
      __Pyx_GIVEREF(__pyx_v_r1_qual);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_5, __pyx_v_r1_qual);
      __Pyx_INCREF(((PyObject *)__pyx_v_strand1));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_strand1));
      PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_5, ((PyObject *)__pyx_v_strand1));
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 328, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_11 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_11 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_9);
      #else
      __pyx_t_11 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_10 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_13 = Py_TYPE(__pyx_t_10)->tp_iternext;
      index = 0; __pyx_t_11 = __pyx_t_13(__pyx_t_10); if (unlikely(!__pyx_t_11)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_11);
      index = 1; __pyx_t_9 = __pyx_t_13(__pyx_t_10); if (unlikely(!__pyx_t_9)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_10), 2) < 0) __PYX_ERR(0, 328, __pyx_L1_error)
      __pyx_t_13 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L12_unpacking_done;
      __pyx_L11_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_13 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 328, __pyx_L1_error)
      __pyx_L12_unpacking_done:;
    }
    if (!(likely(PyString_CheckExact(__pyx_t_11))||((__pyx_t_11) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_11)->tp_name), 0))) __PYX_ERR(0, 328, __pyx_L1_error)
    if (!(likely(PyString_CheckExact(__pyx_t_9))||((__pyx_t_9) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_9)->tp_name), 0))) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_r1_seq, ((PyObject*)__pyx_t_11));
    __pyx_t_11 = 0;
    __Pyx_DECREF_SET(__pyx_v_r1_qual, ((PyObject*)__pyx_t_9));
    __pyx_t_9 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":329
 *         for (r1_seq, r1_qual), (r2_seq, r2_qual), member_count, strand1, strand2 in iterable:
 *             r1_seq, r1_qual = fix_strand(r1_seq, r1_qual, strand1)
 *             r2_seq, r2_qual = fix_strand(r2_seq, r2_qual, strand2)             # <<<<<<<<<<<<<<
 *             fastq_record_1 = '@%s_%i_member/1\n%s\n+\n%s\n' %(self.barcode, member_count, r1_seq, r1_qual)
 *             fastq_record_2 = '@%s_%i_member/2\n%s\n+\n%s\n' %(self.barcode, member_count, r2_seq, r2_qual)
 */
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_fix_strand); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[4] = {__pyx_t_11, __pyx_v_r2_seq, __pyx_v_r2_qual, ((PyObject *)__pyx_v_strand2)};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 329, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[4] = {__pyx_t_11, __pyx_v_r2_seq, __pyx_v_r2_qual, ((PyObject *)__pyx_v_strand2)};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 329, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_10 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 329, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (__pyx_t_11) {
        __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_11); __pyx_t_11 = NULL;
      }
      __Pyx_INCREF(__pyx_v_r2_seq);
      __Pyx_GIVEREF(__pyx_v_r2_seq);
      PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_5, __pyx_v_r2_seq);
      __Pyx_INCREF(__pyx_v_r2_qual);
      __Pyx_GIVEREF(__pyx_v_r2_qual);
      PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_5, __pyx_v_r2_qual);
      __Pyx_INCREF(((PyObject *)__pyx_v_strand2));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_strand2));
      PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_5, ((PyObject *)__pyx_v_strand2));
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 329, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 329, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      #else
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 329, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 329, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_11 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 329, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_13 = Py_TYPE(__pyx_t_11)->tp_iternext;
      index = 0; __pyx_t_9 = __pyx_t_13(__pyx_t_11); if (unlikely(!__pyx_t_9)) goto __pyx_L13_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      index = 1; __pyx_t_10 = __pyx_t_13(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L13_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_10);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_11), 2) < 0) __PYX_ERR(0, 329, __pyx_L1_error)
      __pyx_t_13 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L14_unpacking_done;
      __pyx_L13_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_13 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 329, __pyx_L1_error)
      __pyx_L14_unpacking_done:;
    }
    if (!(likely(PyString_CheckExact(__pyx_t_9))||((__pyx_t_9) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_9)->tp_name), 0))) __PYX_ERR(0, 329, __pyx_L1_error)
    if (!(likely(PyString_CheckExact(__pyx_t_10))||((__pyx_t_10) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_10)->tp_name), 0))) __PYX_ERR(0, 329, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_r2_seq, ((PyObject*)__pyx_t_9));
    __pyx_t_9 = 0;
    __Pyx_DECREF_SET(__pyx_v_r2_qual, ((PyObject*)__pyx_t_10));
    __pyx_t_10 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":330
 *             r1_seq, r1_qual = fix_strand(r1_seq, r1_qual, strand1)
 *             r2_seq, r2_qual = fix_strand(r2_seq, r2_qual, strand2)
 *             fastq_record_1 = '@%s_%i_member/1\n%s\n+\n%s\n' %(self.barcode, member_count, r1_seq, r1_qual)             # <<<<<<<<<<<<<<
 *             fastq_record_2 = '@%s_%i_member/2\n%s\n+\n%s\n' %(self.barcode, member_count, r2_seq, r2_qual)
 *             self.fastq_record += fastq_record_1 + fastq_record_2
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_member_count); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_v_self->barcode);
    __Pyx_GIVEREF(__pyx_v_self->barcode);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_self->barcode);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_r1_seq);
    __Pyx_GIVEREF(__pyx_v_r1_seq);
    PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_v_r1_seq);
    __Pyx_INCREF(__pyx_v_r1_qual);
    __Pyx_GIVEREF(__pyx_v_r1_qual);
    PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_v_r1_qual);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_s__i_member_1_s_s, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_fastq_record_1, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":331
 *             r2_seq, r2_qual = fix_strand(r2_seq, r2_qual, strand2)
 *             fastq_record_1 = '@%s_%i_member/1\n%s\n+\n%s\n' %(self.barcode, member_count, r1_seq, r1_qual)
 *             fastq_record_2 = '@%s_%i_member/2\n%s\n+\n%s\n' %(self.barcode, member_count, r2_seq, r2_qual)             # <<<<<<<<<<<<<<
 *             self.fastq_record += fastq_record_1 + fastq_record_2
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_member_count); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_v_self->barcode);
    __Pyx_GIVEREF(__pyx_v_self->barcode);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_self->barcode);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_r2_seq);
    __Pyx_GIVEREF(__pyx_v_r2_seq);
    PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_v_r2_seq);
    __Pyx_INCREF(__pyx_v_r2_qual);
    __Pyx_GIVEREF(__pyx_v_r2_qual);
    PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_v_r2_qual);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_s__i_member_2_s_s, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_fastq_record_2, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":332
 *             fastq_record_1 = '@%s_%i_member/1\n%s\n+\n%s\n' %(self.barcode, member_count, r1_seq, r1_qual)
 *             fastq_record_2 = '@%s_%i_member/2\n%s\n+\n%s\n' %(self.barcode, member_count, r2_seq, r2_qual)
 *             self.fastq_record += fastq_record_1 + fastq_record_2             # <<<<<<<<<<<<<<
 */
    __pyx_t_3 = PyNumber_Add(__pyx_v_fastq_record_1, __pyx_v_fastq_record_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = PyNumber_InPlaceAdd(__pyx_v_self->fastq_record, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_10))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_10)->tp_name), 0))) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_10);
    __Pyx_GOTREF(__pyx_v_self->fastq_record);
    __Pyx_DECREF(__pyx_v_self->fastq_record);
    __pyx_v_self->fastq_record = ((PyObject*)__pyx_t_10);
    __pyx_t_10 = 0;

    /* "tgirt_seq_tools/read_cluster.pyx":327
 *                         self.member_count_list,
 *                         self.concensus_flag1, self.concensus_flag2)
 *         for (r1_seq, r1_qual), (r2_seq, r2_qual), member_count, strand1, strand2 in iterable:             # <<<<<<<<<<<<<<
 *             r1_seq, r1_qual = fix_strand(r1_seq, r1_qual, strand1)
 *             r2_seq, r2_qual = fix_strand(r2_seq, r2_qual, strand2)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":314
 *             self.concensus_flag2.append(_R2_flag)
 * 
 *     def generate_fastq_record(self):             # <<<<<<<<<<<<<<
 *         '''
 *             from concensus sequence generate fastq record
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.readGroup.generate_fastq_record", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r1_seq);
  __Pyx_XDECREF(__pyx_v_r1_qual);
  __Pyx_XDECREF(__pyx_v_r2_seq);
  __Pyx_XDECREF(__pyx_v_r2_qual);
  __Pyx_XDECREF((PyObject *)__pyx_v_strand1);
  __Pyx_XDECREF((PyObject *)__pyx_v_strand2);
  __Pyx_XDECREF(__pyx_v_iterable);
  __Pyx_XDECREF(__pyx_v_fastq_record_1);
  __Pyx_XDECREF(__pyx_v_fastq_record_2);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pxd":3
 * cdef class readGroup:
 *     cdef public:
 *         str barcode             # <<<<<<<<<<<<<<
 *         list R1
 *         list R2
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7barcode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7barcode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7barcode___get__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7barcode___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->barcode);
  __pyx_r = __pyx_v_self->barcode;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7barcode_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7barcode_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7barcode_2__set__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7barcode_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 3, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->barcode);
  __Pyx_DECREF(__pyx_v_self->barcode);
  __pyx_v_self->barcode = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.readGroup.barcode.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7barcode_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7barcode_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7barcode_4__del__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7barcode_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->barcode);
  __Pyx_DECREF(__pyx_v_self->barcode);
  __pyx_v_self->barcode = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pxd":4
 *     cdef public:
 *         str barcode
 *         list R1             # <<<<<<<<<<<<<<
 *         list R2
 *         list R1_flag
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_2R1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_2R1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_2R1___get__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_2R1___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->R1);
  __pyx_r = __pyx_v_self->R1;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_2R1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_2R1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_2R1_2__set__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_2R1_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->R1);
  __Pyx_DECREF(__pyx_v_self->R1);
  __pyx_v_self->R1 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.readGroup.R1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_2R1_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_2R1_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_2R1_4__del__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_2R1_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->R1);
  __Pyx_DECREF(__pyx_v_self->R1);
  __pyx_v_self->R1 = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pxd":5
 *         str barcode
 *         list R1
 *         list R2             # <<<<<<<<<<<<<<
 *         list R1_flag
 *         list R2_flag
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_2R2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_2R2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_2R2___get__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_2R2___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->R2);
  __pyx_r = __pyx_v_self->R2;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_2R2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_2R2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_2R2_2__set__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_2R2_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 5, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->R2);
  __Pyx_DECREF(__pyx_v_self->R2);
  __pyx_v_self->R2 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.readGroup.R2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_2R2_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_2R2_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_2R2_4__del__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_2R2_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->R2);
  __Pyx_DECREF(__pyx_v_self->R2);
  __pyx_v_self->R2 = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pxd":6
 *         list R1
 *         list R2
 *         list R1_flag             # <<<<<<<<<<<<<<
 *         list R2_flag
 *         list R1_position
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7R1_flag_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7R1_flag_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7R1_flag___get__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7R1_flag___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->R1_flag);
  __pyx_r = __pyx_v_self->R1_flag;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7R1_flag_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7R1_flag_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7R1_flag_2__set__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7R1_flag_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 6, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->R1_flag);
  __Pyx_DECREF(__pyx_v_self->R1_flag);
  __pyx_v_self->R1_flag = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.readGroup.R1_flag.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7R1_flag_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7R1_flag_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7R1_flag_4__del__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7R1_flag_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->R1_flag);
  __Pyx_DECREF(__pyx_v_self->R1_flag);
  __pyx_v_self->R1_flag = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pxd":7
 *         list R2
 *         list R1_flag
 *         list R2_flag             # <<<<<<<<<<<<<<
 *         list R1_position
 *         list R2_position
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7R2_flag_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7R2_flag_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7R2_flag___get__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7R2_flag___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->R2_flag);
  __pyx_r = __pyx_v_self->R2_flag;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7R2_flag_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7R2_flag_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7R2_flag_2__set__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7R2_flag_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 7, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->R2_flag);
  __Pyx_DECREF(__pyx_v_self->R2_flag);
  __pyx_v_self->R2_flag = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.readGroup.R2_flag.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7R2_flag_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7R2_flag_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7R2_flag_4__del__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_7R2_flag_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->R2_flag);
  __Pyx_DECREF(__pyx_v_self->R2_flag);
  __pyx_v_self->R2_flag = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pxd":8
 *         list R1_flag
 *         list R2_flag
 *         list R1_position             # <<<<<<<<<<<<<<
 *         list R2_position
 *         list R1_chrom
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_11R1_position_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_11R1_position_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_11R1_position___get__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_11R1_position___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->R1_position);
  __pyx_r = __pyx_v_self->R1_position;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_11R1_position_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_11R1_position_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_11R1_position_2__set__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_11R1_position_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 8, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->R1_position);
  __Pyx_DECREF(__pyx_v_self->R1_position);
  __pyx_v_self->R1_position = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.readGroup.R1_position.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_11R1_position_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_11R1_position_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_11R1_position_4__del__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_11R1_position_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->R1_position);
  __Pyx_DECREF(__pyx_v_self->R1_position);
  __pyx_v_self->R1_position = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pxd":9
 *         list R2_flag
 *         list R1_position
 *         list R2_position             # <<<<<<<<<<<<<<
 *         list R1_chrom
 *         list R2_chrom
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_11R2_position_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_11R2_position_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_11R2_position___get__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_11R2_position___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->R2_position);
  __pyx_r = __pyx_v_self->R2_position;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_11R2_position_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_11R2_position_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_11R2_position_2__set__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_11R2_position_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->R2_position);
  __Pyx_DECREF(__pyx_v_self->R2_position);
  __pyx_v_self->R2_position = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.readGroup.R2_position.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_11R2_position_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_11R2_position_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_11R2_position_4__del__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_11R2_position_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->R2_position);
  __Pyx_DECREF(__pyx_v_self->R2_position);
  __pyx_v_self->R2_position = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pxd":10
 *         list R1_position
 *         list R2_position
 *         list R1_chrom             # <<<<<<<<<<<<<<
 *         list R2_chrom
 *         list concensus_read1
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_8R1_chrom_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_8R1_chrom_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_8R1_chrom___get__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_8R1_chrom___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->R1_chrom);
  __pyx_r = __pyx_v_self->R1_chrom;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_8R1_chrom_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_8R1_chrom_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_8R1_chrom_2__set__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_8R1_chrom_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 10, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->R1_chrom);
  __Pyx_DECREF(__pyx_v_self->R1_chrom);
  __pyx_v_self->R1_chrom = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.readGroup.R1_chrom.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_8R1_chrom_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_8R1_chrom_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_8R1_chrom_4__del__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_8R1_chrom_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->R1_chrom);
  __Pyx_DECREF(__pyx_v_self->R1_chrom);
  __pyx_v_self->R1_chrom = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pxd":11
 *         list R2_position
 *         list R1_chrom
 *         list R2_chrom             # <<<<<<<<<<<<<<
 *         list concensus_read1
 *         list concensus_read2
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_8R2_chrom_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_8R2_chrom_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_8R2_chrom___get__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_8R2_chrom___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->R2_chrom);
  __pyx_r = __pyx_v_self->R2_chrom;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_8R2_chrom_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_8R2_chrom_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_8R2_chrom_2__set__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_8R2_chrom_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 11, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->R2_chrom);
  __Pyx_DECREF(__pyx_v_self->R2_chrom);
  __pyx_v_self->R2_chrom = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.readGroup.R2_chrom.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_8R2_chrom_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_8R2_chrom_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_8R2_chrom_4__del__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_8R2_chrom_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->R2_chrom);
  __Pyx_DECREF(__pyx_v_self->R2_chrom);
  __pyx_v_self->R2_chrom = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pxd":12
 *         list R1_chrom
 *         list R2_chrom
 *         list concensus_read1             # <<<<<<<<<<<<<<
 *         list concensus_read2
 *         list member_count_list
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read1___get__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read1___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->concensus_read1);
  __pyx_r = __pyx_v_self->concensus_read1;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read1_2__set__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read1_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->concensus_read1);
  __Pyx_DECREF(__pyx_v_self->concensus_read1);
  __pyx_v_self->concensus_read1 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.readGroup.concensus_read1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read1_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read1_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read1_4__del__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read1_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->concensus_read1);
  __Pyx_DECREF(__pyx_v_self->concensus_read1);
  __pyx_v_self->concensus_read1 = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pxd":13
 *         list R2_chrom
 *         list concensus_read1
 *         list concensus_read2             # <<<<<<<<<<<<<<
 *         list member_count_list
 *         list concensus_flag1
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read2___get__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read2___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->concensus_read2);
  __pyx_r = __pyx_v_self->concensus_read2;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read2_2__set__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read2_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->concensus_read2);
  __Pyx_DECREF(__pyx_v_self->concensus_read2);
  __pyx_v_self->concensus_read2 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.readGroup.concensus_read2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read2_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read2_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read2_4__del__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read2_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->concensus_read2);
  __Pyx_DECREF(__pyx_v_self->concensus_read2);
  __pyx_v_self->concensus_read2 = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pxd":14
 *         list concensus_read1
 *         list concensus_read2
 *         list member_count_list             # <<<<<<<<<<<<<<
 *         list concensus_flag1
 *         list concensus_flag2
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_17member_count_list_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_17member_count_list_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_17member_count_list___get__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_17member_count_list___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->member_count_list);
  __pyx_r = __pyx_v_self->member_count_list;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_17member_count_list_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_17member_count_list_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_17member_count_list_2__set__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_17member_count_list_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 14, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->member_count_list);
  __Pyx_DECREF(__pyx_v_self->member_count_list);
  __pyx_v_self->member_count_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.readGroup.member_count_list.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_17member_count_list_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_17member_count_list_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_17member_count_list_4__del__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_17member_count_list_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->member_count_list);
  __Pyx_DECREF(__pyx_v_self->member_count_list);
  __pyx_v_self->member_count_list = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pxd":15
 *         list concensus_read2
 *         list member_count_list
 *         list concensus_flag1             # <<<<<<<<<<<<<<
 *         list concensus_flag2
 *         str fastq_record
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag1___get__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag1___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->concensus_flag1);
  __pyx_r = __pyx_v_self->concensus_flag1;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag1_2__set__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag1_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->concensus_flag1);
  __Pyx_DECREF(__pyx_v_self->concensus_flag1);
  __pyx_v_self->concensus_flag1 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.readGroup.concensus_flag1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag1_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag1_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag1_4__del__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag1_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->concensus_flag1);
  __Pyx_DECREF(__pyx_v_self->concensus_flag1);
  __pyx_v_self->concensus_flag1 = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pxd":16
 *         list member_count_list
 *         list concensus_flag1
 *         list concensus_flag2             # <<<<<<<<<<<<<<
 *         str fastq_record
 * #
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag2___get__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag2___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->concensus_flag2);
  __pyx_r = __pyx_v_self->concensus_flag2;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag2_2__set__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag2_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 16, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->concensus_flag2);
  __Pyx_DECREF(__pyx_v_self->concensus_flag2);
  __pyx_v_self->concensus_flag2 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.readGroup.concensus_flag2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag2_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag2_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag2_4__del__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag2_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->concensus_flag2);
  __Pyx_DECREF(__pyx_v_self->concensus_flag2);
  __pyx_v_self->concensus_flag2 = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/read_cluster.pxd":17
 *         list concensus_flag1
 *         list concensus_flag2
 *         str fastq_record             # <<<<<<<<<<<<<<
 * #
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_12fastq_record_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_12fastq_record_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_12fastq_record___get__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_12fastq_record___get__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->fastq_record);
  __pyx_r = __pyx_v_self->fastq_record;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_12fastq_record_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_12fastq_record_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_12fastq_record_2__set__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_12fastq_record_2__set__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->fastq_record);
  __Pyx_DECREF(__pyx_v_self->fastq_record);
  __pyx_v_self->fastq_record = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tgirt_seq_tools.read_cluster.readGroup.fastq_record.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_12fastq_record_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_12fastq_record_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_12fastq_record_4__del__(((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_12read_cluster_9readGroup_12fastq_record_4__del__(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->fastq_record);
  __Pyx_DECREF(__pyx_v_self->fastq_record);
  __pyx_v_self->fastq_record = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_15tgirt_seq_tools_12read_cluster_readGroup(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)o);
  p->barcode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->R1 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->R2 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->R1_flag = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->R2_flag = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->R1_position = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->R2_position = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->R1_chrom = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->R2_chrom = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->concensus_read1 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->concensus_read2 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->member_count_list = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->concensus_flag1 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->concensus_flag2 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->fastq_record = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_15tgirt_seq_tools_12read_cluster_readGroup(PyObject *o) {
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->barcode);
  Py_CLEAR(p->R1);
  Py_CLEAR(p->R2);
  Py_CLEAR(p->R1_flag);
  Py_CLEAR(p->R2_flag);
  Py_CLEAR(p->R1_position);
  Py_CLEAR(p->R2_position);
  Py_CLEAR(p->R1_chrom);
  Py_CLEAR(p->R2_chrom);
  Py_CLEAR(p->concensus_read1);
  Py_CLEAR(p->concensus_read2);
  Py_CLEAR(p->member_count_list);
  Py_CLEAR(p->concensus_flag1);
  Py_CLEAR(p->concensus_flag2);
  Py_CLEAR(p->fastq_record);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_15tgirt_seq_tools_12read_cluster_readGroup(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)o;
  if (p->R1) {
    e = (*v)(p->R1, a); if (e) return e;
  }
  if (p->R2) {
    e = (*v)(p->R2, a); if (e) return e;
  }
  if (p->R1_flag) {
    e = (*v)(p->R1_flag, a); if (e) return e;
  }
  if (p->R2_flag) {
    e = (*v)(p->R2_flag, a); if (e) return e;
  }
  if (p->R1_position) {
    e = (*v)(p->R1_position, a); if (e) return e;
  }
  if (p->R2_position) {
    e = (*v)(p->R2_position, a); if (e) return e;
  }
  if (p->R1_chrom) {
    e = (*v)(p->R1_chrom, a); if (e) return e;
  }
  if (p->R2_chrom) {
    e = (*v)(p->R2_chrom, a); if (e) return e;
  }
  if (p->concensus_read1) {
    e = (*v)(p->concensus_read1, a); if (e) return e;
  }
  if (p->concensus_read2) {
    e = (*v)(p->concensus_read2, a); if (e) return e;
  }
  if (p->member_count_list) {
    e = (*v)(p->member_count_list, a); if (e) return e;
  }
  if (p->concensus_flag1) {
    e = (*v)(p->concensus_flag1, a); if (e) return e;
  }
  if (p->concensus_flag2) {
    e = (*v)(p->concensus_flag2, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15tgirt_seq_tools_12read_cluster_readGroup(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup *)o;
  tmp = ((PyObject*)p->R1);
  p->R1 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->R2);
  p->R2 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->R1_flag);
  p->R1_flag = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->R2_flag);
  p->R2_flag = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->R1_position);
  p->R1_position = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->R2_position);
  p->R2_position = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->R1_chrom);
  p->R1_chrom = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->R2_chrom);
  p->R2_chrom = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->concensus_read1);
  p->concensus_read1 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->concensus_read2);
  p->concensus_read2 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->member_count_list);
  p->member_count_list = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->concensus_flag1);
  p->concensus_flag1 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->concensus_flag2);
  p->concensus_flag2 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_barcode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7barcode_1__get__(o);
}

static int __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_barcode(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7barcode_3__set__(o, v);
  }
  else {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7barcode_5__del__(o);
  }
}

static PyObject *__pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_R1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_2R1_1__get__(o);
}

static int __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_R1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_2R1_3__set__(o, v);
  }
  else {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_2R1_5__del__(o);
  }
}

static PyObject *__pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_R2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_2R2_1__get__(o);
}

static int __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_R2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_2R2_3__set__(o, v);
  }
  else {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_2R2_5__del__(o);
  }
}

static PyObject *__pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_R1_flag(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7R1_flag_1__get__(o);
}

static int __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_R1_flag(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7R1_flag_3__set__(o, v);
  }
  else {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7R1_flag_5__del__(o);
  }
}

static PyObject *__pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_R2_flag(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7R2_flag_1__get__(o);
}

static int __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_R2_flag(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7R2_flag_3__set__(o, v);
  }
  else {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7R2_flag_5__del__(o);
  }
}

static PyObject *__pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_R1_position(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_11R1_position_1__get__(o);
}

static int __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_R1_position(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_11R1_position_3__set__(o, v);
  }
  else {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_11R1_position_5__del__(o);
  }
}

static PyObject *__pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_R2_position(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_11R2_position_1__get__(o);
}

static int __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_R2_position(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_11R2_position_3__set__(o, v);
  }
  else {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_11R2_position_5__del__(o);
  }
}

static PyObject *__pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_R1_chrom(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_8R1_chrom_1__get__(o);
}

static int __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_R1_chrom(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_8R1_chrom_3__set__(o, v);
  }
  else {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_8R1_chrom_5__del__(o);
  }
}

static PyObject *__pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_R2_chrom(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_8R2_chrom_1__get__(o);
}

static int __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_R2_chrom(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_8R2_chrom_3__set__(o, v);
  }
  else {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_8R2_chrom_5__del__(o);
  }
}

static PyObject *__pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_concensus_read1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read1_1__get__(o);
}

static int __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_concensus_read1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read1_3__set__(o, v);
  }
  else {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read1_5__del__(o);
  }
}

static PyObject *__pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_concensus_read2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read2_1__get__(o);
}

static int __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_concensus_read2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read2_3__set__(o, v);
  }
  else {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_read2_5__del__(o);
  }
}

static PyObject *__pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_member_count_list(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_17member_count_list_1__get__(o);
}

static int __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_member_count_list(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_17member_count_list_3__set__(o, v);
  }
  else {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_17member_count_list_5__del__(o);
  }
}

static PyObject *__pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_concensus_flag1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag1_1__get__(o);
}

static int __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_concensus_flag1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag1_3__set__(o, v);
  }
  else {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag1_5__del__(o);
  }
}

static PyObject *__pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_concensus_flag2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag2_1__get__(o);
}

static int __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_concensus_flag2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag2_3__set__(o, v);
  }
  else {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_15concensus_flag2_5__del__(o);
  }
}

static PyObject *__pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_fastq_record(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_12fastq_record_1__get__(o);
}

static int __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_fastq_record(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_12fastq_record_3__set__(o, v);
  }
  else {
    return __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_12fastq_record_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_15tgirt_seq_tools_12read_cluster_readGroup[] = {
  {"put_alignment", (PyCFunction)__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_3put_alignment, METH_O, __pyx_doc_15tgirt_seq_tools_12read_cluster_9readGroup_2put_alignment},
  {"cluster", (PyCFunction)__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_5cluster, METH_O, __pyx_doc_15tgirt_seq_tools_12read_cluster_9readGroup_4cluster},
  {"generate_fastq_record", (PyCFunction)__pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_7generate_fastq_record, METH_NOARGS, __pyx_doc_15tgirt_seq_tools_12read_cluster_9readGroup_6generate_fastq_record},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_15tgirt_seq_tools_12read_cluster_readGroup[] = {
  {(char *)"barcode", __pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_barcode, __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_barcode, (char *)0, 0},
  {(char *)"R1", __pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_R1, __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_R1, (char *)0, 0},
  {(char *)"R2", __pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_R2, __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_R2, (char *)0, 0},
  {(char *)"R1_flag", __pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_R1_flag, __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_R1_flag, (char *)0, 0},
  {(char *)"R2_flag", __pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_R2_flag, __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_R2_flag, (char *)0, 0},
  {(char *)"R1_position", __pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_R1_position, __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_R1_position, (char *)0, 0},
  {(char *)"R2_position", __pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_R2_position, __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_R2_position, (char *)0, 0},
  {(char *)"R1_chrom", __pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_R1_chrom, __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_R1_chrom, (char *)0, 0},
  {(char *)"R2_chrom", __pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_R2_chrom, __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_R2_chrom, (char *)0, 0},
  {(char *)"concensus_read1", __pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_concensus_read1, __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_concensus_read1, (char *)0, 0},
  {(char *)"concensus_read2", __pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_concensus_read2, __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_concensus_read2, (char *)0, 0},
  {(char *)"member_count_list", __pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_member_count_list, __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_member_count_list, (char *)0, 0},
  {(char *)"concensus_flag1", __pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_concensus_flag1, __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_concensus_flag1, (char *)0, 0},
  {(char *)"concensus_flag2", __pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_concensus_flag2, __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_concensus_flag2, (char *)0, 0},
  {(char *)"fastq_record", __pyx_getprop_15tgirt_seq_tools_12read_cluster_9readGroup_fastq_record, __pyx_setprop_15tgirt_seq_tools_12read_cluster_9readGroup_fastq_record, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_15tgirt_seq_tools_12read_cluster_readGroup = {
  PyVarObject_HEAD_INIT(0, 0)
  "tgirt_seq_tools.read_cluster.readGroup", /*tp_name*/
  sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster_readGroup), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15tgirt_seq_tools_12read_cluster_readGroup, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    Read group object\n    ", /*tp_doc*/
  __pyx_tp_traverse_15tgirt_seq_tools_12read_cluster_readGroup, /*tp_traverse*/
  __pyx_tp_clear_15tgirt_seq_tools_12read_cluster_readGroup, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_15tgirt_seq_tools_12read_cluster_readGroup, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_15tgirt_seq_tools_12read_cluster_readGroup, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_15tgirt_seq_tools_12read_cluster_9readGroup_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15tgirt_seq_tools_12read_cluster_readGroup, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode *__pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode[8];
static int __pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode = 0;

static PyObject *__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode)))) {
    o = (PyObject*)__pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode[--__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode];
    memset(o, 0, sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode(PyObject *o) {
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_any_list);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode)))) {
    __pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode[__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode++] = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode *)o;
  if (p->__pyx_v_any_list) {
    e = (*v)(p->__pyx_v_any_list, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode *)o;
  tmp = ((PyObject*)p->__pyx_v_any_list);
  p->__pyx_v_any_list = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode = {
  PyVarObject_HEAD_INIT(0, 0)
  "tgirt_seq_tools.read_cluster.__pyx_scope_struct__mode", /*tp_name*/
  sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode, /*tp_traverse*/
  __pyx_tp_clear_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual *__pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual[8];
static int __pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual = 0;

static PyObject *__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual)))) {
    o = (PyObject*)__pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual[--__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual];
    memset(o, 0, sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual(PyObject *o) {
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_qs);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual)))) {
    __pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual[__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual++] = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual *)o;
  if (p->__pyx_v_qs) {
    e = (*v)(p->__pyx_v_qs, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual *)o;
  tmp = ((PyObject*)p->__pyx_v_qs);
  p->__pyx_v_qs = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual = {
  PyVarObject_HEAD_INIT(0, 0)
  "tgirt_seq_tools.read_cluster.__pyx_scope_struct_1_cumulative_product_qual", /*tp_name*/
  sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual, /*tp_traverse*/
  __pyx_tp_clear_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr *__pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr[8];
static int __pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr = 0;

static PyObject *__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr)))) {
    o = (PyObject*)__pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr[--__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr(PyObject *o) {
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_q);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr)))) {
    __pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr[__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr++] = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_q) {
    e = (*v)(p->__pyx_v_q, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_q);
  p->__pyx_v_q = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "tgirt_seq_tools.read_cluster.__pyx_scope_struct_2_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr, /*tp_traverse*/
  __pyx_tp_clear_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior *__pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior[8];
static int __pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior = 0;

static PyObject *__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior)))) {
    o = (PyObject*)__pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior[--__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior];
    memset(o, 0, sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior(PyObject *o) {
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_qual_hit);
  Py_CLEAR(p->__pyx_v_qual_missed);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior)))) {
    __pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior[__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior++] = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior *)o;
  if (p->__pyx_v_qual_hit) {
    e = (*v)(p->__pyx_v_qual_hit, a); if (e) return e;
  }
  if (p->__pyx_v_qual_missed) {
    e = (*v)(p->__pyx_v_qual_missed, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior *)o;
  tmp = ((PyObject*)p->__pyx_v_qual_hit);
  p->__pyx_v_qual_hit = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_qual_missed);
  p->__pyx_v_qual_missed = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior = {
  PyVarObject_HEAD_INIT(0, 0)
  "tgirt_seq_tools.read_cluster.__pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior", /*tp_name*/
  sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior, /*tp_traverse*/
  __pyx_tp_clear_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr *__pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr[8];
static int __pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr = 0;

static PyObject *__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr)))) {
    o = (PyObject*)__pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr[--__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr(PyObject *o) {
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_q);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr)))) {
    __pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr[__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr++] = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_q) {
    e = (*v)(p->__pyx_v_q, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_q);
  p->__pyx_v_q = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "tgirt_seq_tools.read_cluster.__pyx_scope_struct_4_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr, /*tp_traverse*/
  __pyx_tp_clear_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr *__pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr[8];
static int __pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr = 0;

static PyObject *__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr)))) {
    o = (PyObject*)__pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr[--__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr(PyObject *o) {
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_q);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr)))) {
    __pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr[__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr++] = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_q) {
    e = (*v)(p->__pyx_v_q, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_q);
  p->__pyx_v_q = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "tgirt_seq_tools.read_cluster.__pyx_scope_struct_5_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr, /*tp_traverse*/
  __pyx_tp_clear_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence *__pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence[8];
static int __pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence = 0;

static PyObject *__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence)))) {
    o = (PyObject*)__pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence[--__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence];
    memset(o, 0, sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence(PyObject *o) {
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_qual_list);
  Py_CLEAR(p->__pyx_v_seq_len);
  Py_CLEAR(p->__pyx_v_seq_list);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence)))) {
    __pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence[__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence++] = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence *)o;
  if (p->__pyx_v_qual_list) {
    e = (*v)(p->__pyx_v_qual_list, a); if (e) return e;
  }
  if (p->__pyx_v_seq_len) {
    e = (*v)(p->__pyx_v_seq_len, a); if (e) return e;
  }
  if (p->__pyx_v_seq_list) {
    e = (*v)(p->__pyx_v_seq_list, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence *)o;
  tmp = ((PyObject*)p->__pyx_v_qual_list);
  p->__pyx_v_qual_list = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_seq_len);
  p->__pyx_v_seq_len = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_seq_list);
  p->__pyx_v_seq_list = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence = {
  PyVarObject_HEAD_INIT(0, 0)
  "tgirt_seq_tools.read_cluster.__pyx_scope_struct_6_concensus_sequence", /*tp_name*/
  sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence, /*tp_traverse*/
  __pyx_tp_clear_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr *__pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr[8];
static int __pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr = 0;

static PyObject *__pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr)))) {
    o = (PyObject*)__pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr[--__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr(PyObject *o) {
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_pos);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr)))) {
    __pyx_freelist_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr[__pyx_freecount_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr++] = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_pos) {
    e = (*v)(p->__pyx_v_pos, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_pos);
  p->__pyx_v_pos = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "tgirt_seq_tools.read_cluster.__pyx_scope_struct_7_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr, /*tp_traverse*/
  __pyx_tp_clear_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "read_cluster",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ACTGNactgn, __pyx_k_ACTGNactgn, sizeof(__pyx_k_ACTGNactgn), 0, 0, 1, 1},
  {&__pyx_n_s_N, __pyx_k_N, sizeof(__pyx_k_N), 0, 0, 1, 1},
  {&__pyx_kp_s_No_concensus_read_generated, __pyx_k_No_concensus_read_generated, sizeof(__pyx_k_No_concensus_read_generated), 0, 0, 1, 0},
  {&__pyx_n_s_TGACNTGACN, __pyx_k_TGACNTGACN, sizeof(__pyx_k_TGACNTGACN), 0, 0, 1, 1},
  {&__pyx_kp_s_Unequal_R1_list_vs_R2, __pyx_k_Unequal_R1_list_vs_R2, sizeof(__pyx_k_Unequal_R1_list_vs_R2), 0, 0, 1, 0},
  {&__pyx_kp_s_Users_wckdouglas_scripts_softwa, __pyx_k_Users_wckdouglas_scripts_softwa, sizeof(__pyx_k_Users_wckdouglas_scripts_softwa), 0, 0, 1, 0},
  {&__pyx_kp_s__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 0, 1, 0},
  {&__pyx_n_s_aln, __pyx_k_aln, sizeof(__pyx_k_aln), 0, 0, 1, 1},
  {&__pyx_n_s_aln_table, __pyx_k_aln_table, sizeof(__pyx_k_aln_table), 0, 0, 1, 1},
  {&__pyx_n_s_any_list, __pyx_k_any_list, sizeof(__pyx_k_any_list), 0, 0, 1, 1},
  {&__pyx_n_s_arg, __pyx_k_arg, sizeof(__pyx_k_arg), 0, 0, 1, 1},
  {&__pyx_n_s_arg_max_likelihood, __pyx_k_arg_max_likelihood, sizeof(__pyx_k_arg_max_likelihood), 0, 0, 1, 1},
  {&__pyx_n_s_argmax, __pyx_k_argmax, sizeof(__pyx_k_argmax), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_base_qual, __pyx_k_base_qual, sizeof(__pyx_k_base_qual), 0, 0, 1, 1},
  {&__pyx_n_s_best_fraction, __pyx_k_best_fraction, sizeof(__pyx_k_best_fraction), 0, 0, 1, 1},
  {&__pyx_n_s_best_index, __pyx_k_best_index, sizeof(__pyx_k_best_index), 0, 0, 1, 1},
  {&__pyx_n_s_best_quals, __pyx_k_best_quals, sizeof(__pyx_k_best_quals), 0, 0, 1, 1},
  {&__pyx_n_s_best_vote, __pyx_k_best_vote, sizeof(__pyx_k_best_vote), 0, 0, 1, 1},
  {&__pyx_n_s_calculatePosterior_locals_genexp, __pyx_k_calculatePosterior_locals_genexp, sizeof(__pyx_k_calculatePosterior_locals_genexp), 0, 0, 1, 1},
  {&__pyx_n_s_calculate_concensus_base, __pyx_k_calculate_concensus_base, sizeof(__pyx_k_calculate_concensus_base), 0, 0, 1, 1},
  {&__pyx_n_s_chr, __pyx_k_chr, sizeof(__pyx_k_chr), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_column_bases, __pyx_k_column_bases, sizeof(__pyx_k_column_bases), 0, 0, 1, 1},
  {&__pyx_n_s_column_qualities, __pyx_k_column_qualities, sizeof(__pyx_k_column_qualities), 0, 0, 1, 1},
  {&__pyx_n_s_complement, __pyx_k_complement, sizeof(__pyx_k_complement), 0, 0, 1, 1},
  {&__pyx_n_s_concensus_base, __pyx_k_concensus_base, sizeof(__pyx_k_concensus_base), 0, 0, 1, 1},
  {&__pyx_n_s_concensus_sequence, __pyx_k_concensus_sequence, sizeof(__pyx_k_concensus_sequence), 0, 0, 1, 1},
  {&__pyx_n_s_concensus_sequence_locals_genexp, __pyx_k_concensus_sequence_locals_genexp, sizeof(__pyx_k_concensus_sequence_locals_genexp), 0, 0, 1, 1},
  {&__pyx_n_s_conserved, __pyx_k_conserved, sizeof(__pyx_k_conserved), 0, 0, 1, 1},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_n_s_count_tuple, __pyx_k_count_tuple, sizeof(__pyx_k_count_tuple), 0, 0, 1, 1},
  {&__pyx_n_s_cumulative_product_qual, __pyx_k_cumulative_product_qual, sizeof(__pyx_k_cumulative_product_qual), 0, 0, 1, 1},
  {&__pyx_n_s_cumulative_product_qual_locals_g, __pyx_k_cumulative_product_qual_locals_g, sizeof(__pyx_k_cumulative_product_qual_locals_g), 0, 0, 1, 1},
  {&__pyx_n_s_fix_strand, __pyx_k_fix_strand, sizeof(__pyx_k_fix_strand), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get_tag, __pyx_k_get_tag, sizeof(__pyx_k_get_tag), 0, 0, 1, 1},
  {&__pyx_n_s_guess_base, __pyx_k_guess_base, sizeof(__pyx_k_guess_base), 0, 0, 1, 1},
  {&__pyx_n_s_hit, __pyx_k_hit, sizeof(__pyx_k_hit), 0, 0, 1, 1},
  {&__pyx_n_s_imap, __pyx_k_imap, sizeof(__pyx_k_imap), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_in_column_qualities, __pyx_k_in_column_qualities, sizeof(__pyx_k_in_column_qualities), 0, 0, 1, 1},
  {&__pyx_n_s_in_qual_list, __pyx_k_in_qual_list, sizeof(__pyx_k_in_qual_list), 0, 0, 1, 1},
  {&__pyx_n_s_in_seq_list, __pyx_k_in_seq_list, sizeof(__pyx_k_in_seq_list), 0, 0, 1, 1},
  {&__pyx_n_s_int16, __pyx_k_int16, sizeof(__pyx_k_int16), 0, 0, 1, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_is_read1, __pyx_k_is_read1, sizeof(__pyx_k_is_read1), 0, 0, 1, 1},
  {&__pyx_n_s_is_read2, __pyx_k_is_read2, sizeof(__pyx_k_is_read2), 0, 0, 1, 1},
  {&__pyx_n_s_is_reverse, __pyx_k_is_reverse, sizeof(__pyx_k_is_reverse), 0, 0, 1, 1},
  {&__pyx_n_s_iter_list, __pyx_k_iter_list, sizeof(__pyx_k_iter_list), 0, 0, 1, 1},
  {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
  {&__pyx_n_s_izip, __pyx_k_izip, sizeof(__pyx_k_izip), 0, 0, 1, 1},
  {&__pyx_n_s_len, __pyx_k_len, sizeof(__pyx_k_len), 0, 0, 1, 1},
  {&__pyx_n_s_len_array, __pyx_k_len_array, sizeof(__pyx_k_len_array), 0, 0, 1, 1},
  {&__pyx_n_s_len_filter, __pyx_k_len_filter, sizeof(__pyx_k_len_filter), 0, 0, 1, 1},
  {&__pyx_n_s_likelihoods, __pyx_k_likelihoods, sizeof(__pyx_k_likelihoods), 0, 0, 1, 1},
  {&__pyx_n_s_log10, __pyx_k_log10, sizeof(__pyx_k_log10), 0, 0, 1, 1},
  {&__pyx_n_s_log_posterior, __pyx_k_log_posterior, sizeof(__pyx_k_log_posterior), 0, 0, 1, 1},
  {&__pyx_n_s_log_posteriors, __pyx_k_log_posteriors, sizeof(__pyx_k_log_posteriors), 0, 0, 1, 1},
  {&__pyx_n_s_logsumexp, __pyx_k_logsumexp, sizeof(__pyx_k_logsumexp), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_maketrans, __pyx_k_maketrans, sizeof(__pyx_k_maketrans), 0, 0, 1, 1},
  {&__pyx_n_s_map, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_mode_locals_lambda, __pyx_k_mode_locals_lambda, sizeof(__pyx_k_mode_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_np_len, __pyx_k_np_len, sizeof(__pyx_k_np_len), 0, 0, 1, 1},
  {&__pyx_n_s_np_ord, __pyx_k_np_ord, sizeof(__pyx_k_np_ord), 0, 0, 1, 1},
  {&__pyx_n_s_number_possible_bases, __pyx_k_number_possible_bases, sizeof(__pyx_k_number_possible_bases), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_ord, __pyx_k_ord, sizeof(__pyx_k_ord), 0, 0, 1, 1},
  {&__pyx_n_s_otypes, __pyx_k_otypes, sizeof(__pyx_k_otypes), 0, 0, 1, 1},
  {&__pyx_n_s_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 0, 1, 1},
  {&__pyx_n_s_possible_bases, __pyx_k_possible_bases, sizeof(__pyx_k_possible_bases), 0, 0, 1, 1},
  {&__pyx_n_s_possible_counts, __pyx_k_possible_counts, sizeof(__pyx_k_possible_counts), 0, 0, 1, 1},
  {&__pyx_n_s_posterior_correct_prob, __pyx_k_posterior_correct_prob, sizeof(__pyx_k_posterior_correct_prob), 0, 0, 1, 1},
  {&__pyx_n_s_posterior_correct_probability, __pyx_k_posterior_correct_probability, sizeof(__pyx_k_posterior_correct_probability), 0, 0, 1, 1},
  {&__pyx_n_s_put_alignment, __pyx_k_put_alignment, sizeof(__pyx_k_put_alignment), 0, 0, 1, 1},
  {&__pyx_n_s_pysam, __pyx_k_pysam, sizeof(__pyx_k_pysam), 0, 0, 1, 1},
  {&__pyx_n_s_q, __pyx_k_q, sizeof(__pyx_k_q), 0, 0, 1, 1},
  {&__pyx_n_s_qs, __pyx_k_qs, sizeof(__pyx_k_qs), 0, 0, 1, 1},
  {&__pyx_n_s_qual, __pyx_k_qual, sizeof(__pyx_k_qual), 0, 0, 1, 1},
  {&__pyx_n_s_qual_list, __pyx_k_qual_list, sizeof(__pyx_k_qual_list), 0, 0, 1, 1},
  {&__pyx_n_s_qual_to_prob, __pyx_k_qual_to_prob, sizeof(__pyx_k_qual_to_prob), 0, 0, 1, 1},
  {&__pyx_n_s_quality, __pyx_k_quality, sizeof(__pyx_k_quality), 0, 0, 1, 1},
  {&__pyx_n_s_query_sequence, __pyx_k_query_sequence, sizeof(__pyx_k_query_sequence), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reference_id, __pyx_k_reference_id, sizeof(__pyx_k_reference_id), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_return_counts, __pyx_k_return_counts, sizeof(__pyx_k_return_counts), 0, 0, 1, 1},
  {&__pyx_n_s_reverse_complement, __pyx_k_reverse_complement, sizeof(__pyx_k_reverse_complement), 0, 0, 1, 1},
  {&__pyx_kp_s_s__i_member_1_s_s, __pyx_k_s__i_member_1_s_s, sizeof(__pyx_k_s__i_member_1_s_s), 0, 0, 1, 0},
  {&__pyx_kp_s_s__i_member_2_s_s, __pyx_k_s__i_member_2_s_s, sizeof(__pyx_k_s__i_member_2_s_s), 0, 0, 1, 0},
  {&__pyx_n_s_scipy_misc, __pyx_k_scipy_misc, sizeof(__pyx_k_scipy_misc), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_seq, __pyx_k_seq, sizeof(__pyx_k_seq), 0, 0, 1, 1},
  {&__pyx_n_s_seq_len, __pyx_k_seq_len, sizeof(__pyx_k_seq_len), 0, 0, 1, 1},
  {&__pyx_n_s_seq_list, __pyx_k_seq_list, sizeof(__pyx_k_seq_list), 0, 0, 1, 1},
  {&__pyx_n_s_sequence, __pyx_k_sequence, sizeof(__pyx_k_sequence), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_strand, __pyx_k_strand, sizeof(__pyx_k_strand), 0, 0, 1, 1},
  {&__pyx_n_s_string, __pyx_k_string, sizeof(__pyx_k_string), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_tag, __pyx_k_tag, sizeof(__pyx_k_tag), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_tgirt_seq_tools_read_cluster, __pyx_k_tgirt_seq_tools_read_cluster, sizeof(__pyx_k_tgirt_seq_tools_read_cluster), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_total_posterior, __pyx_k_total_posterior, sizeof(__pyx_k_total_posterior), 0, 0, 1, 1},
  {&__pyx_n_s_translate, __pyx_k_translate, sizeof(__pyx_k_translate), 0, 0, 1, 1},
  {&__pyx_n_s_unique, __pyx_k_unique, sizeof(__pyx_k_unique), 0, 0, 1, 1},
  {&__pyx_n_s_vectorize, __pyx_k_vectorize, sizeof(__pyx_k_vectorize), 0, 0, 1, 1},
  {&__pyx_n_s_vote_concensus_base, __pyx_k_vote_concensus_base, sizeof(__pyx_k_vote_concensus_base), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_map = __Pyx_GetBuiltinName(__pyx_n_s_map); if (!__pyx_builtin_map) __PYX_ERR(0, 37, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(0, 38, __pyx_L1_error)
  __pyx_builtin_chr = __Pyx_GetBuiltinName(__pyx_n_s_chr); if (!__pyx_builtin_chr) __PYX_ERR(0, 74, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 109, __pyx_L1_error)
  __pyx_builtin_min = __Pyx_GetBuiltinName(__pyx_n_s_min); if (!__pyx_builtin_min) __PYX_ERR(0, 219, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 225, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 225, __pyx_L1_error)
  #endif
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 288, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "tgirt_seq_tools/read_cluster.pyx":25
 *     Generate reverse complement as name suggested....-,-
 *     '''
 *     return seq.translate(complement)[::-1]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_slice_ = PySlice_New(Py_None, Py_None, __pyx_int_neg_1); if (unlikely(!__pyx_slice_)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice_);
  __Pyx_GIVEREF(__pyx_slice_);

  /* "tgirt_seq_tools/read_cluster.pyx":31
 *     if strand:
 *         seq = reverse_complement(seq)
 *         qual = qual[::-1]             # <<<<<<<<<<<<<<
 *     return seq, qual
 * 
 */
  __pyx_slice__2 = PySlice_New(Py_None, Py_None, __pyx_int_neg_1); if (unlikely(!__pyx_slice__2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__2);
  __Pyx_GIVEREF(__pyx_slice__2);

  /* "tgirt_seq_tools/read_cluster.pyx":225
 *         seq_list = np.array(map(list, in_seq_list))
 *         qual_list = np.array(map(list, in_qual_list))
 *         iter_list = ((seq_list[:,pos], qual_list[:,pos]) for pos in xrange(seq_len))             # <<<<<<<<<<<<<<
 *         if conserved:
 *             for base, posterior_correct_prob in imap(vote_concensus_base, iter_list):
 */
  __pyx_slice__3 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__3)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__3);
  __Pyx_GIVEREF(__pyx_slice__3);
  __pyx_slice__4 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__4)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__4);
  __Pyx_GIVEREF(__pyx_slice__4);

  /* "tgirt_seq_tools/read_cluster.pyx":212
 *         double posterior_correct_prob
 * 
 *     in_seq_list = aln_table[:,0]             # <<<<<<<<<<<<<<
 *     in_qual_list = aln_table[:,1]
 *     if len(in_seq_list) == 1:
 */
  __pyx_slice__6 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__6)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__6);
  __Pyx_GIVEREF(__pyx_slice__6);
  __pyx_tuple__7 = PyTuple_Pack(2, __pyx_slice__6, __pyx_int_0); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "tgirt_seq_tools/read_cluster.pyx":213
 * 
 *     in_seq_list = aln_table[:,0]
 *     in_qual_list = aln_table[:,1]             # <<<<<<<<<<<<<<
 *     if len(in_seq_list) == 1:
 *         sequence = str(in_seq_list[0])
 */
  __pyx_slice__8 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__8)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__8);
  __Pyx_GIVEREF(__pyx_slice__8);
  __pyx_tuple__9 = PyTuple_Pack(2, __pyx_slice__8, __pyx_int_1); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "tgirt_seq_tools/read_cluster.pyx":307
 * 
 *             cluster = chrom_is_right & flag_is_right & pos_is_right
 *             R1_filtered, R2_filtered = R1_array[cluster,:], R2_array[cluster,:]             # <<<<<<<<<<<<<<
 *             self.concensus_read1.append(concensus_sequence(conserved, R1_filtered))
 *             self.concensus_read2.append(concensus_sequence(conserved, R2_filtered))
 */
  __pyx_slice__10 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__10)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__10);
  __Pyx_GIVEREF(__pyx_slice__10);
  __pyx_slice__11 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__11)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__11);
  __Pyx_GIVEREF(__pyx_slice__11);

  /* "tgirt_seq_tools/read_cluster.pyx":310
 *             self.concensus_read1.append(concensus_sequence(conserved, R1_filtered))
 *             self.concensus_read2.append(concensus_sequence(conserved, R2_filtered))
 *             self.member_count_list.append(len(R1_filtered[:,1]))             # <<<<<<<<<<<<<<
 *             self.concensus_flag1.append(_R1_flag)
 *             self.concensus_flag2.append(_R2_flag)
 */
  __pyx_slice__12 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__12)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__12);
  __Pyx_GIVEREF(__pyx_slice__12);
  __pyx_tuple__13 = PyTuple_Pack(2, __pyx_slice__12, __pyx_int_1); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "tgirt_seq_tools/read_cluster.pyx":20
 * 
 * 
 * complement =  string.maketrans('ACTGNactgn','TGACNTGACN')             # <<<<<<<<<<<<<<
 * def reverse_complement(seq):
 *     '''
 */
  __pyx_tuple__14 = PyTuple_Pack(2, __pyx_n_s_ACTGNactgn, __pyx_n_s_TGACNTGACN); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "tgirt_seq_tools/read_cluster.pyx":21
 * 
 * complement =  string.maketrans('ACTGNactgn','TGACNTGACN')
 * def reverse_complement(seq):             # <<<<<<<<<<<<<<
 *     '''
 *     Generate reverse complement as name suggested....-,-
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_n_s_seq); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_wckdouglas_scripts_softwa, __pyx_n_s_reverse_complement, 21, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(0, 21, __pyx_L1_error)

  /* "tgirt_seq_tools/read_cluster.pyx":28
 * 
 * 
 * def fix_strand(str seq, str qual, bool strand):             # <<<<<<<<<<<<<<
 *     if strand:
 *         seq = reverse_complement(seq)
 */
  __pyx_tuple__17 = PyTuple_Pack(3, __pyx_n_s_seq, __pyx_n_s_qual, __pyx_n_s_strand); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_wckdouglas_scripts_softwa, __pyx_n_s_fix_strand, 28, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 28, __pyx_L1_error)

  /* "tgirt_seq_tools/read_cluster.pyx":35
 * 
 * 
 * def mode(any_list):             # <<<<<<<<<<<<<<
 *     any_list = list(any_list)
 *     count_tuple = map(lambda x: (any_list.count(x), x), set(any_list))
 */
  __pyx_tuple__19 = PyTuple_Pack(2, __pyx_n_s_any_list, __pyx_n_s_count_tuple); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_wckdouglas_scripts_softwa, __pyx_n_s_mode, 35, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(0, 35, __pyx_L1_error)

  /* "tgirt_seq_tools/read_cluster.pyx":93
 * 
 * 
 * def qual_to_prob(base_qual):             # <<<<<<<<<<<<<<
 *     '''
 *     Given a q list,
 */
  __pyx_tuple__21 = PyTuple_Pack(2, __pyx_n_s_base_qual, __pyx_n_s_q); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_wckdouglas_scripts_softwa, __pyx_n_s_qual_to_prob, 93, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 93, __pyx_L1_error)

  /* "tgirt_seq_tools/read_cluster.pyx":104
 * 
 * 
 * def cumulative_product_qual(qs, hit=True):             # <<<<<<<<<<<<<<
 *     '''
 *     cythonize numpy.prod
 */
  __pyx_tuple__23 = PyTuple_Pack(5, __pyx_n_s_qs, __pyx_n_s_hit, __pyx_n_s_result, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_wckdouglas_scripts_softwa, __pyx_n_s_cumulative_product_qual, 104, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(0, 104, __pyx_L1_error)

  /* "tgirt_seq_tools/read_cluster.pyx":141
 *     return log_posterior
 * 
 * def calculate_concensus_base(arg):             # <<<<<<<<<<<<<<
 *     """Given a list of sequences,
 *         a list of quality line and
 */
  __pyx_tuple__25 = PyTuple_Pack(14, __pyx_n_s_arg, __pyx_n_s_number_possible_bases, __pyx_n_s_log_posterior, __pyx_n_s_total_posterior, __pyx_n_s_posterior_correct_probability, __pyx_n_s_column_bases, __pyx_n_s_in_column_qualities, __pyx_n_s_column_qualities, __pyx_n_s_possible_bases, __pyx_n_s_concensus_base, __pyx_n_s_log_posteriors, __pyx_n_s_likelihoods, __pyx_n_s_arg_max_likelihood, __pyx_n_s_guess_base); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(1, 0, 14, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_wckdouglas_scripts_softwa, __pyx_n_s_calculate_concensus_base, 141, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 141, __pyx_L1_error)

  /* "tgirt_seq_tools/read_cluster.pyx":170
 * 
 * 
 * def vote_concensus_base(arg):             # <<<<<<<<<<<<<<
 *     """Given a list of sequences,
 *         a list of quality line and
 */
  __pyx_tuple__27 = PyTuple_Pack(15, __pyx_n_s_arg, __pyx_n_s_number_possible_bases, __pyx_n_s_log_posterior, __pyx_n_s_total_posterior, __pyx_n_s_posterior_correct_probability, __pyx_n_s_column_bases, __pyx_n_s_in_column_qualities, __pyx_n_s_column_qualities, __pyx_n_s_possible_bases, __pyx_n_s_possible_counts, __pyx_n_s_best_vote, __pyx_n_s_best_fraction, __pyx_n_s_concensus_base, __pyx_n_s_best_index, __pyx_n_s_best_quals); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(1, 0, 15, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_wckdouglas_scripts_softwa, __pyx_n_s_vote_concensus_base, 170, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(0, 170, __pyx_L1_error)

  /* "tgirt_seq_tools/read_cluster.pyx":202
 * 
 * 
 * def concensus_sequence(conserved, aln_table):             # <<<<<<<<<<<<<<
 *     """given a list of sequences, a list of quality and sequence length.
 *         assertion: all seq in seqlist should have same length (see function: selectSeqLength)
 */
  __pyx_tuple__29 = PyTuple_Pack(16, __pyx_n_s_conserved, __pyx_n_s_aln_table, __pyx_n_s_sequence, __pyx_n_s_quality, __pyx_n_s_posterior_correct_prob, __pyx_n_s_in_seq_list, __pyx_n_s_in_qual_list, __pyx_n_s_len_array, __pyx_n_s_seq_len, __pyx_n_s_len_filter, __pyx_n_s_seq_list, __pyx_n_s_qual_list, __pyx_n_s_iter_list, __pyx_n_s_base, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(2, 0, 16, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_wckdouglas_scripts_softwa, __pyx_n_s_concensus_sequence, 202, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_9 = PyFloat_FromDouble(0.9); if (unlikely(!__pyx_float_0_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_3_0 = PyFloat_FromDouble(3.0); if (unlikely(!__pyx_float_3_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_33 = PyInt_FromLong(33); if (unlikely(!__pyx_int_33)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initread_cluster(void); /*proto*/
PyMODINIT_FUNC initread_cluster(void)
#else
PyMODINIT_FUNC PyInit_read_cluster(void); /*proto*/
PyMODINIT_FUNC PyInit_read_cluster(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_read_cluster(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("read_cluster", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_tgirt_seq_tools__read_cluster) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "tgirt_seq_tools.read_cluster")) {
      if (unlikely(PyDict_SetItemString(modules, "tgirt_seq_tools.read_cluster", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_15tgirt_seq_tools_12read_cluster_readGroup) < 0) __PYX_ERR(0, 236, __pyx_L1_error)
  __pyx_type_15tgirt_seq_tools_12read_cluster_readGroup.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "readGroup", (PyObject *)&__pyx_type_15tgirt_seq_tools_12read_cluster_readGroup) < 0) __PYX_ERR(0, 236, __pyx_L1_error)
  __pyx_ptype_15tgirt_seq_tools_12read_cluster_readGroup = &__pyx_type_15tgirt_seq_tools_12read_cluster_readGroup;
  if (PyType_Ready(&__pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
  __pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode.tp_print = 0;
  __pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode = &__pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct__mode;
  if (PyType_Ready(&__pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  __pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual.tp_print = 0;
  __pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual = &__pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_1_cumulative_product_qual;
  if (PyType_Ready(&__pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr) < 0) __PYX_ERR(0, 109, __pyx_L1_error)
  __pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr.tp_print = 0;
  __pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr = &__pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_2_genexpr;
  if (PyType_Ready(&__pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  __pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior.tp_print = 0;
  __pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior = &__pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_3___pyx_f_15tgirt_seq_tools_12read_cluster_calculatePosterior;
  if (PyType_Ready(&__pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr.tp_print = 0;
  __pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr = &__pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_4_genexpr;
  if (PyType_Ready(&__pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
  __pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr.tp_print = 0;
  __pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr = &__pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_5_genexpr;
  if (PyType_Ready(&__pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence) < 0) __PYX_ERR(0, 202, __pyx_L1_error)
  __pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence.tp_print = 0;
  __pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence = &__pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_6_concensus_sequence;
  if (PyType_Ready(&__pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr) < 0) __PYX_ERR(0, 225, __pyx_L1_error)
  __pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr.tp_print = 0;
  __pyx_ptype_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr = &__pyx_type_15tgirt_seq_tools_12read_cluster___pyx_scope_struct_7_genexpr;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(2, 9, __pyx_L1_error)
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) __PYX_ERR(3, 8, __pyx_L1_error)
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) __PYX_ERR(4, 15, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "tgirt_seq_tools/read_cluster.pyx":2
 * from __future__ import division
 * import numpy as np             # <<<<<<<<<<<<<<
 * import pysam
 * from itertools import izip, imap
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":3
 * from __future__ import division
 * import numpy as np
 * import pysam             # <<<<<<<<<<<<<<
 * from itertools import izip, imap
 * import string
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pysam, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pysam, __pyx_t_1) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":4
 * import numpy as np
 * import pysam
 * from itertools import izip, imap             # <<<<<<<<<<<<<<
 * import string
 * from libc.math cimport log10, exp
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_izip);
  __Pyx_GIVEREF(__pyx_n_s_izip);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_izip);
  __Pyx_INCREF(__pyx_n_s_imap);
  __Pyx_GIVEREF(__pyx_n_s_imap);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_imap);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_itertools, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_izip); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_izip, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_imap); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_imap, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":5
 * import pysam
 * from itertools import izip, imap
 * import string             # <<<<<<<<<<<<<<
 * from libc.math cimport log10, exp
 * import sys
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_string, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_string, __pyx_t_2) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":7
 * import string
 * from libc.math cimport log10, exp
 * import sys             # <<<<<<<<<<<<<<
 * from cpython cimport bool
 * from scipy.misc import logsumexp
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_2) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":9
 * import sys
 * from cpython cimport bool
 * from scipy.misc import logsumexp             # <<<<<<<<<<<<<<
 * 
 * np_len = np.vectorize(len,otypes=[np.int32])
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_logsumexp);
  __Pyx_GIVEREF(__pyx_n_s_logsumexp);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_logsumexp);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_scipy_misc, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_logsumexp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logsumexp, __pyx_t_2) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":11
 * from scipy.misc import logsumexp
 * 
 * np_len = np.vectorize(len,otypes=[np.int32])             # <<<<<<<<<<<<<<
 * np_ord = np.vectorize(ord, otypes=[np.int16])
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_vectorize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetBuiltinName(__pyx_n_s_len); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_otypes, __pyx_t_4) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np_len, __pyx_t_4) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":12
 * 
 * np_len = np.vectorize(len,otypes=[np.int32])
 * np_ord = np.vectorize(ord, otypes=[np.int16])             # <<<<<<<<<<<<<<
 * 
 * cdef:
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_vectorize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetBuiltinName(__pyx_n_s_ord); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int16); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_otypes, __pyx_t_2) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np_ord, __pyx_t_2) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":15
 * 
 * cdef:
 *     double min_q = 33.0             # <<<<<<<<<<<<<<
 *     double max_q = 73.0
 *     double max_prob = 0.999999
 */
  __pyx_v_15tgirt_seq_tools_12read_cluster_min_q = 33.0;

  /* "tgirt_seq_tools/read_cluster.pyx":16
 * cdef:
 *     double min_q = 33.0
 *     double max_q = 73.0             # <<<<<<<<<<<<<<
 *     double max_prob = 0.999999
 * 
 */
  __pyx_v_15tgirt_seq_tools_12read_cluster_max_q = 73.0;

  /* "tgirt_seq_tools/read_cluster.pyx":17
 *     double min_q = 33.0
 *     double max_q = 73.0
 *     double max_prob = 0.999999             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_15tgirt_seq_tools_12read_cluster_max_prob = 0.999999;

  /* "tgirt_seq_tools/read_cluster.pyx":20
 * 
 * 
 * complement =  string.maketrans('ACTGNactgn','TGACNTGACN')             # <<<<<<<<<<<<<<
 * def reverse_complement(seq):
 *     '''
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_string); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_maketrans); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_complement, __pyx_t_2) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":21
 * 
 * complement =  string.maketrans('ACTGNactgn','TGACNTGACN')
 * def reverse_complement(seq):             # <<<<<<<<<<<<<<
 *     '''
 *     Generate reverse complement as name suggested....-,-
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15tgirt_seq_tools_12read_cluster_1reverse_complement, NULL, __pyx_n_s_tgirt_seq_tools_read_cluster); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reverse_complement, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":28
 * 
 * 
 * def fix_strand(str seq, str qual, bool strand):             # <<<<<<<<<<<<<<
 *     if strand:
 *         seq = reverse_complement(seq)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15tgirt_seq_tools_12read_cluster_3fix_strand, NULL, __pyx_n_s_tgirt_seq_tools_read_cluster); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fix_strand, __pyx_t_2) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":35
 * 
 * 
 * def mode(any_list):             # <<<<<<<<<<<<<<
 *     any_list = list(any_list)
 *     count_tuple = map(lambda x: (any_list.count(x), x), set(any_list))
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15tgirt_seq_tools_12read_cluster_5mode, NULL, __pyx_n_s_tgirt_seq_tools_read_cluster); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mode, __pyx_t_2) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":93
 * 
 * 
 * def qual_to_prob(base_qual):             # <<<<<<<<<<<<<<
 *     '''
 *     Given a q list,
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15tgirt_seq_tools_12read_cluster_7qual_to_prob, NULL, __pyx_n_s_tgirt_seq_tools_read_cluster); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_qual_to_prob, __pyx_t_2) < 0) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":104
 * 
 * 
 * def cumulative_product_qual(qs, hit=True):             # <<<<<<<<<<<<<<
 *     '''
 *     cythonize numpy.prod
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15tgirt_seq_tools_12read_cluster_9cumulative_product_qual, NULL, __pyx_n_s_tgirt_seq_tools_read_cluster); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cumulative_product_qual, __pyx_t_2) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":141
 *     return log_posterior
 * 
 * def calculate_concensus_base(arg):             # <<<<<<<<<<<<<<
 *     """Given a list of sequences,
 *         a list of quality line and
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15tgirt_seq_tools_12read_cluster_11calculate_concensus_base, NULL, __pyx_n_s_tgirt_seq_tools_read_cluster); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calculate_concensus_base, __pyx_t_2) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":170
 * 
 * 
 * def vote_concensus_base(arg):             # <<<<<<<<<<<<<<
 *     """Given a list of sequences,
 *         a list of quality line and
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15tgirt_seq_tools_12read_cluster_13vote_concensus_base, NULL, __pyx_n_s_tgirt_seq_tools_read_cluster); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_vote_concensus_base, __pyx_t_2) < 0) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":202
 * 
 * 
 * def concensus_sequence(conserved, aln_table):             # <<<<<<<<<<<<<<
 *     """given a list of sequences, a list of quality and sequence length.
 *         assertion: all seq in seqlist should have same length (see function: selectSeqLength)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15tgirt_seq_tools_12read_cluster_15concensus_sequence, NULL, __pyx_n_s_tgirt_seq_tools_read_cluster); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_concensus_sequence, __pyx_t_2) < 0) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/read_cluster.pyx":1
 * from __future__ import division             # <<<<<<<<<<<<<<
 * import numpy as np
 * import pysam
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init tgirt_seq_tools.read_cluster", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init tgirt_seq_tools.read_cluster");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyCFunctionFastCall */
  #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyObjectCall */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* RaiseArgTupleInvalid */
    static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
    static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
    static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
    static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* None */
    static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* FetchCommonType */
    static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
    static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* GetItemInt */
        static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyIntBinop */
        #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
        double b = PyFloat_AS_DOUBLE(op2);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* None */
        static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* PyErrFetchRestore */
        #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
        static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyFloatBinop */
        #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_TrueDivideObjC(PyObject *op1, PyObject *op2, double floatval, CYTHON_UNUSED int inplace) {
    const double b = floatval;
    double a, result;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
        }
    } else {
        return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);
    }
        PyFPE_START_PROTECT("divide", return NULL)
        result = a / b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* RaiseTooManyValuesToUnpack */
          static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
          static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
          static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
          static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyIntBinop */
          #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* PyObjectCallNoArg */
          #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyIntBinop */
            #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
            if (8 * sizeof(long) <= 53 || likely(labs(a) <= (1L << 53))) {
                return PyFloat_FromDouble((double)a / (double)b);
            }
            return PyInt_Type.tp_as_number->nb_true_divide(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                default: return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            }
        }
                if ((8 * sizeof(long) <= 53 || likely(labs(a) <= (1L << 53)))
                    || __Pyx_sst_abs(size) <= 52 / PyLong_SHIFT) {
                    return PyFloat_FromDouble((double)a / (double)b);
                }
                return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            return PyLong_FromLong(x);
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("divide", return NULL)
            result = ((double)a) / (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);
}
#endif

/* ExtTypeTest */
            static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* Import */
            static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
            static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CodeObjectCache */
            static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
            #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
            #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
            static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* RaiseException */
            #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* SwapException */
              #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectCallMethod1 */
              static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto done;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
done:
    Py_XDECREF(method);
    return result;
}

/* CoroutineBase */
              #include <structmember.h>
#include <frameobject.h>
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Coroutine_CheckRunning(__pyx_CoroutineObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value) {
    PyObject *retval;
    __Pyx_PyThreadState_declare
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    __Pyx_PyThreadState_assign
    if (value) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(__pyx_tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = __pyx_tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject *retval) {
    if (unlikely(!retval && !PyErr_Occurred())) {
        PyErr_SetNone(PyExc_StopIteration);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Coroutine_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value);
    }
    return __Pyx_Coroutine_MethodReturn(retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
            goto throw_here;
        }
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
}
static int __Pyx_Coroutine_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label > 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label <= 0)
        return ;
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Coroutine_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
                  static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
                  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (!abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_VERSION_HEX >= 0x03030000) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_VERSION_HEX >= 0x03030000) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if (0) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
                  static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if PY_VERSION_HEX >= 0x030400a1
    __Pyx_Coroutine_del,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
                  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
                  #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
                  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
                  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
