/* Generated by Cython 0.25.2 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [], 
        "include_dirs": [
            "/Users/wckdouglas/miniconda2/lib/python2.7/site-packages/numpy/core/include", 
            "/Users/wckdouglas/miniconda2/lib/python2.7/site-packages/pysam", 
            "/Users/wckdouglas/miniconda2/lib/python2.7/site-packages/pysam/include/htslib", 
            "/Users/wckdouglas/miniconda2/lib/python2.7/site-packages/pysam/include/samtools"
        ]
    }, 
    "module_name": "tgirt_seq_tools.cluster_reads"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_2"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #elif defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__tgirt_seq_tools__cluster_reads
#define __PYX_HAVE_API__tgirt_seq_tools__cluster_reads
#include <string.h>
#include <stdio.h>
#include "pythread.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "tgirt_seq_tools/cluster_reads.pyx",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord;
struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq;
struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr;
struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq;

/* "tgirt_seq_tools/cluster_reads.pyx":329
 * #### read fq
 * ### and fastq class
 * cdef class fastqRecord:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public id, seq, qual
 */
struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord {
  PyObject_HEAD
  PyObject *id;
  PyObject *seq;
  PyObject *qual;
};


/* "tgirt_seq_tools/cluster_reads.pyx":50
 * 
 * 
 * def concensusSeq(in_seq_list, in_qual_list, float fraction_threshold):             # <<<<<<<<<<<<<<
 *     """given a list of sequences, a list of quality and sequence length.
 *         assertion: all seq in seqlist should have same length (see function: selectSeqLength)
 */
struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq {
  PyObject_HEAD
  float __pyx_v_fraction_threshold;
  PyObject *__pyx_v_qual_list;
  int __pyx_v_seq_len;
  PyObject *__pyx_v_seq_list;
};


/* "tgirt_seq_tools/cluster_reads.pyx":63
 *         seq_list = np.array(map(list, in_seq_list))
 *         qual_list = np.array(map(list, in_qual_list))
 *         iter_list = ((seq_list[:,pos], qual_list[:,pos], fraction_threshold) for pos in xrange(seq_len))             # <<<<<<<<<<<<<<
 *         concensus_position = imap(voteConcensusBase, iter_list)
 *         bases, quals = zip(*concensus_position)
 */
struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq *__pyx_outer_scope;
  int __pyx_v_pos;
  int __pyx_t_0;
  int __pyx_t_1;
};


/* "tgirt_seq_tools/cluster_reads.pyx":337
 * 
 * 
 * def read_fastq(file_fq):             # <<<<<<<<<<<<<<
 *     """
 *     takes a fastq file as input
 */
struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq {
  PyObject_HEAD
  struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_fastq_record;
  PyObject *__pyx_v_file_fq;
  PyObject *__pyx_v_idSeq;
  PyObject *__pyx_v_line;
  PyObject *__pyx_v_score;
  PyObject *__pyx_v_sequence;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* StringJoin.proto */
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PyObjectLookupSpecial.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** value1, PyObject** value2,
                                             int is_tuple, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* None.proto */
static CYTHON_INLINE long __Pyx_mod_long(long, long);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* bytes_tailmatch.proto */
static int __Pyx_PyBytes_SingleTailmatch(PyObject* self, PyObject* arg,
                                         Py_ssize_t start, Py_ssize_t end, int direction);
static int __Pyx_PyBytes_Tailmatch(PyObject* self, PyObject* substr,
                                   Py_ssize_t start, Py_ssize_t end, int direction);

/* unicode_tailmatch.proto */
static int __Pyx_PyUnicode_Tailmatch(PyObject* s, PyObject* substr,
                                     Py_ssize_t start, Py_ssize_t end, int direction);

/* str_tailmatch.proto */
static CYTHON_INLINE int __Pyx_PyStr_Tailmatch(PyObject* self, PyObject* arg, Py_ssize_t start,
                                               Py_ssize_t end, int direction);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static int __Pyx_Coroutine_clear(PyObject *self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cpython.version' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'tgirt_seq_tools.cluster_reads' */
static PyTypeObject *__pyx_ptype_15tgirt_seq_tools_13cluster_reads_fastqRecord = 0;
static PyTypeObject *__pyx_ptype_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq = 0;
static PyTypeObject *__pyx_ptype_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq = 0;
static int __pyx_f_15tgirt_seq_tools_13cluster_reads_hamming_distance(PyObject *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_15tgirt_seq_tools_13cluster_reads_readClusteringR2(PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_15tgirt_seq_tools_13cluster_reads_readClusteringR1(PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch); /*proto*/
#define __Pyx_MODULE_NAME "tgirt_seq_tools.cluster_reads"
int __pyx_module_is_main_tgirt_seq_tools__cluster_reads = 0;

/* Implementation of 'tgirt_seq_tools.cluster_reads' */
static PyObject *__pyx_builtin_chr;
static PyObject *__pyx_builtin_map;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_enumerate;
static const char __pyx_k_[] = "!";
static const char __pyx_k_A[] = "A";
static const char __pyx_k_C[] = "C";
static const char __pyx_k_G[] = "G";
static const char __pyx_k_N[] = "N";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_No[] = "No";
static const char __pyx_k__4[] = "";
static const char __pyx_k_ax[] = "ax";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_io[] = "io";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_rb[] = "rb";
static const char __pyx_k_re[] = "re";
static const char __pyx_k_wb[] = "wb";
static const char __pyx_k_Agg[] = "Agg";
static const char __pyx_k__11[] = "/";
static const char __pyx_k__23[] = "\n";
static const char __pyx_k__28[] = " ";
static const char __pyx_k__31[] = "\t";
static const char __pyx_k__34[] = "|";
static const char __pyx_k__38[] = "@";
static const char __pyx_k__40[] = "+\n";
static const char __pyx_k__42[] = "*";
static const char __pyx_k_arg[] = "arg";
static const char __pyx_k_bar[] = "bar";
static const char __pyx_k_chr[] = "chr";
static const char __pyx_k_fig[] = "fig";
static const char __pyx_k_fq1[] = "fq1";
static const char __pyx_k_fq2[] = "fq2";
static const char __pyx_k_log[] = "log";
static const char __pyx_k_map[] = "map";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_mul[] = "mul";
static const char __pyx_k_ord[] = "ord";
static const char __pyx_k_plt[] = "plt";
static const char __pyx_k_pos[] = "pos";
static const char __pyx_k_seq[] = "seq";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_top[] = "top";
static const char __pyx_k_use[] = "use";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_Pool[] = "Pool";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_bins[] = "bins";
static const char __pyx_k_clip[] = "clip";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_gzip[] = "gzip";
static const char __pyx_k_hist[] = "hist";
static const char __pyx_k_imap[] = "imap";
static const char __pyx_k_izip[] = "izip";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_line[] = "line";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mean[] = "mean";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_pool[] = "pool";
static const char __pyx_k_qual[] = "qual";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_align[] = "align";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_bases[] = "bases";
static const char __pyx_k_cjson[] = "cjson";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_depth[] = "depth";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_idSeq[] = "idSeq";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_int64[] = "int64";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_quals[] = "quals";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_read1[] = "read1";
static const char __pyx_k_read2[] = "read2";
static const char __pyx_k_right[] = "right";
static const char __pyx_k_s_pdf[] = "%s.pdf";
static const char __pyx_k_score[] = "score";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_strip[] = "strip";
static const char __pyx_k_table[] = "table";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_width[] = "width";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_argmax[] = "argmax";
static const char __pyx_k_center[] = "center";
static const char __pyx_k_counts[] = "counts";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_figure[] = "figure";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_infile[] = "infile";
static const char __pyx_k_lstrip[] = "lstrip";
static const char __pyx_k_np_ord[] = "np_ord";
static const char __pyx_k_record[] = "record";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_search[] = "search";
static const char __pyx_k_spines[] = "spines";
static const char __pyx_k_stderr[] = "stderr";
static const char __pyx_k_unique[] = "unique";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_centers[] = "centers";
static const char __pyx_k_compile[] = "compile";
static const char __pyx_k_counter[] = "counter";
static const char __pyx_k_file_fq[] = "file_fq";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_mpl_use[] = "mpl_use";
static const char __pyx_k_nonposy[] = "nonposy";
static const char __pyx_k_partial[] = "partial";
static const char __pyx_k_quality[] = "quality";
static const char __pyx_k_savefig[] = "savefig";
static const char __pyx_k_seq_len[] = "seq_len";
static const char __pyx_k_threads[] = "threads";
static const char __pyx_k_constant[] = "constant";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_idx_base[] = "idx_base";
static const char __pyx_k_inFastq1[] = "inFastq1";
static const char __pyx_k_inFastq2[] = "inFastq2";
static const char __pyx_k_iterator[] = "iterator";
static const char __pyx_k_qual_num[] = "qual_num";
static const char __pyx_k_read_num[] = "read_num";
static const char __pyx_k_readline[] = "readline";
static const char __pyx_k_seq_list[] = "seq_list";
static const char __pyx_k_sequence[] = "sequence";
static const char __pyx_k_Plotted_s[] = "Plotted %s.\n";
static const char __pyx_k_chunksize[] = "chunksize";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_functools[] = "functools";
static const char __pyx_k_gzip_open[] = "gzip_open";
static const char __pyx_k_histogram[] = "histogram";
static const char __pyx_k_iter_list[] = "iter_list";
static const char __pyx_k_iteritems[] = "iteritems";
static const char __pyx_k_itertools[] = "itertools";
static const char __pyx_k_json_file[] = "json_file";
static const char __pyx_k_processes[] = "processes";
static const char __pyx_k_qual_list[] = "qual_list";
static const char __pyx_k_read1File[] = "read1File";
static const char __pyx_k_read2File[] = "read2File";
static const char __pyx_k_read_flag[] = "read_flag";
static const char __pyx_k_set_title[] = "set_title";
static const char __pyx_k_vectorize[] = "vectorize";
static const char __pyx_k_written_s[] = "written %s";
static const char __pyx_k_dictToJson[] = "dictToJson";
static const char __pyx_k_error_func[] = "error_func";
static const char __pyx_k_failed_tsv[] = "-failed.tsv";
static const char __pyx_k_figurename[] = "figurename";
static const char __pyx_k_matplotlib[] = "matplotlib";
static const char __pyx_k_read_fastq[] = "read_fastq";
static const char __pyx_k_set_xlabel[] = "set_xlabel";
static const char __pyx_k_set_ylabel[] = "set_ylabel";
static const char __pyx_k_set_yscale[] = "set_yscale";
static const char __pyx_k_usable_seq[] = "usable_seq";
static const char __pyx_k_which_side[] = "which_side";
static const char __pyx_k_write_func[] = "write_func";
static const char __pyx_k_add_subplot[] = "add_subplot";
static const char __pyx_k_failed_file[] = "failed_file";
static const char __pyx_k_in_seq_list[] = "in_seq_list";
static const char __pyx_k_json_record[] = "json_record";
static const char __pyx_k_left_record[] = "left_record";
static const char __pyx_k_programname[] = "programname";
static const char __pyx_k_set_visible[] = "set_visible";
static const char __pyx_k_barcode_dict[] = "barcode_dict";
static const char __pyx_k_cluster_i__s[] = "@cluster%i_%s";
static const char __pyx_k_column_bases[] = "column_bases";
static const char __pyx_k_concensusSeq[] = "concensusSeq";
static const char __pyx_k_failed_reads[] = "failed_reads";
static const char __pyx_k_fastq_record[] = "fastq_record";
static const char __pyx_k_in_qual_list[] = "in_qual_list";
static const char __pyx_k_member_count[] = "member_count";
static const char __pyx_k_outputprefix[] = "outputprefix";
static const char __pyx_k_quality_left[] = "quality_left";
static const char __pyx_k_right_record[] = "right_record";
static const char __pyx_k_Count_of_tags[] = "Count of tags";
static const char __pyx_k_barcode_count[] = "barcode_count";
static const char __pyx_k_cluster_reads[] = "cluster_reads";
static const char __pyx_k_quality_right[] = "quality_right";
static const char __pyx_k_recordsToDict[] = "recordsToDict";
static const char __pyx_k_return_counts[] = "return_counts";
static const char __pyx_k_seq_left_list[] = "seq_left_list";
static const char __pyx_k_sequence_left[] = "sequence_left";
static const char __pyx_k_BufferedReader[] = "BufferedReader";
static const char __pyx_k_BufferedWriter[] = "BufferedWriter";
static const char __pyx_k_allow_mismatch[] = "allow_mismatch";
static const char __pyx_k_concensusPairs[] = "concensusPairs";
static const char __pyx_k_errorFreeReads[] = "errorFreeReads";
static const char __pyx_k_imap_unordered[] = "imap_unordered";
static const char __pyx_k_qual_left_list[] = "qual_left_list";
static const char __pyx_k_seq_right_list[] = "seq_right_list";
static const char __pyx_k_sequence_right[] = "sequence_right";
static const char __pyx_k_R1_001_fastq_gz[] = "_R1_001.fastq.gz";
static const char __pyx_k_R2_001_fastq_gz[] = "_R2_001.fastq.gz";
static const char __pyx_k_barcode_cut_off[] = "barcode_cut_off";
static const char __pyx_k_constant_length[] = "constant_length";
static const char __pyx_k_constant_region[] = "constant_region";
static const char __pyx_k_multiprocessing[] = "multiprocessing";
static const char __pyx_k_qual_right_list[] = "qual_right_list";
static const char __pyx_k_writeSeqToFiles[] = "writeSeqToFiles";
static const char __pyx_k_column_qualities[] = "column_qualities";
static const char __pyx_k_maxtasksperchild[] = "maxtasksperchild";
static const char __pyx_k_readClusteringR1[] = "readClusteringR1";
static const char __pyx_k_readClusteringR2[] = "readClusteringR2";
static const char __pyx_k_expected_constant[] = "expected_constant";
static const char __pyx_k_hamming_threshold[] = "hamming_threshold";
static const char __pyx_k_matplotlib_pyplot[] = "matplotlib.pyplot";
static const char __pyx_k_voteConcensusBase[] = "voteConcensusBase";
static const char __pyx_k_concensus_position[] = "concensus_position";
static const char __pyx_k_fraction_threshold[] = "fraction_threshold";
static const char __pyx_k_plotBCdistribution[] = "plotBCdistribution";
static const char __pyx_k_Number_of_occurence[] = "Number of occurence";
static const char __pyx_k_low_complexity_base[] = "low_complexity_base";
static const char __pyx_k_s_Parsed_i_sequence[] = "[%s] Parsed: %i sequence\n";
static const char __pyx_k_barcode_family_count[] = "barcode_family_count";
static const char __pyx_k_output_cluster_count[] = "output_cluster_count";
static const char __pyx_k_s__i_readCluster_s_s[] = "%s_%i_readCluster\n%s\n+\n%s\n";
static const char __pyx_k_column_qualities_number[] = "column_qualities_number";
static const char __pyx_k_min_family_member_count[] = "min_family_member_count";
static const char __pyx_k_discarded_sequence_count[] = "discarded_sequence_count";
static const char __pyx_k_Processed_i_read_clusters[] = "Processed %i read clusters.\n";
static const char __pyx_k_writingAndClusteringReads[] = "writingAndClusteringReads";
static const char __pyx_k_Wrongly_splitted_files_s_s[] = "Wrongly splitted files!! %s\n%s";
static const char __pyx_k_low_complexity_composition[] = "low_complexity_composition";
static const char __pyx_k_concensusSeq_locals_genexpr[] = "concensusSeq.<locals>.genexpr";
static const char __pyx_k_tgirt_seq_tools_cluster_reads[] = "tgirt_seq_tools.cluster_reads";
static const char __pyx_k_Users_wckdouglas_scripts_softwa[] = "/Users/wckdouglas/scripts/softwares/python/tgirt_seq_tools/tgirt_seq_tools/cluster_reads.pyx";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_n_s_A;
static PyObject *__pyx_n_s_Agg;
static PyObject *__pyx_n_s_BufferedReader;
static PyObject *__pyx_n_s_BufferedWriter;
static PyObject *__pyx_n_s_C;
static PyObject *__pyx_kp_s_Count_of_tags;
static PyObject *__pyx_n_s_G;
static PyObject *__pyx_n_s_N;
static PyObject *__pyx_n_s_No;
static PyObject *__pyx_kp_s_Number_of_occurence;
static PyObject *__pyx_kp_s_Plotted_s;
static PyObject *__pyx_n_s_Pool;
static PyObject *__pyx_kp_s_Processed_i_read_clusters;
static PyObject *__pyx_kp_s_R1_001_fastq_gz;
static PyObject *__pyx_kp_s_R2_001_fastq_gz;
static PyObject *__pyx_n_s_T;
static PyObject *__pyx_kp_s_Users_wckdouglas_scripts_softwa;
static PyObject *__pyx_kp_s_Wrongly_splitted_files_s_s;
static PyObject *__pyx_kp_s__11;
static PyObject *__pyx_kp_s__23;
static PyObject *__pyx_kp_s__28;
static PyObject *__pyx_kp_s__31;
static PyObject *__pyx_kp_s__34;
static PyObject *__pyx_kp_s__38;
static PyObject *__pyx_kp_s__4;
static PyObject *__pyx_kp_s__40;
static PyObject *__pyx_n_s__42;
static PyObject *__pyx_n_s_add_subplot;
static PyObject *__pyx_n_s_align;
static PyObject *__pyx_n_s_allow_mismatch;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_arg;
static PyObject *__pyx_n_s_argmax;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_ax;
static PyObject *__pyx_n_s_bar;
static PyObject *__pyx_n_s_barcode_count;
static PyObject *__pyx_n_s_barcode_cut_off;
static PyObject *__pyx_n_s_barcode_dict;
static PyObject *__pyx_n_s_barcode_family_count;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_bases;
static PyObject *__pyx_n_s_bins;
static PyObject *__pyx_n_s_center;
static PyObject *__pyx_n_s_centers;
static PyObject *__pyx_n_s_chr;
static PyObject *__pyx_n_s_chunksize;
static PyObject *__pyx_n_s_cjson;
static PyObject *__pyx_n_s_clip;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_kp_s_cluster_i__s;
static PyObject *__pyx_n_s_cluster_reads;
static PyObject *__pyx_n_s_column_bases;
static PyObject *__pyx_n_s_column_qualities;
static PyObject *__pyx_n_s_column_qualities_number;
static PyObject *__pyx_n_s_compile;
static PyObject *__pyx_n_s_concensusPairs;
static PyObject *__pyx_n_s_concensusSeq;
static PyObject *__pyx_n_s_concensusSeq_locals_genexpr;
static PyObject *__pyx_n_s_concensus_position;
static PyObject *__pyx_n_s_constant;
static PyObject *__pyx_n_s_constant_length;
static PyObject *__pyx_n_s_constant_region;
static PyObject *__pyx_n_s_counter;
static PyObject *__pyx_n_s_counts;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_s_depth;
static PyObject *__pyx_n_s_dictToJson;
static PyObject *__pyx_n_s_discarded_sequence_count;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_errorFreeReads;
static PyObject *__pyx_n_s_error_func;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_expected_constant;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_failed_file;
static PyObject *__pyx_n_s_failed_reads;
static PyObject *__pyx_kp_s_failed_tsv;
static PyObject *__pyx_n_s_fastq_record;
static PyObject *__pyx_n_s_fig;
static PyObject *__pyx_n_s_figure;
static PyObject *__pyx_n_s_figurename;
static PyObject *__pyx_n_s_file_fq;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_fq1;
static PyObject *__pyx_n_s_fq2;
static PyObject *__pyx_n_s_fraction_threshold;
static PyObject *__pyx_n_s_functools;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_gzip;
static PyObject *__pyx_n_s_gzip_open;
static PyObject *__pyx_n_s_hamming_threshold;
static PyObject *__pyx_n_s_hist;
static PyObject *__pyx_n_s_histogram;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_idSeq;
static PyObject *__pyx_n_s_idx_base;
static PyObject *__pyx_n_s_imap;
static PyObject *__pyx_n_s_imap_unordered;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_inFastq1;
static PyObject *__pyx_n_s_inFastq2;
static PyObject *__pyx_n_s_in_qual_list;
static PyObject *__pyx_n_s_in_seq_list;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_infile;
static PyObject *__pyx_n_s_int64;
static PyObject *__pyx_n_s_io;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_iter_list;
static PyObject *__pyx_n_s_iterator;
static PyObject *__pyx_n_s_iteritems;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_n_s_izip;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_json_file;
static PyObject *__pyx_n_s_json_record;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_left_record;
static PyObject *__pyx_n_s_line;
static PyObject *__pyx_n_s_log;
static PyObject *__pyx_n_s_low_complexity_base;
static PyObject *__pyx_n_s_low_complexity_composition;
static PyObject *__pyx_n_s_lstrip;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_map;
static PyObject *__pyx_n_s_matplotlib;
static PyObject *__pyx_n_s_matplotlib_pyplot;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_maxtasksperchild;
static PyObject *__pyx_n_s_mean;
static PyObject *__pyx_n_s_member_count;
static PyObject *__pyx_n_s_min;
static PyObject *__pyx_n_s_min_family_member_count;
static PyObject *__pyx_n_s_mpl_use;
static PyObject *__pyx_n_s_mul;
static PyObject *__pyx_n_s_multiprocessing;
static PyObject *__pyx_n_s_nonposy;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_np_ord;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_ord;
static PyObject *__pyx_n_s_output_cluster_count;
static PyObject *__pyx_n_s_outputprefix;
static PyObject *__pyx_n_s_partial;
static PyObject *__pyx_n_s_plotBCdistribution;
static PyObject *__pyx_n_s_plt;
static PyObject *__pyx_n_s_pool;
static PyObject *__pyx_n_s_pos;
static PyObject *__pyx_n_s_processes;
static PyObject *__pyx_n_s_programname;
static PyObject *__pyx_n_s_qual;
static PyObject *__pyx_n_s_qual_left_list;
static PyObject *__pyx_n_s_qual_list;
static PyObject *__pyx_n_s_qual_num;
static PyObject *__pyx_n_s_qual_right_list;
static PyObject *__pyx_n_s_quality;
static PyObject *__pyx_n_s_quality_left;
static PyObject *__pyx_n_s_quality_right;
static PyObject *__pyx_n_s_quals;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rb;
static PyObject *__pyx_n_s_re;
static PyObject *__pyx_n_s_read1;
static PyObject *__pyx_n_s_read1File;
static PyObject *__pyx_n_s_read2;
static PyObject *__pyx_n_s_read2File;
static PyObject *__pyx_n_s_readClusteringR1;
static PyObject *__pyx_n_s_readClusteringR2;
static PyObject *__pyx_n_s_read_fastq;
static PyObject *__pyx_n_s_read_flag;
static PyObject *__pyx_n_s_read_num;
static PyObject *__pyx_n_s_readline;
static PyObject *__pyx_n_s_record;
static PyObject *__pyx_n_s_recordsToDict;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_return_counts;
static PyObject *__pyx_n_s_right;
static PyObject *__pyx_n_s_right_record;
static PyObject *__pyx_kp_s_s_Parsed_i_sequence;
static PyObject *__pyx_kp_s_s__i_readCluster_s_s;
static PyObject *__pyx_kp_s_s_pdf;
static PyObject *__pyx_n_s_savefig;
static PyObject *__pyx_n_s_score;
static PyObject *__pyx_n_s_search;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_seq;
static PyObject *__pyx_n_s_seq_left_list;
static PyObject *__pyx_n_s_seq_len;
static PyObject *__pyx_n_s_seq_list;
static PyObject *__pyx_n_s_seq_right_list;
static PyObject *__pyx_n_s_sequence;
static PyObject *__pyx_n_s_sequence_left;
static PyObject *__pyx_n_s_sequence_right;
static PyObject *__pyx_n_s_set_title;
static PyObject *__pyx_n_s_set_visible;
static PyObject *__pyx_n_s_set_xlabel;
static PyObject *__pyx_n_s_set_ylabel;
static PyObject *__pyx_n_s_set_yscale;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_spines;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_stderr;
static PyObject *__pyx_n_s_strip;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_table;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_tgirt_seq_tools_cluster_reads;
static PyObject *__pyx_n_s_threads;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_top;
static PyObject *__pyx_n_s_unique;
static PyObject *__pyx_n_s_usable_seq;
static PyObject *__pyx_n_s_use;
static PyObject *__pyx_n_s_vectorize;
static PyObject *__pyx_n_s_voteConcensusBase;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_wb;
static PyObject *__pyx_n_s_which_side;
static PyObject *__pyx_n_s_width;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_n_s_writeSeqToFiles;
static PyObject *__pyx_n_s_write_func;
static PyObject *__pyx_n_s_writingAndClusteringReads;
static PyObject *__pyx_kp_s_written_s;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_gzip_open(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_read_flag); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_2voteConcensusBase(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_12concensusSeq_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_4concensusSeq(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_in_seq_list, PyObject *__pyx_v_in_qual_list, float __pyx_v_fraction_threshold); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_6hamming_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_expected_constant, PyObject *__pyx_v_constant_region); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_8plotBCdistribution(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_barcode_family_count, PyObject *__pyx_v_outputprefix); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_10concensusPairs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_table, float __pyx_v_fraction_threshold); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_12dictToJson(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_barcode_dict, PyObject *__pyx_v_json_file); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_14errorFreeReads(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_min_family_member_count, float __pyx_v_fraction_threshold, PyObject *__pyx_v_json_record); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_16writeSeqToFiles(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_read1, PyObject *__pyx_v_read2, PyObject *__pyx_v_output_cluster_count, PyObject *__pyx_v_result); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_18writingAndClusteringReads(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_outputprefix, PyObject *__pyx_v_min_family_member_count, PyObject *__pyx_v_json_file, PyObject *__pyx_v_threads, PyObject *__pyx_v_fraction_threshold); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_20readClusteringR2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_barcode_dict, PyObject *__pyx_v_idx_base, PyObject *__pyx_v_barcode_cut_off, PyObject *__pyx_v_constant, PyObject *__pyx_v_constant_length, PyObject *__pyx_v_hamming_threshold, PyObject *__pyx_v_usable_seq, PyObject *__pyx_v_failed_file, PyObject *__pyx_v_low_complexity_composition, PyObject *__pyx_v_read1, PyObject *__pyx_v_read2); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_22readClusteringR1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_barcode_dict, PyObject *__pyx_v_idx_base, PyObject *__pyx_v_barcode_cut_off, PyObject *__pyx_v_constant, PyObject *__pyx_v_constant_length, PyObject *__pyx_v_hamming_threshold, PyObject *__pyx_v_usable_seq, PyObject *__pyx_v_failed_file, PyObject *__pyx_v_low_complexity_composition, PyObject *__pyx_v_read1, PyObject *__pyx_v_read2); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_24recordsToDict(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_outputprefix, PyObject *__pyx_v_inFastq1, PyObject *__pyx_v_inFastq2, int __pyx_v_idx_base, int __pyx_v_barcode_cut_off, PyObject *__pyx_v_constant, PyObject *__pyx_v_barcode_dict, int __pyx_v_allow_mismatch, PyObject *__pyx_v_which_side, PyObject *__pyx_v_programname); /* proto */
static int __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord___init__(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_self, PyObject *__pyx_v_id, PyObject *__pyx_v_seq, PyObject *__pyx_v_qual); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_2id___get__(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_self); /* proto */
static int __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_2id_2__set__(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_2id_4__del__(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_3seq___get__(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_self); /* proto */
static int __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_3seq_2__set__(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_3seq_4__del__(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_4qual___get__(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_self); /* proto */
static int __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_4qual_2__set__(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_4qual_4__del__(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_26read_fastq(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_fq); /* proto */
static PyObject *__pyx_tp_new_15tgirt_seq_tools_13cluster_reads_fastqRecord(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_7;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_33;
static PyObject *__pyx_int_41;
static PyObject *__pyx_int_50;
static PyObject *__pyx_int_53;
static PyObject *__pyx_int_111;
static PyObject *__pyx_int_1000;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_slice__2;
static PyObject *__pyx_slice__3;
static PyObject *__pyx_slice__5;
static PyObject *__pyx_slice__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__15;
static PyObject *__pyx_slice__17;
static PyObject *__pyx_slice__19;
static PyObject *__pyx_slice__21;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_codeobj__44;
static PyObject *__pyx_codeobj__46;
static PyObject *__pyx_codeobj__48;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__52;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__62;
static PyObject *__pyx_codeobj__64;

/* "tgirt_seq_tools/cluster_reads.pyx":18
 * np_ord = np.vectorize(ord)
 * 
 * def gzip_open(filename, read_flag = 'r'):             # <<<<<<<<<<<<<<
 *     if 'r' in read_flag:
 *         return io.BufferedReader(gzip.open(filename, read_flag))
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_1gzip_open(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15tgirt_seq_tools_13cluster_reads_1gzip_open = {"gzip_open", (PyCFunction)__pyx_pw_15tgirt_seq_tools_13cluster_reads_1gzip_open, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_1gzip_open(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_read_flag = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("gzip_open (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_read_flag,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_n_s_r);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_read_flag);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "gzip_open") < 0)) __PYX_ERR(0, 18, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_read_flag = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("gzip_open", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 18, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.gzip_open", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_gzip_open(__pyx_self, __pyx_v_filename, __pyx_v_read_flag);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_gzip_open(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_read_flag) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("gzip_open", 0);

  /* "tgirt_seq_tools/cluster_reads.pyx":19
 * 
 * def gzip_open(filename, read_flag = 'r'):
 *     if 'r' in read_flag:             # <<<<<<<<<<<<<<
 *         return io.BufferedReader(gzip.open(filename, read_flag))
 *     elif 'w' in read_flag:
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_r, __pyx_v_read_flag, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 19, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "tgirt_seq_tools/cluster_reads.pyx":20
 * def gzip_open(filename, read_flag = 'r'):
 *     if 'r' in read_flag:
 *         return io.BufferedReader(gzip.open(filename, read_flag))             # <<<<<<<<<<<<<<
 *     elif 'w' in read_flag:
 *         return io.BufferedWriter(gzip.open(filename, read_flag))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_io); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 20, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_BufferedReader); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 20, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_gzip); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 20, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_open); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 20, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_filename, __pyx_v_read_flag};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 20, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_filename, __pyx_v_read_flag};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 20, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 20, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_INCREF(__pyx_v_filename);
      __Pyx_GIVEREF(__pyx_v_filename);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_v_filename);
      __Pyx_INCREF(__pyx_v_read_flag);
      __Pyx_GIVEREF(__pyx_v_read_flag);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_read_flag);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 20, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 20, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 20, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 20, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 20, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 20, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "tgirt_seq_tools/cluster_reads.pyx":19
 * 
 * def gzip_open(filename, read_flag = 'r'):
 *     if 'r' in read_flag:             # <<<<<<<<<<<<<<
 *         return io.BufferedReader(gzip.open(filename, read_flag))
 *     elif 'w' in read_flag:
 */
  }

  /* "tgirt_seq_tools/cluster_reads.pyx":21
 *     if 'r' in read_flag:
 *         return io.BufferedReader(gzip.open(filename, read_flag))
 *     elif 'w' in read_flag:             # <<<<<<<<<<<<<<
 *         return io.BufferedWriter(gzip.open(filename, read_flag))
 * 
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_w, __pyx_v_read_flag, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 21, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "tgirt_seq_tools/cluster_reads.pyx":22
 *         return io.BufferedReader(gzip.open(filename, read_flag))
 *     elif 'w' in read_flag:
 *         return io.BufferedWriter(gzip.open(filename, read_flag))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_io); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 22, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_BufferedWriter); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 22, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_gzip); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 22, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_open); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 22, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_filename, __pyx_v_read_flag};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 22, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_filename, __pyx_v_read_flag};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 22, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 22, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_filename);
      __Pyx_GIVEREF(__pyx_v_filename);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_8, __pyx_v_filename);
      __Pyx_INCREF(__pyx_v_read_flag);
      __Pyx_GIVEREF(__pyx_v_read_flag);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_8, __pyx_v_read_flag);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 22, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 22, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_5};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 22, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_5};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 22, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 22, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 22, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "tgirt_seq_tools/cluster_reads.pyx":21
 *     if 'r' in read_flag:
 *         return io.BufferedReader(gzip.open(filename, read_flag))
 *     elif 'w' in read_flag:             # <<<<<<<<<<<<<<
 *         return io.BufferedWriter(gzip.open(filename, read_flag))
 * 
 */
  }

  /* "tgirt_seq_tools/cluster_reads.pyx":18
 * np_ord = np.vectorize(ord)
 * 
 * def gzip_open(filename, read_flag = 'r'):             # <<<<<<<<<<<<<<
 *     if 'r' in read_flag:
 *         return io.BufferedReader(gzip.open(filename, read_flag))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.gzip_open", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/cluster_reads.pyx":25
 * 
 * 
 * def voteConcensusBase(arg):             # <<<<<<<<<<<<<<
 *     """Given a list of sequences,
 *         a list of quality line and
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_3voteConcensusBase(PyObject *__pyx_self, PyObject *__pyx_v_arg); /*proto*/
static char __pyx_doc_15tgirt_seq_tools_13cluster_reads_2voteConcensusBase[] = "Given a list of sequences,\n        a list of quality line and\n        a position,\n    return the maximum likelihood base at the given position,\n        along with the mean quality of these concensus bases.\n    ";
static PyMethodDef __pyx_mdef_15tgirt_seq_tools_13cluster_reads_3voteConcensusBase = {"voteConcensusBase", (PyCFunction)__pyx_pw_15tgirt_seq_tools_13cluster_reads_3voteConcensusBase, METH_O, __pyx_doc_15tgirt_seq_tools_13cluster_reads_2voteConcensusBase};
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_3voteConcensusBase(PyObject *__pyx_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("voteConcensusBase (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_2voteConcensusBase(__pyx_self, ((PyObject *)__pyx_v_arg));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_2voteConcensusBase(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg) {
  int __pyx_v_depth;
  PyObject *__pyx_v_column_bases = NULL;
  PyObject *__pyx_v_column_qualities = NULL;
  PyObject *__pyx_v_fraction_threshold = NULL;
  PyObject *__pyx_v_column_qualities_number = NULL;
  PyObject *__pyx_v_bases = NULL;
  PyObject *__pyx_v_counts = NULL;
  PyObject *__pyx_v_base = NULL;
  PyObject *__pyx_v_qual_num = NULL;
  PyObject *__pyx_v_qual = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("voteConcensusBase", 0);

  /* "tgirt_seq_tools/cluster_reads.pyx":35
 *         int depth
 * 
 *     column_bases, column_qualities, fraction_threshold = arg             # <<<<<<<<<<<<<<
 *     column_qualities_number = np_ord(column_qualities)-33
 *     depth = len(column_bases)
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_arg))) || (PyList_CheckExact(__pyx_v_arg))) {
    PyObject* sequence = __pyx_v_arg;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 35, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_v_arg); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 3) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 35, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_column_bases = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_column_qualities = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_fraction_threshold = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":36
 * 
 *     column_bases, column_qualities, fraction_threshold = arg
 *     column_qualities_number = np_ord(column_qualities)-33             # <<<<<<<<<<<<<<
 *     depth = len(column_bases)
 *     bases, counts = np.unique(column_bases, return_counts = True)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np_ord); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_column_qualities); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_v_column_qualities};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 36, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_v_column_qualities};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 36, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 36, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_INCREF(__pyx_v_column_qualities);
      __Pyx_GIVEREF(__pyx_v_column_qualities);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_column_qualities);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 36, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_t_3, __pyx_int_33, 33, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_column_qualities_number = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":37
 *     column_bases, column_qualities, fraction_threshold = arg
 *     column_qualities_number = np_ord(column_qualities)-33
 *     depth = len(column_bases)             # <<<<<<<<<<<<<<
 *     bases, counts = np.unique(column_bases, return_counts = True)
 *     if counts.max()/float(depth) >= fraction_threshold:
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_column_bases); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __pyx_v_depth = __pyx_t_6;

  /* "tgirt_seq_tools/cluster_reads.pyx":38
 *     column_qualities_number = np_ord(column_qualities)-33
 *     depth = len(column_bases)
 *     bases, counts = np.unique(column_bases, return_counts = True)             # <<<<<<<<<<<<<<
 *     if counts.max()/float(depth) >= fraction_threshold:
 *         base = bases[np.argmax(counts)]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_unique); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_column_bases);
  __Pyx_GIVEREF(__pyx_v_column_bases);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_column_bases);
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_return_counts, Py_True) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 38, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_4 = __pyx_t_5(__pyx_t_3); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_3), 2) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 38, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  __pyx_v_bases = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_counts = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":39
 *     depth = len(column_bases)
 *     bases, counts = np.unique(column_bases, return_counts = True)
 *     if counts.max()/float(depth) >= fraction_threshold:             # <<<<<<<<<<<<<<
 *         base = bases[np.argmax(counts)]
 *         qual_num = np.sum(column_qualities_number[column_bases == base[0]])
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_counts, __pyx_n_s_max); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(((double)__pyx_v_depth)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_v_fraction_threshold, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_7) {

    /* "tgirt_seq_tools/cluster_reads.pyx":40
 *     bases, counts = np.unique(column_bases, return_counts = True)
 *     if counts.max()/float(depth) >= fraction_threshold:
 *         base = bases[np.argmax(counts)]             # <<<<<<<<<<<<<<
 *         qual_num = np.sum(column_qualities_number[column_bases == base[0]])
 *         qual = 41 if qual_num > 41 else qual_num
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 40, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_argmax); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_counts); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_counts};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_counts};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 40, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_counts);
        __Pyx_GIVEREF(__pyx_v_counts);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_counts);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_GetItem(__pyx_v_bases, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_base = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":41
 *     if counts.max()/float(depth) >= fraction_threshold:
 *         base = bases[np.argmax(counts)]
 *         qual_num = np.sum(column_qualities_number[column_bases == base[0]])             # <<<<<<<<<<<<<<
 *         qual = 41 if qual_num > 41 else qual_num
 *         qual = chr(qual + 33)
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_sum); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_base, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_column_bases, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 41, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_GetItem(__pyx_v_column_qualities_number, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 41, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_qual_num = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":42
 *         base = bases[np.argmax(counts)]
 *         qual_num = np.sum(column_qualities_number[column_bases == base[0]])
 *         qual = 41 if qual_num > 41 else qual_num             # <<<<<<<<<<<<<<
 *         qual = chr(qual + 33)
 *     else:
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_qual_num, __pyx_int_41, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 42, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 42, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_7) {
      __Pyx_INCREF(__pyx_int_41);
      __pyx_t_1 = __pyx_int_41;
    } else {
      __Pyx_INCREF(__pyx_v_qual_num);
      __pyx_t_1 = __pyx_v_qual_num;
    }
    __pyx_v_qual = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":43
 *         qual_num = np.sum(column_qualities_number[column_bases == base[0]])
 *         qual = 41 if qual_num > 41 else qual_num
 *         qual = chr(qual + 33)             # <<<<<<<<<<<<<<
 *     else:
 *         base = 'N'
 */
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_qual, __pyx_int_33, 33, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_chr, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_qual, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":39
 *     depth = len(column_bases)
 *     bases, counts = np.unique(column_bases, return_counts = True)
 *     if counts.max()/float(depth) >= fraction_threshold:             # <<<<<<<<<<<<<<
 *         base = bases[np.argmax(counts)]
 *         qual_num = np.sum(column_qualities_number[column_bases == base[0]])
 */
    goto __pyx_L7;
  }

  /* "tgirt_seq_tools/cluster_reads.pyx":45
 *         qual = chr(qual + 33)
 *     else:
 *         base = 'N'             # <<<<<<<<<<<<<<
 *         qual = '!'
 *     return base, qual
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_n_s_N);
    __pyx_v_base = __pyx_n_s_N;

    /* "tgirt_seq_tools/cluster_reads.pyx":46
 *     else:
 *         base = 'N'
 *         qual = '!'             # <<<<<<<<<<<<<<
 *     return base, qual
 * 
 */
    __Pyx_INCREF(__pyx_kp_s_);
    __pyx_v_qual = __pyx_kp_s_;
  }
  __pyx_L7:;

  /* "tgirt_seq_tools/cluster_reads.pyx":47
 *         base = 'N'
 *         qual = '!'
 *     return base, qual             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_base);
  __Pyx_GIVEREF(__pyx_v_base);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_base);
  __Pyx_INCREF(__pyx_v_qual);
  __Pyx_GIVEREF(__pyx_v_qual);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_qual);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tgirt_seq_tools/cluster_reads.pyx":25
 * 
 * 
 * def voteConcensusBase(arg):             # <<<<<<<<<<<<<<
 *     """Given a list of sequences,
 *         a list of quality line and
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.voteConcensusBase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_column_bases);
  __Pyx_XDECREF(__pyx_v_column_qualities);
  __Pyx_XDECREF(__pyx_v_fraction_threshold);
  __Pyx_XDECREF(__pyx_v_column_qualities_number);
  __Pyx_XDECREF(__pyx_v_bases);
  __Pyx_XDECREF(__pyx_v_counts);
  __Pyx_XDECREF(__pyx_v_base);
  __Pyx_XDECREF(__pyx_v_qual_num);
  __Pyx_XDECREF(__pyx_v_qual);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/cluster_reads.pyx":50
 * 
 * 
 * def concensusSeq(in_seq_list, in_qual_list, float fraction_threshold):             # <<<<<<<<<<<<<<
 *     """given a list of sequences, a list of quality and sequence length.
 *         assertion: all seq in seqlist should have same length (see function: selectSeqLength)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_5concensusSeq(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15tgirt_seq_tools_13cluster_reads_4concensusSeq[] = "given a list of sequences, a list of quality and sequence length.\n        assertion: all seq in seqlist should have same length (see function: selectSeqLength)\n    return a consensus sequence and the mean quality line (see function: calculateConcensusBase)\n    ";
static PyMethodDef __pyx_mdef_15tgirt_seq_tools_13cluster_reads_5concensusSeq = {"concensusSeq", (PyCFunction)__pyx_pw_15tgirt_seq_tools_13cluster_reads_5concensusSeq, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15tgirt_seq_tools_13cluster_reads_4concensusSeq};
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_5concensusSeq(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_seq_list = 0;
  PyObject *__pyx_v_in_qual_list = 0;
  float __pyx_v_fraction_threshold;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("concensusSeq (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_seq_list,&__pyx_n_s_in_qual_list,&__pyx_n_s_fraction_threshold,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_seq_list)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_qual_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("concensusSeq", 1, 3, 3, 1); __PYX_ERR(0, 50, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fraction_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("concensusSeq", 1, 3, 3, 2); __PYX_ERR(0, 50, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "concensusSeq") < 0)) __PYX_ERR(0, 50, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_in_seq_list = values[0];
    __pyx_v_in_qual_list = values[1];
    __pyx_v_fraction_threshold = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_fraction_threshold == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 50, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("concensusSeq", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 50, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.concensusSeq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_4concensusSeq(__pyx_self, __pyx_v_in_seq_list, __pyx_v_in_qual_list, __pyx_v_fraction_threshold);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_15tgirt_seq_tools_13cluster_reads_12concensusSeq_2generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "tgirt_seq_tools/cluster_reads.pyx":63
 *         seq_list = np.array(map(list, in_seq_list))
 *         qual_list = np.array(map(list, in_qual_list))
 *         iter_list = ((seq_list[:,pos], qual_list[:,pos], fraction_threshold) for pos in xrange(seq_len))             # <<<<<<<<<<<<<<
 *         concensus_position = imap(voteConcensusBase, iter_list)
 *         bases, quals = zip(*concensus_position)
 */

static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_12concensusSeq_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr *)__pyx_tp_new_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr(__pyx_ptype_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 63, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_15tgirt_seq_tools_13cluster_reads_12concensusSeq_2generator1, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_concensusSeq_locals_genexpr, __pyx_n_s_tgirt_seq_tools_cluster_reads); if (unlikely(!gen)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.concensusSeq.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_15tgirt_seq_tools_13cluster_reads_12concensusSeq_2generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 63, __pyx_L1_error)
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_seq_len;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_cur_scope->__pyx_v_pos = __pyx_t_2;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_seq_list)) { __Pyx_RaiseClosureNameError("seq_list"); __PYX_ERR(0, 63, __pyx_L1_error) }
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_pos); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_slice__2);
    __Pyx_GIVEREF(__pyx_slice__2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_slice__2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetItem(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_seq_list, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_qual_list)) { __Pyx_RaiseClosureNameError("qual_list"); __PYX_ERR(0, 63, __pyx_L1_error) }
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_pos); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_slice__3);
    __Pyx_GIVEREF(__pyx_slice__3);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_slice__3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_GetItem(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_qual_list, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fraction_threshold); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 63, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/cluster_reads.pyx":50
 * 
 * 
 * def concensusSeq(in_seq_list, in_qual_list, float fraction_threshold):             # <<<<<<<<<<<<<<
 *     """given a list of sequences, a list of quality and sequence length.
 *         assertion: all seq in seqlist should have same length (see function: selectSeqLength)
 */

static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_4concensusSeq(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_in_seq_list, PyObject *__pyx_v_in_qual_list, float __pyx_v_fraction_threshold) {
  struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq *__pyx_cur_scope;
  PyObject *__pyx_v_sequence = 0;
  PyObject *__pyx_v_quality = 0;
  PyObject *__pyx_v_iter_list = NULL;
  PyObject *__pyx_v_concensus_position = NULL;
  PyObject *__pyx_v_bases = NULL;
  PyObject *__pyx_v_quals = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  __Pyx_RefNannySetupContext("concensusSeq", 0);
  __pyx_cur_scope = (struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq *)__pyx_tp_new_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq(__pyx_ptype_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 50, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_fraction_threshold = __pyx_v_fraction_threshold;

  /* "tgirt_seq_tools/cluster_reads.pyx":59
 *         str sequence, quality
 * 
 *     if len(in_seq_list) > 1:             # <<<<<<<<<<<<<<
 *         seq_len = len(in_seq_list[0])
 *         seq_list = np.array(map(list, in_seq_list))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_in_seq_list); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 > 1) != 0);
  if (__pyx_t_2) {

    /* "tgirt_seq_tools/cluster_reads.pyx":60
 * 
 *     if len(in_seq_list) > 1:
 *         seq_len = len(in_seq_list[0])             # <<<<<<<<<<<<<<
 *         seq_list = np.array(map(list, in_seq_list))
 *         qual_list = np.array(map(list, in_qual_list))
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_in_seq_list, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 60, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_cur_scope->__pyx_v_seq_len = __pyx_t_1;

    /* "tgirt_seq_tools/cluster_reads.pyx":61
 *     if len(in_seq_list) > 1:
 *         seq_len = len(in_seq_list[0])
 *         seq_list = np.array(map(list, in_seq_list))             # <<<<<<<<<<<<<<
 *         qual_list = np.array(map(list, in_qual_list))
 *         iter_list = ((seq_list[:,pos], qual_list[:,pos], fraction_threshold) for pos in xrange(seq_len))
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)(&PyList_Type)));
    __Pyx_GIVEREF(((PyObject *)(&PyList_Type)));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)(&PyList_Type)));
    __Pyx_INCREF(__pyx_v_in_seq_list);
    __Pyx_GIVEREF(__pyx_v_in_seq_list);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_in_seq_list);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_4, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 61, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_6};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 61, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_6};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 61, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 61, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 61, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_cur_scope->__pyx_v_seq_list = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":62
 *         seq_len = len(in_seq_list[0])
 *         seq_list = np.array(map(list, in_seq_list))
 *         qual_list = np.array(map(list, in_qual_list))             # <<<<<<<<<<<<<<
 *         iter_list = ((seq_list[:,pos], qual_list[:,pos], fraction_threshold) for pos in xrange(seq_len))
 *         concensus_position = imap(voteConcensusBase, iter_list)
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)(&PyList_Type)));
    __Pyx_GIVEREF(((PyObject *)(&PyList_Type)));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)(&PyList_Type)));
    __Pyx_INCREF(__pyx_v_in_qual_list);
    __Pyx_GIVEREF(__pyx_v_in_qual_list);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_in_qual_list);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 62, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 62, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 62, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 62, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 62, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_cur_scope->__pyx_v_qual_list = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":63
 *         seq_list = np.array(map(list, in_seq_list))
 *         qual_list = np.array(map(list, in_qual_list))
 *         iter_list = ((seq_list[:,pos], qual_list[:,pos], fraction_threshold) for pos in xrange(seq_len))             # <<<<<<<<<<<<<<
 *         concensus_position = imap(voteConcensusBase, iter_list)
 *         bases, quals = zip(*concensus_position)
 */
    __pyx_t_3 = __pyx_pf_15tgirt_seq_tools_13cluster_reads_12concensusSeq_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_iter_list = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":64
 *         qual_list = np.array(map(list, in_qual_list))
 *         iter_list = ((seq_list[:,pos], qual_list[:,pos], fraction_threshold) for pos in xrange(seq_len))
 *         concensus_position = imap(voteConcensusBase, iter_list)             # <<<<<<<<<<<<<<
 *         bases, quals = zip(*concensus_position)
 *         sequence = ''.join(list(bases))
 */
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_imap); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_voteConcensusBase); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_v_iter_list};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 64, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_v_iter_list};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 64, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 64, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_8, __pyx_t_4);
      __Pyx_INCREF(__pyx_v_iter_list);
      __Pyx_GIVEREF(__pyx_v_iter_list);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_8, __pyx_v_iter_list);
      __pyx_t_4 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 64, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_concensus_position = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":65
 *         iter_list = ((seq_list[:,pos], qual_list[:,pos], fraction_threshold) for pos in xrange(seq_len))
 *         concensus_position = imap(voteConcensusBase, iter_list)
 *         bases, quals = zip(*concensus_position)             # <<<<<<<<<<<<<<
 *         sequence = ''.join(list(bases))
 *         quality = ''.join(list(quals))
 */
    __pyx_t_3 = PySequence_Tuple(__pyx_v_concensus_position); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
      PyObject* sequence = __pyx_t_7;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 65, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 65, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 65, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_4 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 65, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_4)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_9(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_5 = __pyx_t_9(__pyx_t_4); if (unlikely(!__pyx_t_5)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_4), 2) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 65, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __pyx_v_bases = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_quals = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":66
 *         concensus_position = imap(voteConcensusBase, iter_list)
 *         bases, quals = zip(*concensus_position)
 *         sequence = ''.join(list(bases))             # <<<<<<<<<<<<<<
 *         quality = ''.join(list(quals))
 *     else:
 */
    __pyx_t_7 = PySequence_List(__pyx_v_bases); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyString_Join(__pyx_kp_s__4, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 66, __pyx_L1_error)
    __pyx_v_sequence = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":67
 *         bases, quals = zip(*concensus_position)
 *         sequence = ''.join(list(bases))
 *         quality = ''.join(list(quals))             # <<<<<<<<<<<<<<
 *     else:
 *         sequence = str(in_seq_list[0])
 */
    __pyx_t_5 = PySequence_List(__pyx_v_quals); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyString_Join(__pyx_kp_s__4, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_7)->tp_name), 0))) __PYX_ERR(0, 67, __pyx_L1_error)
    __pyx_v_quality = ((PyObject*)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":59
 *         str sequence, quality
 * 
 *     if len(in_seq_list) > 1:             # <<<<<<<<<<<<<<
 *         seq_len = len(in_seq_list[0])
 *         seq_list = np.array(map(list, in_seq_list))
 */
    goto __pyx_L3;
  }

  /* "tgirt_seq_tools/cluster_reads.pyx":69
 *         quality = ''.join(list(quals))
 *     else:
 *         sequence = str(in_seq_list[0])             # <<<<<<<<<<<<<<
 *         quality = str(in_qual_list[0])
 *     return sequence, quality
 */
  /*else*/ {
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_in_seq_list, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_7)->tp_name), 0))) __PYX_ERR(0, 69, __pyx_L1_error)
    __pyx_v_sequence = ((PyObject*)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":70
 *     else:
 *         sequence = str(in_seq_list[0])
 *         quality = str(in_qual_list[0])             # <<<<<<<<<<<<<<
 *     return sequence, quality
 * 
 */
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_in_qual_list, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_7)->tp_name), 0))) __PYX_ERR(0, 70, __pyx_L1_error)
    __pyx_v_quality = ((PyObject*)__pyx_t_7);
    __pyx_t_7 = 0;
  }
  __pyx_L3:;

  /* "tgirt_seq_tools/cluster_reads.pyx":71
 *         sequence = str(in_seq_list[0])
 *         quality = str(in_qual_list[0])
 *     return sequence, quality             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_v_sequence);
  __Pyx_GIVEREF(__pyx_v_sequence);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_sequence);
  __Pyx_INCREF(__pyx_v_quality);
  __Pyx_GIVEREF(__pyx_v_quality);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_quality);
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "tgirt_seq_tools/cluster_reads.pyx":50
 * 
 * 
 * def concensusSeq(in_seq_list, in_qual_list, float fraction_threshold):             # <<<<<<<<<<<<<<
 *     """given a list of sequences, a list of quality and sequence length.
 *         assertion: all seq in seqlist should have same length (see function: selectSeqLength)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.concensusSeq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sequence);
  __Pyx_XDECREF(__pyx_v_quality);
  __Pyx_XDECREF(__pyx_v_iter_list);
  __Pyx_XDECREF(__pyx_v_concensus_position);
  __Pyx_XDECREF(__pyx_v_bases);
  __Pyx_XDECREF(__pyx_v_quals);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/cluster_reads.pyx":74
 * 
 * 
 * cpdef int hamming_distance(str expected_constant, str constant_region):             # <<<<<<<<<<<<<<
 *     '''
 *     Calculating hamming distance from two strings
 */

static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_7hamming_distance(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_15tgirt_seq_tools_13cluster_reads_hamming_distance(PyObject *__pyx_v_expected_constant, PyObject *__pyx_v_constant_region, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_i = 0;
  PyObject *__pyx_v_j = 0;
  int __pyx_v_hamming;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("hamming_distance", 0);

  /* "tgirt_seq_tools/cluster_reads.pyx":90
 *     cdef:
 *         str i, j
 *         int hamming = 0             # <<<<<<<<<<<<<<
 * 
 *     for i, j in zip(expected_constant, constant_region):
 */
  __pyx_v_hamming = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":92
 *         int hamming = 0
 * 
 *     for i, j in zip(expected_constant, constant_region):             # <<<<<<<<<<<<<<
 *         if i != j:
 *             hamming += 1
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_expected_constant);
  __Pyx_GIVEREF(__pyx_v_expected_constant);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_expected_constant);
  __Pyx_INCREF(__pyx_v_constant_region);
  __Pyx_GIVEREF(__pyx_v_constant_region);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_constant_region);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 92, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 92, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 92, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 92, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 92, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 92, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 92, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 92, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 92, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    if (!(likely(PyString_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 92, __pyx_L1_error)
    if (!(likely(PyString_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 92, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_i, ((PyObject*)__pyx_t_5));
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_j, ((PyObject*)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":93
 * 
 *     for i, j in zip(expected_constant, constant_region):
 *         if i != j:             # <<<<<<<<<<<<<<
 *             hamming += 1
 * 
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_i, __pyx_v_j, Py_NE)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 93, __pyx_L1_error)
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (__pyx_t_10) {

      /* "tgirt_seq_tools/cluster_reads.pyx":94
 *     for i, j in zip(expected_constant, constant_region):
 *         if i != j:
 *             hamming += 1             # <<<<<<<<<<<<<<
 * 
 *     return hamming
 */
      __pyx_v_hamming = (__pyx_v_hamming + 1);

      /* "tgirt_seq_tools/cluster_reads.pyx":93
 * 
 *     for i, j in zip(expected_constant, constant_region):
 *         if i != j:             # <<<<<<<<<<<<<<
 *             hamming += 1
 * 
 */
    }

    /* "tgirt_seq_tools/cluster_reads.pyx":92
 *         int hamming = 0
 * 
 *     for i, j in zip(expected_constant, constant_region):             # <<<<<<<<<<<<<<
 *         if i != j:
 *             hamming += 1
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":96
 *             hamming += 1
 * 
 *     return hamming             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_hamming;
  goto __pyx_L0;

  /* "tgirt_seq_tools/cluster_reads.pyx":74
 * 
 * 
 * cpdef int hamming_distance(str expected_constant, str constant_region):             # <<<<<<<<<<<<<<
 *     '''
 *     Calculating hamming distance from two strings
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("tgirt_seq_tools.cluster_reads.hamming_distance", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_7hamming_distance(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15tgirt_seq_tools_13cluster_reads_6hamming_distance[] = "\n    Calculating hamming distance from two strings\n    usage: hamming_distance(string1, string2)\n    ==============================\n    Parameter:\n    string1\n    string2\n    has to be same length\n    return:\n    edit distance: the edit distance between two string\n    ===============================\n    ";
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_7hamming_distance(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_expected_constant = 0;
  PyObject *__pyx_v_constant_region = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hamming_distance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_expected_constant,&__pyx_n_s_constant_region,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_expected_constant)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_constant_region)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hamming_distance", 1, 2, 2, 1); __PYX_ERR(0, 74, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "hamming_distance") < 0)) __PYX_ERR(0, 74, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_expected_constant = ((PyObject*)values[0]);
    __pyx_v_constant_region = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hamming_distance", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 74, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.hamming_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_expected_constant), (&PyString_Type), 1, "expected_constant", 1))) __PYX_ERR(0, 74, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_constant_region), (&PyString_Type), 1, "constant_region", 1))) __PYX_ERR(0, 74, __pyx_L1_error)
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_6hamming_distance(__pyx_self, __pyx_v_expected_constant, __pyx_v_constant_region);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_6hamming_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_expected_constant, PyObject *__pyx_v_constant_region) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("hamming_distance", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_15tgirt_seq_tools_13cluster_reads_hamming_distance(__pyx_v_expected_constant, __pyx_v_constant_region, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.hamming_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/cluster_reads.pyx":100
 * 
 * 
 * def plotBCdistribution(barcode_family_count, outputprefix):             # <<<<<<<<<<<<<<
 *     #plotting inspection of barcode distribution
 *     barcode_family_count = np.array(barcode_family_count, dtype=np.int64)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_9plotBCdistribution(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15tgirt_seq_tools_13cluster_reads_9plotBCdistribution = {"plotBCdistribution", (PyCFunction)__pyx_pw_15tgirt_seq_tools_13cluster_reads_9plotBCdistribution, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_9plotBCdistribution(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_barcode_family_count = 0;
  PyObject *__pyx_v_outputprefix = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("plotBCdistribution (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_barcode_family_count,&__pyx_n_s_outputprefix,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_barcode_family_count)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_outputprefix)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("plotBCdistribution", 1, 2, 2, 1); __PYX_ERR(0, 100, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "plotBCdistribution") < 0)) __PYX_ERR(0, 100, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_barcode_family_count = values[0];
    __pyx_v_outputprefix = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("plotBCdistribution", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 100, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.plotBCdistribution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_8plotBCdistribution(__pyx_self, __pyx_v_barcode_family_count, __pyx_v_outputprefix);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_8plotBCdistribution(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_barcode_family_count, PyObject *__pyx_v_outputprefix) {
  PyObject *__pyx_v_hist = NULL;
  PyObject *__pyx_v_bins = NULL;
  PyObject *__pyx_v_centers = NULL;
  PyObject *__pyx_v_width = NULL;
  PyObject *__pyx_v_figurename = NULL;
  PyObject *__pyx_v_fig = NULL;
  PyObject *__pyx_v_ax = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  __Pyx_RefNannySetupContext("plotBCdistribution", 0);
  __Pyx_INCREF(__pyx_v_barcode_family_count);

  /* "tgirt_seq_tools/cluster_reads.pyx":102
 * def plotBCdistribution(barcode_family_count, outputprefix):
 *     #plotting inspection of barcode distribution
 *     barcode_family_count = np.array(barcode_family_count, dtype=np.int64)             # <<<<<<<<<<<<<<
 *     hist, bins = np.histogram(barcode_family_count[barcode_family_count<50],bins=50)
 *     centers = (bins[:-1] + bins[1:]) / 2
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_barcode_family_count);
  __Pyx_GIVEREF(__pyx_v_barcode_family_count);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_barcode_family_count);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_barcode_family_count, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":103
 *     #plotting inspection of barcode distribution
 *     barcode_family_count = np.array(barcode_family_count, dtype=np.int64)
 *     hist, bins = np.histogram(barcode_family_count[barcode_family_count<50],bins=50)             # <<<<<<<<<<<<<<
 *     centers = (bins[:-1] + bins[1:]) / 2
 *     width = 0.7 * (bins[1] - bins[0])
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_histogram); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_barcode_family_count, __pyx_int_50, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 103, __pyx_L1_error)
  __pyx_t_1 = PyObject_GetItem(__pyx_v_barcode_family_count, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_bins, __pyx_int_50) < 0) __PYX_ERR(0, 103, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
    PyObject* sequence = __pyx_t_2;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 103, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_6(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_5 = __pyx_t_6(__pyx_t_3); if (unlikely(!__pyx_t_5)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_3), 2) < 0) __PYX_ERR(0, 103, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 103, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_hist = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_bins = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":104
 *     barcode_family_count = np.array(barcode_family_count, dtype=np.int64)
 *     hist, bins = np.histogram(barcode_family_count[barcode_family_count<50],bins=50)
 *     centers = (bins[:-1] + bins[1:]) / 2             # <<<<<<<<<<<<<<
 *     width = 0.7 * (bins[1] - bins[0])
 *     figurename = '%s.pdf' %(outputprefix)
 */
  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_v_bins, 0, -1L, NULL, NULL, &__pyx_slice__5, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetSlice(__pyx_v_bins, 1, 0, NULL, NULL, &__pyx_slice__6, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_int_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_centers = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":105
 *     hist, bins = np.histogram(barcode_family_count[barcode_family_count<50],bins=50)
 *     centers = (bins[:-1] + bins[1:]) / 2
 *     width = 0.7 * (bins[1] - bins[0])             # <<<<<<<<<<<<<<
 *     figurename = '%s.pdf' %(outputprefix)
 *     fig = plt.figure()
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_bins, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_bins, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_float_0_7, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_width = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":106
 *     centers = (bins[:-1] + bins[1:]) / 2
 *     width = 0.7 * (bins[1] - bins[0])
 *     figurename = '%s.pdf' %(outputprefix)             # <<<<<<<<<<<<<<
 *     fig = plt.figure()
 *     ax = fig.add_subplot(111)
 */
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_pdf, __pyx_v_outputprefix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_figurename = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":107
 *     width = 0.7 * (bins[1] - bins[0])
 *     figurename = '%s.pdf' %(outputprefix)
 *     fig = plt.figure()             # <<<<<<<<<<<<<<
 *     ax = fig.add_subplot(111)
 *     ax.bar(centers,hist,align='center',width=width)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_plt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_figure); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_fig = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":108
 *     figurename = '%s.pdf' %(outputprefix)
 *     fig = plt.figure()
 *     ax = fig.add_subplot(111)             # <<<<<<<<<<<<<<
 *     ax.bar(centers,hist,align='center',width=width)
 *     ax.set_xlabel("Number of occurence")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_fig, __pyx_n_s_add_subplot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ax = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":109
 *     fig = plt.figure()
 *     ax = fig.add_subplot(111)
 *     ax.bar(centers,hist,align='center',width=width)             # <<<<<<<<<<<<<<
 *     ax.set_xlabel("Number of occurence")
 *     ax.set_ylabel("Count of tags")
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_bar); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_centers);
  __Pyx_GIVEREF(__pyx_v_centers);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_centers);
  __Pyx_INCREF(__pyx_v_hist);
  __Pyx_GIVEREF(__pyx_v_hist);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_hist);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_align, __pyx_n_s_center) < 0) __PYX_ERR(0, 109, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_width, __pyx_v_width) < 0) __PYX_ERR(0, 109, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":110
 *     ax = fig.add_subplot(111)
 *     ax.bar(centers,hist,align='center',width=width)
 *     ax.set_xlabel("Number of occurence")             # <<<<<<<<<<<<<<
 *     ax.set_ylabel("Count of tags")
 *     ax.set_yscale('log',nonposy='clip')
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_set_xlabel); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":111
 *     ax.bar(centers,hist,align='center',width=width)
 *     ax.set_xlabel("Number of occurence")
 *     ax.set_ylabel("Count of tags")             # <<<<<<<<<<<<<<
 *     ax.set_yscale('log',nonposy='clip')
 *     ax.set_title(outputprefix.split('/')[-1])
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_set_ylabel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":112
 *     ax.set_xlabel("Number of occurence")
 *     ax.set_ylabel("Count of tags")
 *     ax.set_yscale('log',nonposy='clip')             # <<<<<<<<<<<<<<
 *     ax.set_title(outputprefix.split('/')[-1])
 *     ax.spines['right'].set_visible(False)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_set_yscale); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_nonposy, __pyx_n_s_clip) < 0) __PYX_ERR(0, 112, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__10, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":113
 *     ax.set_ylabel("Count of tags")
 *     ax.set_yscale('log',nonposy='clip')
 *     ax.set_title(outputprefix.split('/')[-1])             # <<<<<<<<<<<<<<
 *     ax.spines['right'].set_visible(False)
 *     ax.spines['top'].set_visible(False)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_set_title); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_outputprefix, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":114
 *     ax.set_yscale('log',nonposy='clip')
 *     ax.set_title(outputprefix.split('/')[-1])
 *     ax.spines['right'].set_visible(False)             # <<<<<<<<<<<<<<
 *     ax.spines['top'].set_visible(False)
 *     fig.savefig(figurename)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_spines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_right); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_set_visible); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":115
 *     ax.set_title(outputprefix.split('/')[-1])
 *     ax.spines['right'].set_visible(False)
 *     ax.spines['top'].set_visible(False)             # <<<<<<<<<<<<<<
 *     fig.savefig(figurename)
 *     stderr.write('Plotted %s.\n' %figurename)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_spines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_n_s_top); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_set_visible); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":116
 *     ax.spines['right'].set_visible(False)
 *     ax.spines['top'].set_visible(False)
 *     fig.savefig(figurename)             # <<<<<<<<<<<<<<
 *     stderr.write('Plotted %s.\n' %figurename)
 *     return 0
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_fig, __pyx_n_s_savefig); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_figurename); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_figurename};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_figurename};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_figurename);
      __Pyx_GIVEREF(__pyx_v_figurename);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_figurename);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":117
 *     ax.spines['top'].set_visible(False)
 *     fig.savefig(figurename)
 *     stderr.write('Plotted %s.\n' %figurename)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_stderr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Plotted_s, __pyx_v_figurename); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":118
 *     fig.savefig(figurename)
 *     stderr.write('Plotted %s.\n' %figurename)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * def concensusPairs(table, float fraction_threshold):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_int_0);
  __pyx_r = __pyx_int_0;
  goto __pyx_L0;

  /* "tgirt_seq_tools/cluster_reads.pyx":100
 * 
 * 
 * def plotBCdistribution(barcode_family_count, outputprefix):             # <<<<<<<<<<<<<<
 *     #plotting inspection of barcode distribution
 *     barcode_family_count = np.array(barcode_family_count, dtype=np.int64)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.plotBCdistribution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_hist);
  __Pyx_XDECREF(__pyx_v_bins);
  __Pyx_XDECREF(__pyx_v_centers);
  __Pyx_XDECREF(__pyx_v_width);
  __Pyx_XDECREF(__pyx_v_figurename);
  __Pyx_XDECREF(__pyx_v_fig);
  __Pyx_XDECREF(__pyx_v_ax);
  __Pyx_XDECREF(__pyx_v_barcode_family_count);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/cluster_reads.pyx":120
 *     return 0
 * 
 * def concensusPairs(table, float fraction_threshold):             # <<<<<<<<<<<<<<
 *     """ given a pair of reads as defined as the class: seqRecord
 *     return concensus sequence and mean quality of the pairs,
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_11concensusPairs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15tgirt_seq_tools_13cluster_reads_10concensusPairs[] = " given a pair of reads as defined as the class: seqRecord\n    return concensus sequence and mean quality of the pairs,\n        as well as the number of reads that supports the concnesus pairs\n    see function: concensusSeq, calculateConcensusBase\n    ";
static PyMethodDef __pyx_mdef_15tgirt_seq_tools_13cluster_reads_11concensusPairs = {"concensusPairs", (PyCFunction)__pyx_pw_15tgirt_seq_tools_13cluster_reads_11concensusPairs, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15tgirt_seq_tools_13cluster_reads_10concensusPairs};
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_11concensusPairs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_table = 0;
  float __pyx_v_fraction_threshold;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("concensusPairs (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_table,&__pyx_n_s_fraction_threshold,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_table)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fraction_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("concensusPairs", 1, 2, 2, 1); __PYX_ERR(0, 120, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "concensusPairs") < 0)) __PYX_ERR(0, 120, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_table = values[0];
    __pyx_v_fraction_threshold = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_fraction_threshold == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 120, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("concensusPairs", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 120, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.concensusPairs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_10concensusPairs(__pyx_self, __pyx_v_table, __pyx_v_fraction_threshold);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_10concensusPairs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_table, float __pyx_v_fraction_threshold) {
  PyObject *__pyx_v_sequence_left = 0;
  PyObject *__pyx_v_quality_left = 0;
  PyObject *__pyx_v_sequence_right = 0;
  PyObject *__pyx_v_quality_right = 0;
  PyObject *__pyx_v_seq_left_list = NULL;
  PyObject *__pyx_v_qual_left_list = NULL;
  PyObject *__pyx_v_seq_right_list = NULL;
  PyObject *__pyx_v_qual_right_list = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  __Pyx_RefNannySetupContext("concensusPairs", 0);

  /* "tgirt_seq_tools/cluster_reads.pyx":131
 *         str sequence_right, quality_right
 * 
 *     seq_left_list, qual_left_list = table[:,0], table[:,2]             # <<<<<<<<<<<<<<
 *     seq_right_list, qual_right_list = table[:,1], table[:,3]
 * 
 */
  __pyx_t_1 = PyObject_GetItem(__pyx_v_table, __pyx_tuple__16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_v_table, __pyx_tuple__18); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_seq_left_list = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_qual_left_list = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":132
 * 
 *     seq_left_list, qual_left_list = table[:,0], table[:,2]
 *     seq_right_list, qual_right_list = table[:,1], table[:,3]             # <<<<<<<<<<<<<<
 * 
 *     # get concensus left reads first
 */
  __pyx_t_2 = PyObject_GetItem(__pyx_v_table, __pyx_tuple__20); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetItem(__pyx_v_table, __pyx_tuple__22); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_seq_right_list = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_qual_right_list = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":135
 * 
 *     # get concensus left reads first
 *     sequence_left, quality_left = concensusSeq(seq_left_list, qual_left_list, fraction_threshold)             # <<<<<<<<<<<<<<
 *     # get concensus right reads
 *     sequence_right, quality_right = concensusSeq(seq_right_list, qual_right_list, fraction_threshold)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_concensusSeq); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_fraction_threshold); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_seq_left_list, __pyx_v_qual_left_list, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_seq_left_list, __pyx_v_qual_left_list, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_seq_left_list);
    __Pyx_GIVEREF(__pyx_v_seq_left_list);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_seq_left_list);
    __Pyx_INCREF(__pyx_v_qual_left_list);
    __Pyx_GIVEREF(__pyx_v_qual_left_list);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_qual_left_list);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 135, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_6);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_7(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_6 = __pyx_t_7(__pyx_t_3); if (unlikely(!__pyx_t_6)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_6);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_3), 2) < 0) __PYX_ERR(0, 135, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 135, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 135, __pyx_L1_error)
  if (!(likely(PyString_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 135, __pyx_L1_error)
  __pyx_v_sequence_left = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_quality_left = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":137
 *     sequence_left, quality_left = concensusSeq(seq_left_list, qual_left_list, fraction_threshold)
 *     # get concensus right reads
 *     sequence_right, quality_right = concensusSeq(seq_right_list, qual_right_list, fraction_threshold)             # <<<<<<<<<<<<<<
 *     return sequence_left, quality_left, sequence_right, quality_right
 * 
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_concensusSeq); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_fraction_threshold); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_seq_right_list, __pyx_v_qual_right_list, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_seq_right_list, __pyx_v_qual_right_list, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_seq_right_list);
    __Pyx_GIVEREF(__pyx_v_seq_right_list);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_v_seq_right_list);
    __Pyx_INCREF(__pyx_v_qual_right_list);
    __Pyx_GIVEREF(__pyx_v_qual_right_list);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, __pyx_v_qual_right_list);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_5, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 137, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext;
    index = 0; __pyx_t_6 = __pyx_t_7(__pyx_t_2); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_6);
    index = 1; __pyx_t_4 = __pyx_t_7(__pyx_t_2); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_2), 2) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 137, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  if (!(likely(PyString_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 137, __pyx_L1_error)
  if (!(likely(PyString_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 137, __pyx_L1_error)
  __pyx_v_sequence_right = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_v_quality_right = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":138
 *     # get concensus right reads
 *     sequence_right, quality_right = concensusSeq(seq_right_list, qual_right_list, fraction_threshold)
 *     return sequence_left, quality_left, sequence_right, quality_right             # <<<<<<<<<<<<<<
 * 
 * def dictToJson(barcode_dict, json_file):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_sequence_left);
  __Pyx_GIVEREF(__pyx_v_sequence_left);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_sequence_left);
  __Pyx_INCREF(__pyx_v_quality_left);
  __Pyx_GIVEREF(__pyx_v_quality_left);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_quality_left);
  __Pyx_INCREF(__pyx_v_sequence_right);
  __Pyx_GIVEREF(__pyx_v_sequence_right);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_sequence_right);
  __Pyx_INCREF(__pyx_v_quality_right);
  __Pyx_GIVEREF(__pyx_v_quality_right);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_quality_right);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tgirt_seq_tools/cluster_reads.pyx":120
 *     return 0
 * 
 * def concensusPairs(table, float fraction_threshold):             # <<<<<<<<<<<<<<
 *     """ given a pair of reads as defined as the class: seqRecord
 *     return concensus sequence and mean quality of the pairs,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.concensusPairs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sequence_left);
  __Pyx_XDECREF(__pyx_v_quality_left);
  __Pyx_XDECREF(__pyx_v_sequence_right);
  __Pyx_XDECREF(__pyx_v_quality_right);
  __Pyx_XDECREF(__pyx_v_seq_left_list);
  __Pyx_XDECREF(__pyx_v_qual_left_list);
  __Pyx_XDECREF(__pyx_v_seq_right_list);
  __Pyx_XDECREF(__pyx_v_qual_right_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/cluster_reads.pyx":140
 *     return sequence_left, quality_left, sequence_right, quality_right
 * 
 * def dictToJson(barcode_dict, json_file):             # <<<<<<<<<<<<<<
 *     with open(json_file,'w') as f:
 *         [f.write(cjson.encode(items) + '\n') for items in barcode_dict.iteritems()]
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_13dictToJson(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15tgirt_seq_tools_13cluster_reads_13dictToJson = {"dictToJson", (PyCFunction)__pyx_pw_15tgirt_seq_tools_13cluster_reads_13dictToJson, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_13dictToJson(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_barcode_dict = 0;
  PyObject *__pyx_v_json_file = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dictToJson (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_barcode_dict,&__pyx_n_s_json_file,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_barcode_dict)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_json_file)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dictToJson", 1, 2, 2, 1); __PYX_ERR(0, 140, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dictToJson") < 0)) __PYX_ERR(0, 140, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_barcode_dict = values[0];
    __pyx_v_json_file = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dictToJson", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 140, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.dictToJson", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_12dictToJson(__pyx_self, __pyx_v_barcode_dict, __pyx_v_json_file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_12dictToJson(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_barcode_dict, PyObject *__pyx_v_json_file) {
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_items = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_t_18;
  int __pyx_t_19;
  __Pyx_RefNannySetupContext("dictToJson", 0);

  /* "tgirt_seq_tools/cluster_reads.pyx":141
 * 
 * def dictToJson(barcode_dict, json_file):
 *     with open(json_file,'w') as f:             # <<<<<<<<<<<<<<
 *         [f.write(cjson.encode(items) + '\n') for items in barcode_dict.iteritems()]
 *     stderr.write('written %s' %(json_file) + '\n')
 */
  /*with:*/ {
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_json_file);
    __Pyx_GIVEREF(__pyx_v_json_file);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_json_file);
    __Pyx_INCREF(__pyx_n_s_w);
    __Pyx_GIVEREF(__pyx_n_s_w);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_w);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 141, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L3_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        /*try:*/ {
          __pyx_v_f = __pyx_t_4;
          __pyx_t_4 = 0;

          /* "tgirt_seq_tools/cluster_reads.pyx":142
 * def dictToJson(barcode_dict, json_file):
 *     with open(json_file,'w') as f:
 *         [f.write(cjson.encode(items) + '\n') for items in barcode_dict.iteritems()]             # <<<<<<<<<<<<<<
 *     stderr.write('written %s' %(json_file) + '\n')
 *     return 0
 */
          __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 142, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_9 = 0;
          if (unlikely(__pyx_v_barcode_dict == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
            __PYX_ERR(0, 142, __pyx_L7_error)
          }
          __pyx_t_1 = __Pyx_dict_iterator(__pyx_v_barcode_dict, 0, __pyx_n_s_iteritems, (&__pyx_t_10), (&__pyx_t_11)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2);
          __pyx_t_2 = __pyx_t_1;
          __pyx_t_1 = 0;
          while (1) {
            __pyx_t_12 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_10, &__pyx_t_9, NULL, NULL, &__pyx_t_1, __pyx_t_11);
            if (unlikely(__pyx_t_12 == 0)) break;
            if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 142, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_XDECREF_SET(__pyx_v_items, __pyx_t_1);
            __pyx_t_1 = 0;
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 142, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_14 = __Pyx_GetModuleGlobalName(__pyx_n_s_cjson); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 142, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_encode); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 142, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_14 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
              __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_15);
              if (likely(__pyx_t_14)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                __Pyx_INCREF(__pyx_t_14);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_15, function);
              }
            }
            if (!__pyx_t_14) {
              __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_v_items); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 142, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_13);
            } else {
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_15)) {
                PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_v_items};
                __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_15, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 142, __pyx_L7_error)
                __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
                __Pyx_GOTREF(__pyx_t_13);
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_15)) {
                PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_v_items};
                __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_15, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 142, __pyx_L7_error)
                __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
                __Pyx_GOTREF(__pyx_t_13);
              } else
              #endif
              {
                __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 142, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_16);
                __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_14); __pyx_t_14 = NULL;
                __Pyx_INCREF(__pyx_v_items);
                __Pyx_GIVEREF(__pyx_v_items);
                PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_v_items);
                __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_16, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 142, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_13);
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              }
            }
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __pyx_t_15 = PyNumber_Add(__pyx_t_13, __pyx_kp_s__23); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 142, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_13 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_13)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_13);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
              }
            }
            if (!__pyx_t_13) {
              __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L7_error)
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_GOTREF(__pyx_t_1);
            } else {
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_5)) {
                PyObject *__pyx_temp[2] = {__pyx_t_13, __pyx_t_15};
                __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L7_error)
                __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
                PyObject *__pyx_temp[2] = {__pyx_t_13, __pyx_t_15};
                __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L7_error)
                __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              } else
              #endif
              {
                __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 142, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_16);
                __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_13); __pyx_t_13 = NULL;
                __Pyx_GIVEREF(__pyx_t_15);
                PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_t_15);
                __pyx_t_15 = 0;
                __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              }
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 142, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "tgirt_seq_tools/cluster_reads.pyx":141
 * 
 * def dictToJson(barcode_dict, json_file):
 *     with open(json_file,'w') as f:             # <<<<<<<<<<<<<<
 *         [f.write(cjson.encode(items) + '\n') for items in barcode_dict.iteritems()]
 *     stderr.write('written %s' %(json_file) + '\n')
 */
        }
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L14_try_end;
        __pyx_L7_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.dictToJson", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_2, &__pyx_t_1) < 0) __PYX_ERR(0, 141, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_5 = PyTuple_Pack(3, __pyx_t_4, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 141, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 141, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_18 = __Pyx_PyObject_IsTrue(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (__pyx_t_18 < 0) __PYX_ERR(0, 141, __pyx_L9_except_error)
          __pyx_t_19 = ((!(__pyx_t_18 != 0)) != 0);
          if (__pyx_t_19) {
            __Pyx_GIVEREF(__pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_XGIVEREF(__pyx_t_1);
            __Pyx_ErrRestoreWithState(__pyx_t_4, __pyx_t_2, __pyx_t_1);
            __pyx_t_4 = 0; __pyx_t_2 = 0; __pyx_t_1 = 0; 
            __PYX_ERR(0, 141, __pyx_L9_except_error)
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        __pyx_L14_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_3) {
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__24, NULL);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 141, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L20;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L1_error;
    __pyx_L20:;
  }

  /* "tgirt_seq_tools/cluster_reads.pyx":143
 *     with open(json_file,'w') as f:
 *         [f.write(cjson.encode(items) + '\n') for items in barcode_dict.iteritems()]
 *     stderr.write('written %s' %(json_file) + '\n')             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_stderr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_write); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_written_s, __pyx_v_json_file); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__23); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 143, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":144
 *         [f.write(cjson.encode(items) + '\n') for items in barcode_dict.iteritems()]
 *     stderr.write('written %s' %(json_file) + '\n')
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * def errorFreeReads(int min_family_member_count, float fraction_threshold, str json_record):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_int_0);
  __pyx_r = __pyx_int_0;
  goto __pyx_L0;

  /* "tgirt_seq_tools/cluster_reads.pyx":140
 *     return sequence_left, quality_left, sequence_right, quality_right
 * 
 * def dictToJson(barcode_dict, json_file):             # <<<<<<<<<<<<<<
 *     with open(json_file,'w') as f:
 *         [f.write(cjson.encode(items) + '\n') for items in barcode_dict.iteritems()]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.dictToJson", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_items);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/cluster_reads.pyx":146
 *     return 0
 * 
 * def errorFreeReads(int min_family_member_count, float fraction_threshold, str json_record):             # <<<<<<<<<<<<<<
 *     """
 *     main function for getting concensus sequences from read clusters.
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_15errorFreeReads(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15tgirt_seq_tools_13cluster_reads_14errorFreeReads[] = "\n    main function for getting concensus sequences from read clusters.\n    return  a pair of concensus reads with a 4-line fastq format\n    see functions: 1. filterRead,\n                  2. concensusPairs,\n                  3. calculateConcensusBase\n    ";
static PyMethodDef __pyx_mdef_15tgirt_seq_tools_13cluster_reads_15errorFreeReads = {"errorFreeReads", (PyCFunction)__pyx_pw_15tgirt_seq_tools_13cluster_reads_15errorFreeReads, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15tgirt_seq_tools_13cluster_reads_14errorFreeReads};
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_15errorFreeReads(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_min_family_member_count;
  float __pyx_v_fraction_threshold;
  PyObject *__pyx_v_json_record = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("errorFreeReads (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_min_family_member_count,&__pyx_n_s_fraction_threshold,&__pyx_n_s_json_record,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_family_member_count)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fraction_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("errorFreeReads", 1, 3, 3, 1); __PYX_ERR(0, 146, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_json_record)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("errorFreeReads", 1, 3, 3, 2); __PYX_ERR(0, 146, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "errorFreeReads") < 0)) __PYX_ERR(0, 146, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_min_family_member_count = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_min_family_member_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 146, __pyx_L3_error)
    __pyx_v_fraction_threshold = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_fraction_threshold == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 146, __pyx_L3_error)
    __pyx_v_json_record = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("errorFreeReads", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 146, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.errorFreeReads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_json_record), (&PyString_Type), 1, "json_record", 1))) __PYX_ERR(0, 146, __pyx_L1_error)
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_14errorFreeReads(__pyx_self, __pyx_v_min_family_member_count, __pyx_v_fraction_threshold, __pyx_v_json_record);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_14errorFreeReads(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_min_family_member_count, float __pyx_v_fraction_threshold, PyObject *__pyx_v_json_record) {
  PyObject *__pyx_v_index = 0;
  int __pyx_v_member_count;
  PyObject *__pyx_v_sequence_left = 0;
  PyObject *__pyx_v_quality_left = 0;
  PyObject *__pyx_v_sequence_right = 0;
  PyObject *__pyx_v_quality_right = 0;
  PyObject *__pyx_v_left_record = 0;
  PyObject *__pyx_v_right_record = 0;
  PyObject *__pyx_v_record = NULL;
  PyObject *__pyx_v_table = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  __Pyx_RefNannySetupContext("errorFreeReads", 0);

  /* "tgirt_seq_tools/cluster_reads.pyx":162
 *         str left_record, right_record
 * 
 *     record = cjson.decode(json_record)             # <<<<<<<<<<<<<<
 *     index = record[0]
 *     table = np.array(record[1])
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_cjson); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_decode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_json_record); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_json_record};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_json_record};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_v_json_record);
      __Pyx_GIVEREF(__pyx_v_json_record);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_json_record);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_record = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":163
 * 
 *     record = cjson.decode(json_record)
 *     index = record[0]             # <<<<<<<<<<<<<<
 *     table = np.array(record[1])
 *     member_count = table.shape[0]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_record, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 163, __pyx_L1_error)
  __pyx_v_index = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":164
 *     record = cjson.decode(json_record)
 *     index = record[0]
 *     table = np.array(record[1])             # <<<<<<<<<<<<<<
 *     member_count = table.shape[0]
 *     if member_count >= min_family_member_count:
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_record, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 164, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_table = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":165
 *     index = record[0]
 *     table = np.array(record[1])
 *     member_count = table.shape[0]             # <<<<<<<<<<<<<<
 *     if member_count >= min_family_member_count:
 *         sequence_left, quality_left, sequence_right, quality_right = concensusPairs(table, fraction_threshold)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_table, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_member_count = __pyx_t_6;

  /* "tgirt_seq_tools/cluster_reads.pyx":166
 *     table = np.array(record[1])
 *     member_count = table.shape[0]
 *     if member_count >= min_family_member_count:             # <<<<<<<<<<<<<<
 *         sequence_left, quality_left, sequence_right, quality_right = concensusPairs(table, fraction_threshold)
 *         left_record = '%s_%i_readCluster\n%s\n+\n%s\n' %(index, member_count, sequence_left, quality_left)
 */
  __pyx_t_7 = ((__pyx_v_member_count >= __pyx_v_min_family_member_count) != 0);
  if (__pyx_t_7) {

    /* "tgirt_seq_tools/cluster_reads.pyx":167
 *     member_count = table.shape[0]
 *     if member_count >= min_family_member_count:
 *         sequence_left, quality_left, sequence_right, quality_right = concensusPairs(table, fraction_threshold)             # <<<<<<<<<<<<<<
 *         left_record = '%s_%i_readCluster\n%s\n+\n%s\n' %(index, member_count, sequence_left, quality_left)
 *         right_record = '%s_%i_readCluster\n%s\n+\n%s\n' %(index, member_count, sequence_right, quality_right)
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_concensusPairs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_fraction_threshold); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_table, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_table, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_table);
      __Pyx_GIVEREF(__pyx_v_table);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_6, __pyx_v_table);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_6, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 167, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 3); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 3); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_2,&__pyx_t_5,&__pyx_t_3};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 167, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_2,&__pyx_t_5,&__pyx_t_3};
      __pyx_t_8 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      for (index=0; index < 4; index++) {
        PyObject* item = __pyx_t_9(__pyx_t_8); if (unlikely(!item)) goto __pyx_L4_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 4) < 0) __PYX_ERR(0, 167, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 167, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!(likely(PyString_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!(likely(PyString_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 167, __pyx_L1_error)
    __pyx_v_sequence_left = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_v_quality_left = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_v_sequence_right = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_quality_right = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":168
 *     if member_count >= min_family_member_count:
 *         sequence_left, quality_left, sequence_right, quality_right = concensusPairs(table, fraction_threshold)
 *         left_record = '%s_%i_readCluster\n%s\n+\n%s\n' %(index, member_count, sequence_left, quality_left)             # <<<<<<<<<<<<<<
 *         right_record = '%s_%i_readCluster\n%s\n+\n%s\n' %(index, member_count, sequence_right, quality_right)
 *         return left_record, right_record
 */
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_member_count); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_sequence_left);
    __Pyx_GIVEREF(__pyx_v_sequence_left);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_sequence_left);
    __Pyx_INCREF(__pyx_v_quality_left);
    __Pyx_GIVEREF(__pyx_v_quality_left);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_quality_left);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_s__i_readCluster_s_s, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_4))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 168, __pyx_L1_error)
    __pyx_v_left_record = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":169
 *         sequence_left, quality_left, sequence_right, quality_right = concensusPairs(table, fraction_threshold)
 *         left_record = '%s_%i_readCluster\n%s\n+\n%s\n' %(index, member_count, sequence_left, quality_left)
 *         right_record = '%s_%i_readCluster\n%s\n+\n%s\n' %(index, member_count, sequence_right, quality_right)             # <<<<<<<<<<<<<<
 *         return left_record, right_record
 *     else:
 */
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_member_count); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_sequence_right);
    __Pyx_GIVEREF(__pyx_v_sequence_right);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_sequence_right);
    __Pyx_INCREF(__pyx_v_quality_right);
    __Pyx_GIVEREF(__pyx_v_quality_right);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_quality_right);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_s__i_readCluster_s_s, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_4))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 169, __pyx_L1_error)
    __pyx_v_right_record = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":170
 *         left_record = '%s_%i_readCluster\n%s\n+\n%s\n' %(index, member_count, sequence_left, quality_left)
 *         right_record = '%s_%i_readCluster\n%s\n+\n%s\n' %(index, member_count, sequence_right, quality_right)
 *         return left_record, right_record             # <<<<<<<<<<<<<<
 *     else:
 *         return 'No'
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_left_record);
    __Pyx_GIVEREF(__pyx_v_left_record);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_left_record);
    __Pyx_INCREF(__pyx_v_right_record);
    __Pyx_GIVEREF(__pyx_v_right_record);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_right_record);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "tgirt_seq_tools/cluster_reads.pyx":166
 *     table = np.array(record[1])
 *     member_count = table.shape[0]
 *     if member_count >= min_family_member_count:             # <<<<<<<<<<<<<<
 *         sequence_left, quality_left, sequence_right, quality_right = concensusPairs(table, fraction_threshold)
 *         left_record = '%s_%i_readCluster\n%s\n+\n%s\n' %(index, member_count, sequence_left, quality_left)
 */
  }

  /* "tgirt_seq_tools/cluster_reads.pyx":172
 *         return left_record, right_record
 *     else:
 *         return 'No'             # <<<<<<<<<<<<<<
 * 
 * def writeSeqToFiles(read1, read2, output_cluster_count, result):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_No);
    __pyx_r = __pyx_n_s_No;
    goto __pyx_L0;
  }

  /* "tgirt_seq_tools/cluster_reads.pyx":146
 *     return 0
 * 
 * def errorFreeReads(int min_family_member_count, float fraction_threshold, str json_record):             # <<<<<<<<<<<<<<
 *     """
 *     main function for getting concensus sequences from read clusters.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.errorFreeReads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XDECREF(__pyx_v_sequence_left);
  __Pyx_XDECREF(__pyx_v_quality_left);
  __Pyx_XDECREF(__pyx_v_sequence_right);
  __Pyx_XDECREF(__pyx_v_quality_right);
  __Pyx_XDECREF(__pyx_v_left_record);
  __Pyx_XDECREF(__pyx_v_right_record);
  __Pyx_XDECREF(__pyx_v_record);
  __Pyx_XDECREF(__pyx_v_table);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/cluster_reads.pyx":174
 *         return 'No'
 * 
 * def writeSeqToFiles(read1, read2, output_cluster_count, result):             # <<<<<<<<<<<<<<
 *     if result!='No':
 *         read1.write('@cluster%i_%s' %(output_cluster_count, result[0]))
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_17writeSeqToFiles(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15tgirt_seq_tools_13cluster_reads_17writeSeqToFiles = {"writeSeqToFiles", (PyCFunction)__pyx_pw_15tgirt_seq_tools_13cluster_reads_17writeSeqToFiles, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_17writeSeqToFiles(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_read1 = 0;
  PyObject *__pyx_v_read2 = 0;
  PyObject *__pyx_v_output_cluster_count = 0;
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeSeqToFiles (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_read1,&__pyx_n_s_read2,&__pyx_n_s_output_cluster_count,&__pyx_n_s_result,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_read1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_read2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeSeqToFiles", 1, 4, 4, 1); __PYX_ERR(0, 174, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_output_cluster_count)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeSeqToFiles", 1, 4, 4, 2); __PYX_ERR(0, 174, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_result)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeSeqToFiles", 1, 4, 4, 3); __PYX_ERR(0, 174, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeSeqToFiles") < 0)) __PYX_ERR(0, 174, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_read1 = values[0];
    __pyx_v_read2 = values[1];
    __pyx_v_output_cluster_count = values[2];
    __pyx_v_result = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeSeqToFiles", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 174, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.writeSeqToFiles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_16writeSeqToFiles(__pyx_self, __pyx_v_read1, __pyx_v_read2, __pyx_v_output_cluster_count, __pyx_v_result);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_16writeSeqToFiles(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_read1, PyObject *__pyx_v_read2, PyObject *__pyx_v_output_cluster_count, PyObject *__pyx_v_result) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("writeSeqToFiles", 0);

  /* "tgirt_seq_tools/cluster_reads.pyx":175
 * 
 * def writeSeqToFiles(read1, read2, output_cluster_count, result):
 *     if result!='No':             # <<<<<<<<<<<<<<
 *         read1.write('@cluster%i_%s' %(output_cluster_count, result[0]))
 *         read2.write('@cluster%i_%s' %(output_cluster_count, result[1]))
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_result, __pyx_n_s_No, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 175, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "tgirt_seq_tools/cluster_reads.pyx":176
 * def writeSeqToFiles(read1, read2, output_cluster_count, result):
 *     if result!='No':
 *         read1.write('@cluster%i_%s' %(output_cluster_count, result[0]))             # <<<<<<<<<<<<<<
 *         read2.write('@cluster%i_%s' %(output_cluster_count, result[1]))
 *         return 1
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_read1, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_output_cluster_count);
    __Pyx_GIVEREF(__pyx_v_output_cluster_count);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_output_cluster_count);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_cluster_i__s, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 176, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":177
 *     if result!='No':
 *         read1.write('@cluster%i_%s' %(output_cluster_count, result[0]))
 *         read2.write('@cluster%i_%s' %(output_cluster_count, result[1]))             # <<<<<<<<<<<<<<
 *         return 1
 *     else:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_read2, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_result, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_output_cluster_count);
    __Pyx_GIVEREF(__pyx_v_output_cluster_count);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_output_cluster_count);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_cluster_i__s, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 177, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 177, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 177, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 177, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 177, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":178
 *         read1.write('@cluster%i_%s' %(output_cluster_count, result[0]))
 *         read2.write('@cluster%i_%s' %(output_cluster_count, result[1]))
 *         return 1             # <<<<<<<<<<<<<<
 *     else:
 *         return 0
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_1);
    __pyx_r = __pyx_int_1;
    goto __pyx_L0;

    /* "tgirt_seq_tools/cluster_reads.pyx":175
 * 
 * def writeSeqToFiles(read1, read2, output_cluster_count, result):
 *     if result!='No':             # <<<<<<<<<<<<<<
 *         read1.write('@cluster%i_%s' %(output_cluster_count, result[0]))
 *         read2.write('@cluster%i_%s' %(output_cluster_count, result[1]))
 */
  }

  /* "tgirt_seq_tools/cluster_reads.pyx":180
 *         return 1
 *     else:
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * def writingAndClusteringReads(outputprefix, min_family_member_count, json_file,
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;
  }

  /* "tgirt_seq_tools/cluster_reads.pyx":174
 *         return 'No'
 * 
 * def writeSeqToFiles(read1, read2, output_cluster_count, result):             # <<<<<<<<<<<<<<
 *     if result!='No':
 *         read1.write('@cluster%i_%s' %(output_cluster_count, result[0]))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.writeSeqToFiles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/cluster_reads.pyx":182
 *         return 0
 * 
 * def writingAndClusteringReads(outputprefix, min_family_member_count, json_file,             # <<<<<<<<<<<<<<
 *                             threads, fraction_threshold):
 *     # From index library, generate error free reads
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_19writingAndClusteringReads(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15tgirt_seq_tools_13cluster_reads_19writingAndClusteringReads = {"writingAndClusteringReads", (PyCFunction)__pyx_pw_15tgirt_seq_tools_13cluster_reads_19writingAndClusteringReads, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_19writingAndClusteringReads(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_outputprefix = 0;
  PyObject *__pyx_v_min_family_member_count = 0;
  PyObject *__pyx_v_json_file = 0;
  PyObject *__pyx_v_threads = 0;
  PyObject *__pyx_v_fraction_threshold = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writingAndClusteringReads (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_outputprefix,&__pyx_n_s_min_family_member_count,&__pyx_n_s_json_file,&__pyx_n_s_threads,&__pyx_n_s_fraction_threshold,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_outputprefix)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_family_member_count)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writingAndClusteringReads", 1, 5, 5, 1); __PYX_ERR(0, 182, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_json_file)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writingAndClusteringReads", 1, 5, 5, 2); __PYX_ERR(0, 182, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threads)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writingAndClusteringReads", 1, 5, 5, 3); __PYX_ERR(0, 182, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fraction_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writingAndClusteringReads", 1, 5, 5, 4); __PYX_ERR(0, 182, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writingAndClusteringReads") < 0)) __PYX_ERR(0, 182, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_outputprefix = values[0];
    __pyx_v_min_family_member_count = values[1];
    __pyx_v_json_file = values[2];
    __pyx_v_threads = values[3];
    __pyx_v_fraction_threshold = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writingAndClusteringReads", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 182, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.writingAndClusteringReads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_18writingAndClusteringReads(__pyx_self, __pyx_v_outputprefix, __pyx_v_min_family_member_count, __pyx_v_json_file, __pyx_v_threads, __pyx_v_fraction_threshold);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_18writingAndClusteringReads(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_outputprefix, PyObject *__pyx_v_min_family_member_count, PyObject *__pyx_v_json_file, PyObject *__pyx_v_threads, PyObject *__pyx_v_fraction_threshold) {
  int __pyx_v_counter;
  int __pyx_v_output_cluster_count;
  PyObject *__pyx_v_read1File = NULL;
  PyObject *__pyx_v_read2File = NULL;
  PyObject *__pyx_v_pool = NULL;
  PyObject *__pyx_v_read1 = NULL;
  PyObject *__pyx_v_read2 = NULL;
  PyObject *__pyx_v_infile = NULL;
  PyObject *__pyx_v_error_func = NULL;
  PyObject *__pyx_v_write_func = NULL;
  PyObject *__pyx_v_processes = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  Py_ssize_t __pyx_t_19;
  PyObject *(*__pyx_t_20)(PyObject *);
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  int __pyx_t_23;
  PyObject *__pyx_t_24 = NULL;
  int __pyx_t_25;
  __Pyx_RefNannySetupContext("writingAndClusteringReads", 0);

  /* "tgirt_seq_tools/cluster_reads.pyx":187
 *     # using multicore to process read clusters
 *     cdef:
 *         int counter = 0             # <<<<<<<<<<<<<<
 *         int output_cluster_count = 0
 * 
 */
  __pyx_v_counter = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":188
 *     cdef:
 *         int counter = 0
 *         int output_cluster_count = 0             # <<<<<<<<<<<<<<
 * 
 *     read1File = outputprefix + '_R1_001.fastq.gz'
 */
  __pyx_v_output_cluster_count = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":190
 *         int output_cluster_count = 0
 * 
 *     read1File = outputprefix + '_R1_001.fastq.gz'             # <<<<<<<<<<<<<<
 *     read2File = outputprefix + '_R2_001.fastq.gz'
 *     pool = Pool(threads,maxtasksperchild=1000)
 */
  __pyx_t_1 = PyNumber_Add(__pyx_v_outputprefix, __pyx_kp_s_R1_001_fastq_gz); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_read1File = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":191
 * 
 *     read1File = outputprefix + '_R1_001.fastq.gz'
 *     read2File = outputprefix + '_R2_001.fastq.gz'             # <<<<<<<<<<<<<<
 *     pool = Pool(threads,maxtasksperchild=1000)
 *     with gzip_open(read1File,'wb') as read1, gzip_open(read2File,'wb') as read2, open(json_file,'r') as infile:
 */
  __pyx_t_1 = PyNumber_Add(__pyx_v_outputprefix, __pyx_kp_s_R2_001_fastq_gz); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_read2File = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":192
 *     read1File = outputprefix + '_R1_001.fastq.gz'
 *     read2File = outputprefix + '_R2_001.fastq.gz'
 *     pool = Pool(threads,maxtasksperchild=1000)             # <<<<<<<<<<<<<<
 *     with gzip_open(read1File,'wb') as read1, gzip_open(read2File,'wb') as read2, open(json_file,'r') as infile:
 *         error_func = partial(errorFreeReads, min_family_member_count, fraction_threshold)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Pool); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_threads);
  __Pyx_GIVEREF(__pyx_v_threads);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_threads);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_maxtasksperchild, __pyx_int_1000) < 0) __PYX_ERR(0, 192, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_pool = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":193
 *     read2File = outputprefix + '_R2_001.fastq.gz'
 *     pool = Pool(threads,maxtasksperchild=1000)
 *     with gzip_open(read1File,'wb') as read1, gzip_open(read2File,'wb') as read2, open(json_file,'r') as infile:             # <<<<<<<<<<<<<<
 *         error_func = partial(errorFreeReads, min_family_member_count, fraction_threshold)
 *         write_func = partial(writeSeqToFiles,read1, read2)
 */
  /*with:*/ {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_gzip_open); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_read1File, __pyx_n_s_wb};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_read1File, __pyx_n_s_wb};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_read1File);
      __Pyx_GIVEREF(__pyx_v_read1File);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_5, __pyx_v_read1File);
      __Pyx_INCREF(__pyx_n_s_wb);
      __Pyx_GIVEREF(__pyx_n_s_wb);
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_5, __pyx_n_s_wb);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_4, __pyx_n_s_exit); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyObject_LookupSpecial(__pyx_t_4, __pyx_n_s_enter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (__pyx_t_2) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 193, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 193, __pyx_L3_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {
          __pyx_v_read1 = __pyx_t_1;
          __pyx_t_1 = 0;
          /*with:*/ {
            __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_gzip_open); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 193, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_3 = NULL;
            __pyx_t_5 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
                __pyx_t_5 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_4)) {
              PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_read2File, __pyx_n_s_wb};
              __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L7_error)
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_GOTREF(__pyx_t_1);
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
              PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_read2File, __pyx_n_s_wb};
              __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L7_error)
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_GOTREF(__pyx_t_1);
            } else
            #endif
            {
              __pyx_t_2 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 193, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_2);
              if (__pyx_t_3) {
                __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __pyx_t_3 = NULL;
              }
              __Pyx_INCREF(__pyx_v_read2File);
              __Pyx_GIVEREF(__pyx_v_read2File);
              PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_5, __pyx_v_read2File);
              __Pyx_INCREF(__pyx_n_s_wb);
              __Pyx_GIVEREF(__pyx_n_s_wb);
              PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_5, __pyx_n_s_wb);
              __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            }
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_10 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 193, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_2 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 193, __pyx_L15_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_3 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_2, function);
              }
            }
            if (__pyx_t_3) {
              __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 193, __pyx_L15_error)
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            } else {
              __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 193, __pyx_L15_error)
            }
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = __pyx_t_4;
            __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            /*try:*/ {
              {
                __Pyx_PyThreadState_declare
                __Pyx_PyThreadState_assign
                __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
                __Pyx_XGOTREF(__pyx_t_11);
                __Pyx_XGOTREF(__pyx_t_12);
                __Pyx_XGOTREF(__pyx_t_13);
                /*try:*/ {
                  __pyx_v_read2 = __pyx_t_2;
                  __pyx_t_2 = 0;
                  /*with:*/ {
                    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 193, __pyx_L21_error)
                    __Pyx_GOTREF(__pyx_t_2);
                    __Pyx_INCREF(__pyx_v_json_file);
                    __Pyx_GIVEREF(__pyx_v_json_file);
                    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_json_file);
                    __Pyx_INCREF(__pyx_n_s_r);
                    __Pyx_GIVEREF(__pyx_n_s_r);
                    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_r);
                    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L21_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                    __pyx_t_14 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 193, __pyx_L21_error)
                    __Pyx_GOTREF(__pyx_t_14);
                    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 193, __pyx_L29_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    __pyx_t_3 = NULL;
                    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
                      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
                      if (likely(__pyx_t_3)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                        __Pyx_INCREF(__pyx_t_3);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_4, function);
                      }
                    }
                    if (__pyx_t_3) {
                      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 193, __pyx_L29_error)
                      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    } else {
                      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 193, __pyx_L29_error)
                    }
                    __Pyx_GOTREF(__pyx_t_2);
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                    __pyx_t_4 = __pyx_t_2;
                    __pyx_t_2 = 0;
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    /*try:*/ {
                      {
                        __Pyx_PyThreadState_declare
                        __Pyx_PyThreadState_assign
                        __Pyx_ExceptionSave(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
                        __Pyx_XGOTREF(__pyx_t_15);
                        __Pyx_XGOTREF(__pyx_t_16);
                        __Pyx_XGOTREF(__pyx_t_17);
                        /*try:*/ {
                          __pyx_v_infile = __pyx_t_4;
                          __pyx_t_4 = 0;

                          /* "tgirt_seq_tools/cluster_reads.pyx":194
 *     pool = Pool(threads,maxtasksperchild=1000)
 *     with gzip_open(read1File,'wb') as read1, gzip_open(read2File,'wb') as read2, open(json_file,'r') as infile:
 *         error_func = partial(errorFreeReads, min_family_member_count, fraction_threshold)             # <<<<<<<<<<<<<<
 *         write_func = partial(writeSeqToFiles,read1, read2)
 *         processes = pool.imap_unordered(error_func, infile, chunksize = 1000)
 */
                          __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_partial); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L35_error)
                          __Pyx_GOTREF(__pyx_t_1);
                          __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_errorFreeReads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 194, __pyx_L35_error)
                          __Pyx_GOTREF(__pyx_t_2);
                          __pyx_t_3 = NULL;
                          __pyx_t_5 = 0;
                          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
                            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
                            if (likely(__pyx_t_3)) {
                              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                              __Pyx_INCREF(__pyx_t_3);
                              __Pyx_INCREF(function);
                              __Pyx_DECREF_SET(__pyx_t_1, function);
                              __pyx_t_5 = 1;
                            }
                          }
                          #if CYTHON_FAST_PYCALL
                          if (PyFunction_Check(__pyx_t_1)) {
                            PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_t_2, __pyx_v_min_family_member_count, __pyx_v_fraction_threshold};
                            __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 194, __pyx_L35_error)
                            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                            __Pyx_GOTREF(__pyx_t_4);
                            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                          } else
                          #endif
                          #if CYTHON_FAST_PYCCALL
                          if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
                            PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_t_2, __pyx_v_min_family_member_count, __pyx_v_fraction_threshold};
                            __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 194, __pyx_L35_error)
                            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                            __Pyx_GOTREF(__pyx_t_4);
                            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                          } else
                          #endif
                          {
                            __pyx_t_18 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 194, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_18);
                            if (__pyx_t_3) {
                              __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_3); __pyx_t_3 = NULL;
                            }
                            __Pyx_GIVEREF(__pyx_t_2);
                            PyTuple_SET_ITEM(__pyx_t_18, 0+__pyx_t_5, __pyx_t_2);
                            __Pyx_INCREF(__pyx_v_min_family_member_count);
                            __Pyx_GIVEREF(__pyx_v_min_family_member_count);
                            PyTuple_SET_ITEM(__pyx_t_18, 1+__pyx_t_5, __pyx_v_min_family_member_count);
                            __Pyx_INCREF(__pyx_v_fraction_threshold);
                            __Pyx_GIVEREF(__pyx_v_fraction_threshold);
                            PyTuple_SET_ITEM(__pyx_t_18, 2+__pyx_t_5, __pyx_v_fraction_threshold);
                            __pyx_t_2 = 0;
                            __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_18, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 194, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_4);
                            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                          }
                          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                          __pyx_v_error_func = __pyx_t_4;
                          __pyx_t_4 = 0;

                          /* "tgirt_seq_tools/cluster_reads.pyx":195
 *     with gzip_open(read1File,'wb') as read1, gzip_open(read2File,'wb') as read2, open(json_file,'r') as infile:
 *         error_func = partial(errorFreeReads, min_family_member_count, fraction_threshold)
 *         write_func = partial(writeSeqToFiles,read1, read2)             # <<<<<<<<<<<<<<
 *         processes = pool.imap_unordered(error_func, infile, chunksize = 1000)
 *         #processes = imap(error_func, infile)
 */
                          __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_partial); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L35_error)
                          __Pyx_GOTREF(__pyx_t_1);
                          __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_writeSeqToFiles); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 195, __pyx_L35_error)
                          __Pyx_GOTREF(__pyx_t_18);
                          __pyx_t_2 = NULL;
                          __pyx_t_5 = 0;
                          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
                            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
                            if (likely(__pyx_t_2)) {
                              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                              __Pyx_INCREF(__pyx_t_2);
                              __Pyx_INCREF(function);
                              __Pyx_DECREF_SET(__pyx_t_1, function);
                              __pyx_t_5 = 1;
                            }
                          }
                          #if CYTHON_FAST_PYCALL
                          if (PyFunction_Check(__pyx_t_1)) {
                            PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_t_18, __pyx_v_read1, __pyx_v_read2};
                            __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 195, __pyx_L35_error)
                            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                            __Pyx_GOTREF(__pyx_t_4);
                            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                          } else
                          #endif
                          #if CYTHON_FAST_PYCCALL
                          if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
                            PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_t_18, __pyx_v_read1, __pyx_v_read2};
                            __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 195, __pyx_L35_error)
                            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                            __Pyx_GOTREF(__pyx_t_4);
                            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                          } else
                          #endif
                          {
                            __pyx_t_3 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 195, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_3);
                            if (__pyx_t_2) {
                              __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
                            }
                            __Pyx_GIVEREF(__pyx_t_18);
                            PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_5, __pyx_t_18);
                            __Pyx_INCREF(__pyx_v_read1);
                            __Pyx_GIVEREF(__pyx_v_read1);
                            PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_5, __pyx_v_read1);
                            __Pyx_INCREF(__pyx_v_read2);
                            __Pyx_GIVEREF(__pyx_v_read2);
                            PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_5, __pyx_v_read2);
                            __pyx_t_18 = 0;
                            __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 195, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_4);
                            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                          }
                          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                          __pyx_v_write_func = __pyx_t_4;
                          __pyx_t_4 = 0;

                          /* "tgirt_seq_tools/cluster_reads.pyx":196
 *         error_func = partial(errorFreeReads, min_family_member_count, fraction_threshold)
 *         write_func = partial(writeSeqToFiles,read1, read2)
 *         processes = pool.imap_unordered(error_func, infile, chunksize = 1000)             # <<<<<<<<<<<<<<
 *         #processes = imap(error_func, infile)
 *         for result in processes:
 */
                          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_pool, __pyx_n_s_imap_unordered); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 196, __pyx_L35_error)
                          __Pyx_GOTREF(__pyx_t_4);
                          __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L35_error)
                          __Pyx_GOTREF(__pyx_t_1);
                          __Pyx_INCREF(__pyx_v_error_func);
                          __Pyx_GIVEREF(__pyx_v_error_func);
                          PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_error_func);
                          __Pyx_INCREF(__pyx_v_infile);
                          __Pyx_GIVEREF(__pyx_v_infile);
                          PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_infile);
                          __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 196, __pyx_L35_error)
                          __Pyx_GOTREF(__pyx_t_3);
                          if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_chunksize, __pyx_int_1000) < 0) __PYX_ERR(0, 196, __pyx_L35_error)
                          __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 196, __pyx_L35_error)
                          __Pyx_GOTREF(__pyx_t_18);
                          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                          __pyx_v_processes = __pyx_t_18;
                          __pyx_t_18 = 0;

                          /* "tgirt_seq_tools/cluster_reads.pyx":198
 *         processes = pool.imap_unordered(error_func, infile, chunksize = 1000)
 *         #processes = imap(error_func, infile)
 *         for result in processes:             # <<<<<<<<<<<<<<
 *             output_cluster_count += write_func(output_cluster_count, result)
 *             counter += 1
 */
                          if (likely(PyList_CheckExact(__pyx_v_processes)) || PyTuple_CheckExact(__pyx_v_processes)) {
                            __pyx_t_18 = __pyx_v_processes; __Pyx_INCREF(__pyx_t_18); __pyx_t_19 = 0;
                            __pyx_t_20 = NULL;
                          } else {
                            __pyx_t_19 = -1; __pyx_t_18 = PyObject_GetIter(__pyx_v_processes); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 198, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_18);
                            __pyx_t_20 = Py_TYPE(__pyx_t_18)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 198, __pyx_L35_error)
                          }
                          for (;;) {
                            if (likely(!__pyx_t_20)) {
                              if (likely(PyList_CheckExact(__pyx_t_18))) {
                                if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_18)) break;
                                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                                __pyx_t_3 = PyList_GET_ITEM(__pyx_t_18, __pyx_t_19); __Pyx_INCREF(__pyx_t_3); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 198, __pyx_L35_error)
                                #else
                                __pyx_t_3 = PySequence_ITEM(__pyx_t_18, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 198, __pyx_L35_error)
                                __Pyx_GOTREF(__pyx_t_3);
                                #endif
                              } else {
                                if (__pyx_t_19 >= PyTuple_GET_SIZE(__pyx_t_18)) break;
                                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                                __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_18, __pyx_t_19); __Pyx_INCREF(__pyx_t_3); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 198, __pyx_L35_error)
                                #else
                                __pyx_t_3 = PySequence_ITEM(__pyx_t_18, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 198, __pyx_L35_error)
                                __Pyx_GOTREF(__pyx_t_3);
                                #endif
                              }
                            } else {
                              __pyx_t_3 = __pyx_t_20(__pyx_t_18);
                              if (unlikely(!__pyx_t_3)) {
                                PyObject* exc_type = PyErr_Occurred();
                                if (exc_type) {
                                  if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                                  else __PYX_ERR(0, 198, __pyx_L35_error)
                                }
                                break;
                              }
                              __Pyx_GOTREF(__pyx_t_3);
                            }
                            __Pyx_XDECREF_SET(__pyx_v_result, __pyx_t_3);
                            __pyx_t_3 = 0;

                            /* "tgirt_seq_tools/cluster_reads.pyx":199
 *         #processes = imap(error_func, infile)
 *         for result in processes:
 *             output_cluster_count += write_func(output_cluster_count, result)             # <<<<<<<<<<<<<<
 *             counter += 1
 *             if counter % 1000000 == 0:
 */
                            __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_output_cluster_count); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 199, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_3);
                            __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_output_cluster_count); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 199, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_4);
                            __Pyx_INCREF(__pyx_v_write_func);
                            __pyx_t_2 = __pyx_v_write_func; __pyx_t_21 = NULL;
                            __pyx_t_5 = 0;
                            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
                              __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_2);
                              if (likely(__pyx_t_21)) {
                                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                                __Pyx_INCREF(__pyx_t_21);
                                __Pyx_INCREF(function);
                                __Pyx_DECREF_SET(__pyx_t_2, function);
                                __pyx_t_5 = 1;
                              }
                            }
                            #if CYTHON_FAST_PYCALL
                            if (PyFunction_Check(__pyx_t_2)) {
                              PyObject *__pyx_temp[3] = {__pyx_t_21, __pyx_t_4, __pyx_v_result};
                              __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L35_error)
                              __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
                              __Pyx_GOTREF(__pyx_t_1);
                              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                            } else
                            #endif
                            #if CYTHON_FAST_PYCCALL
                            if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
                              PyObject *__pyx_temp[3] = {__pyx_t_21, __pyx_t_4, __pyx_v_result};
                              __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L35_error)
                              __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
                              __Pyx_GOTREF(__pyx_t_1);
                              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                            } else
                            #endif
                            {
                              __pyx_t_22 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 199, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_22);
                              if (__pyx_t_21) {
                                __Pyx_GIVEREF(__pyx_t_21); PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_21); __pyx_t_21 = NULL;
                              }
                              __Pyx_GIVEREF(__pyx_t_4);
                              PyTuple_SET_ITEM(__pyx_t_22, 0+__pyx_t_5, __pyx_t_4);
                              __Pyx_INCREF(__pyx_v_result);
                              __Pyx_GIVEREF(__pyx_v_result);
                              PyTuple_SET_ITEM(__pyx_t_22, 1+__pyx_t_5, __pyx_v_result);
                              __pyx_t_4 = 0;
                              __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_1);
                              __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
                            }
                            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                            __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 199, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_2);
                            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                            __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 199, __pyx_L35_error)
                            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                            __pyx_v_output_cluster_count = __pyx_t_5;

                            /* "tgirt_seq_tools/cluster_reads.pyx":200
 *         for result in processes:
 *             output_cluster_count += write_func(output_cluster_count, result)
 *             counter += 1             # <<<<<<<<<<<<<<
 *             if counter % 1000000 == 0:
 *                 stderr.write('Processed %i read clusters.\n' %(counter))
 */
                            __pyx_v_counter = (__pyx_v_counter + 1);

                            /* "tgirt_seq_tools/cluster_reads.pyx":201
 *             output_cluster_count += write_func(output_cluster_count, result)
 *             counter += 1
 *             if counter % 1000000 == 0:             # <<<<<<<<<<<<<<
 *                 stderr.write('Processed %i read clusters.\n' %(counter))
 *     pool.close()
 */
                            __pyx_t_23 = ((__Pyx_mod_long(__pyx_v_counter, 0xF4240) == 0) != 0);
                            if (__pyx_t_23) {

                              /* "tgirt_seq_tools/cluster_reads.pyx":202
 *             counter += 1
 *             if counter % 1000000 == 0:
 *                 stderr.write('Processed %i read clusters.\n' %(counter))             # <<<<<<<<<<<<<<
 *     pool.close()
 *     pool.join()
 */
                              __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_stderr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_1);
                              __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 202, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_3);
                              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                              __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_counter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_1);
                              __pyx_t_22 = __Pyx_PyString_Format(__pyx_kp_s_Processed_i_read_clusters, __pyx_t_1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 202, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_22);
                              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                              __pyx_t_1 = NULL;
                              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
                                __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
                                if (likely(__pyx_t_1)) {
                                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                                  __Pyx_INCREF(__pyx_t_1);
                                  __Pyx_INCREF(function);
                                  __Pyx_DECREF_SET(__pyx_t_3, function);
                                }
                              }
                              if (!__pyx_t_1) {
                                __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_22); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L35_error)
                                __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
                                __Pyx_GOTREF(__pyx_t_2);
                              } else {
                                #if CYTHON_FAST_PYCALL
                                if (PyFunction_Check(__pyx_t_3)) {
                                  PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_22};
                                  __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L35_error)
                                  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                                  __Pyx_GOTREF(__pyx_t_2);
                                  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
                                } else
                                #endif
                                #if CYTHON_FAST_PYCCALL
                                if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
                                  PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_22};
                                  __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L35_error)
                                  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                                  __Pyx_GOTREF(__pyx_t_2);
                                  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
                                } else
                                #endif
                                {
                                  __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L35_error)
                                  __Pyx_GOTREF(__pyx_t_4);
                                  __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1); __pyx_t_1 = NULL;
                                  __Pyx_GIVEREF(__pyx_t_22);
                                  PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_22);
                                  __pyx_t_22 = 0;
                                  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L35_error)
                                  __Pyx_GOTREF(__pyx_t_2);
                                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                                }
                              }
                              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                              /* "tgirt_seq_tools/cluster_reads.pyx":201
 *             output_cluster_count += write_func(output_cluster_count, result)
 *             counter += 1
 *             if counter % 1000000 == 0:             # <<<<<<<<<<<<<<
 *                 stderr.write('Processed %i read clusters.\n' %(counter))
 *     pool.close()
 */
                            }

                            /* "tgirt_seq_tools/cluster_reads.pyx":198
 *         processes = pool.imap_unordered(error_func, infile, chunksize = 1000)
 *         #processes = imap(error_func, infile)
 *         for result in processes:             # <<<<<<<<<<<<<<
 *             output_cluster_count += write_func(output_cluster_count, result)
 *             counter += 1
 */
                          }
                          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

                          /* "tgirt_seq_tools/cluster_reads.pyx":193
 *     read2File = outputprefix + '_R2_001.fastq.gz'
 *     pool = Pool(threads,maxtasksperchild=1000)
 *     with gzip_open(read1File,'wb') as read1, gzip_open(read2File,'wb') as read2, open(json_file,'r') as infile:             # <<<<<<<<<<<<<<
 *         error_func = partial(errorFreeReads, min_family_member_count, fraction_threshold)
 *         write_func = partial(writeSeqToFiles,read1, read2)
 */
                        }
                        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                        goto __pyx_L42_try_end;
                        __pyx_L35_error:;
                        __Pyx_PyThreadState_assign
                        __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
                        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                        __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
                        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
                        /*except:*/ {
                          __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.writingAndClusteringReads", __pyx_clineno, __pyx_lineno, __pyx_filename);
                          if (__Pyx_GetException(&__pyx_t_18, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 193, __pyx_L37_except_error)
                          __Pyx_GOTREF(__pyx_t_18);
                          __Pyx_GOTREF(__pyx_t_2);
                          __Pyx_GOTREF(__pyx_t_3);
                          __pyx_t_4 = PyTuple_Pack(3, __pyx_t_18, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 193, __pyx_L37_except_error)
                          __Pyx_GOTREF(__pyx_t_4);
                          __pyx_t_24 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_4, NULL);
                          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                          if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 193, __pyx_L37_except_error)
                          __Pyx_GOTREF(__pyx_t_24);
                          __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_24);
                          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
                          if (__pyx_t_23 < 0) __PYX_ERR(0, 193, __pyx_L37_except_error)
                          __pyx_t_25 = ((!(__pyx_t_23 != 0)) != 0);
                          if (__pyx_t_25) {
                            __Pyx_GIVEREF(__pyx_t_18);
                            __Pyx_GIVEREF(__pyx_t_2);
                            __Pyx_XGIVEREF(__pyx_t_3);
                            __Pyx_ErrRestoreWithState(__pyx_t_18, __pyx_t_2, __pyx_t_3);
                            __pyx_t_18 = 0; __pyx_t_2 = 0; __pyx_t_3 = 0; 
                            __PYX_ERR(0, 193, __pyx_L37_except_error)
                          }
                          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                          goto __pyx_L36_exception_handled;
                        }
                        __pyx_L37_except_error:;
                        __Pyx_PyThreadState_assign
                        __Pyx_XGIVEREF(__pyx_t_15);
                        __Pyx_XGIVEREF(__pyx_t_16);
                        __Pyx_XGIVEREF(__pyx_t_17);
                        __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
                        goto __pyx_L21_error;
                        __pyx_L36_exception_handled:;
                        __Pyx_PyThreadState_assign
                        __Pyx_XGIVEREF(__pyx_t_15);
                        __Pyx_XGIVEREF(__pyx_t_16);
                        __Pyx_XGIVEREF(__pyx_t_17);
                        __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
                        __pyx_L42_try_end:;
                      }
                    }
                    /*finally:*/ {
                      /*normal exit:*/{
                        if (__pyx_t_14) {
                          __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_tuple__25, NULL);
                          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                          if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 193, __pyx_L21_error)
                          __Pyx_GOTREF(__pyx_t_17);
                          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                        }
                        goto __pyx_L34;
                      }
                      __pyx_L34:;
                    }
                    goto __pyx_L49;
                    __pyx_L29_error:;
                    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                    goto __pyx_L21_error;
                    __pyx_L49:;
                  }
                }
                __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
                __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
                __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
                goto __pyx_L28_try_end;
                __pyx_L21_error:;
                __Pyx_PyThreadState_assign
                __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
                __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
                __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
                __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                /*except:*/ {
                  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.writingAndClusteringReads", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_2, &__pyx_t_18) < 0) __PYX_ERR(0, 193, __pyx_L23_except_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_GOTREF(__pyx_t_18);
                  __pyx_t_4 = PyTuple_Pack(3, __pyx_t_3, __pyx_t_2, __pyx_t_18); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 193, __pyx_L23_except_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_4, NULL);
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                  if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 193, __pyx_L23_except_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  __pyx_t_25 = __Pyx_PyObject_IsTrue(__pyx_t_14);
                  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                  if (__pyx_t_25 < 0) __PYX_ERR(0, 193, __pyx_L23_except_error)
                  __pyx_t_23 = ((!(__pyx_t_25 != 0)) != 0);
                  if (__pyx_t_23) {
                    __Pyx_GIVEREF(__pyx_t_3);
                    __Pyx_GIVEREF(__pyx_t_2);
                    __Pyx_XGIVEREF(__pyx_t_18);
                    __Pyx_ErrRestoreWithState(__pyx_t_3, __pyx_t_2, __pyx_t_18);
                    __pyx_t_3 = 0; __pyx_t_2 = 0; __pyx_t_18 = 0; 
                    __PYX_ERR(0, 193, __pyx_L23_except_error)
                  }
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                  goto __pyx_L22_exception_handled;
                }
                __pyx_L23_except_error:;
                __Pyx_PyThreadState_assign
                __Pyx_XGIVEREF(__pyx_t_11);
                __Pyx_XGIVEREF(__pyx_t_12);
                __Pyx_XGIVEREF(__pyx_t_13);
                __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
                goto __pyx_L7_error;
                __pyx_L22_exception_handled:;
                __Pyx_PyThreadState_assign
                __Pyx_XGIVEREF(__pyx_t_11);
                __Pyx_XGIVEREF(__pyx_t_12);
                __Pyx_XGIVEREF(__pyx_t_13);
                __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
                __pyx_L28_try_end:;
              }
            }
            /*finally:*/ {
              /*normal exit:*/{
                if (__pyx_t_10) {
                  __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_tuple__26, NULL);
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 193, __pyx_L7_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                }
                goto __pyx_L20;
              }
              __pyx_L20:;
            }
            goto __pyx_L53;
            __pyx_L15_error:;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            goto __pyx_L7_error;
            __pyx_L53:;
          }
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L14_try_end;
        __pyx_L7_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.writingAndClusteringReads", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_18, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 193, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_18);
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = PyTuple_Pack(3, __pyx_t_18, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 193, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 193, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (__pyx_t_23 < 0) __PYX_ERR(0, 193, __pyx_L9_except_error)
          __pyx_t_25 = ((!(__pyx_t_23 != 0)) != 0);
          if (__pyx_t_25) {
            __Pyx_GIVEREF(__pyx_t_18);
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_XGIVEREF(__pyx_t_3);
            __Pyx_ErrRestoreWithState(__pyx_t_18, __pyx_t_2, __pyx_t_3);
            __pyx_t_18 = 0; __pyx_t_2 = 0; __pyx_t_3 = 0; 
            __PYX_ERR(0, 193, __pyx_L9_except_error)
          }
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L14_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_6) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__27, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 193, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L57;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L1_error;
    __pyx_L57:;
  }

  /* "tgirt_seq_tools/cluster_reads.pyx":203
 *             if counter % 1000000 == 0:
 *                 stderr.write('Processed %i read clusters.\n' %(counter))
 *     pool.close()             # <<<<<<<<<<<<<<
 *     pool.join()
 *     return output_cluster_count, read1File, read2File
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_pool, __pyx_n_s_close); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_18 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_18)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_18) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_18); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 203, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":204
 *                 stderr.write('Processed %i read clusters.\n' %(counter))
 *     pool.close()
 *     pool.join()             # <<<<<<<<<<<<<<
 *     return output_cluster_count, read1File, read2File
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_pool, __pyx_n_s_join); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_18 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_18)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_18) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_18); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 204, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":205
 *     pool.close()
 *     pool.join()
 *     return output_cluster_count, read1File, read2File             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_output_cluster_count); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_read1File);
  __Pyx_GIVEREF(__pyx_v_read1File);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_read1File);
  __Pyx_INCREF(__pyx_v_read2File);
  __Pyx_GIVEREF(__pyx_v_read2File);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_read2File);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "tgirt_seq_tools/cluster_reads.pyx":182
 *         return 0
 * 
 * def writingAndClusteringReads(outputprefix, min_family_member_count, json_file,             # <<<<<<<<<<<<<<
 *                             threads, fraction_threshold):
 *     # From index library, generate error free reads
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.writingAndClusteringReads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_read1File);
  __Pyx_XDECREF(__pyx_v_read2File);
  __Pyx_XDECREF(__pyx_v_pool);
  __Pyx_XDECREF(__pyx_v_read1);
  __Pyx_XDECREF(__pyx_v_read2);
  __Pyx_XDECREF(__pyx_v_infile);
  __Pyx_XDECREF(__pyx_v_error_func);
  __Pyx_XDECREF(__pyx_v_write_func);
  __Pyx_XDECREF(__pyx_v_processes);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/cluster_reads.pyx":211
 * 
 * 
 * cpdef int readClusteringR2(barcode_dict, idx_base, barcode_cut_off, constant,             # <<<<<<<<<<<<<<
 *                    constant_length, hamming_threshold, usable_seq, failed_file,
 *                    low_complexity_composition, read1, read2):
 */

static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_21readClusteringR2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_15tgirt_seq_tools_13cluster_reads_readClusteringR2(PyObject *__pyx_v_barcode_dict, PyObject *__pyx_v_idx_base, PyObject *__pyx_v_barcode_cut_off, PyObject *__pyx_v_constant, CYTHON_UNUSED PyObject *__pyx_v_constant_length, PyObject *__pyx_v_hamming_threshold, PyObject *__pyx_v_usable_seq, PyObject *__pyx_v_failed_file, PyObject *__pyx_v_low_complexity_composition, PyObject *__pyx_v_read1, PyObject *__pyx_v_read2, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_id_left = 0;
  PyObject *__pyx_v_seq_left = 0;
  PyObject *__pyx_v_qual_left = 0;
  PyObject *__pyx_v_id_right = 0;
  PyObject *__pyx_v_seq_right = 0;
  PyObject *__pyx_v_qual_right = 0;
  PyObject *__pyx_v_barcode = 0;
  PyObject *__pyx_v_constant_region = 0;
  int __pyx_v_barcodeQualmean;
  PyBoolObject *__pyx_v_no_N_barcode = 0;
  CYTHON_UNUSED PyBoolObject *__pyx_v_is_low_complexity_barcode = 0;
  PyBoolObject *__pyx_v_hiQ_barcode = 0;
  PyBoolObject *__pyx_v_accurate_constant = 0;
  PyObject *__pyx_v_min_qual_left = NULL;
  PyObject *__pyx_v_min_qual_right = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_qual_pass = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("readClusteringR2", 0);

  /* "tgirt_seq_tools/cluster_reads.pyx":226
 * 
 * 
 *     id_left, seq_left, qual_left = read1.id, read1.seq, read1.qual             # <<<<<<<<<<<<<<
 *     id_right, seq_right, qual_right = read2.id, read2.seq, read2.qual
 *     assert id_left.split(' ')[0] == id_right.split(' ')[0], 'Wrongly splitted files!! %s\n%s' %(id_right, id_left)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_read1, __pyx_n_s_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 226, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_read1, __pyx_n_s_seq); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 226, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_read1, __pyx_n_s_qual); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(PyString_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 226, __pyx_L1_error)
  __pyx_v_id_left = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_seq_left = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_qual_left = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":227
 * 
 *     id_left, seq_left, qual_left = read1.id, read1.seq, read1.qual
 *     id_right, seq_right, qual_right = read2.id, read2.seq, read2.qual             # <<<<<<<<<<<<<<
 *     assert id_left.split(' ')[0] == id_right.split(' ')[0], 'Wrongly splitted files!! %s\n%s' %(id_right, id_left)
 *     barcode = seq_right[:idx_base]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_read2, __pyx_n_s_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(PyString_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 227, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_read2, __pyx_n_s_seq); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 227, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_read2, __pyx_n_s_qual); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 227, __pyx_L1_error)
  __pyx_v_id_right = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_v_seq_right = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_qual_right = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":228
 *     id_left, seq_left, qual_left = read1.id, read1.seq, read1.qual
 *     id_right, seq_right, qual_right = read2.id, read2.seq, read2.qual
 *     assert id_left.split(' ')[0] == id_right.split(' ')[0], 'Wrongly splitted files!! %s\n%s' %(id_right, id_left)             # <<<<<<<<<<<<<<
 *     barcode = seq_right[:idx_base]
 *     constant_region = seq_right[idx_base:usable_seq]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_id_left, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_id_right, __pyx_n_s_split); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) {
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 228, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_id_right);
      __Pyx_GIVEREF(__pyx_v_id_right);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_id_right);
      __Pyx_INCREF(__pyx_v_id_left);
      __Pyx_GIVEREF(__pyx_v_id_left);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_id_left);
      __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Wrongly_splitted_files_s_s, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 228, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      PyErr_SetObject(PyExc_AssertionError, __pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 228, __pyx_L1_error)
    }
  }
  #endif

  /* "tgirt_seq_tools/cluster_reads.pyx":229
 *     id_right, seq_right, qual_right = read2.id, read2.seq, read2.qual
 *     assert id_left.split(' ')[0] == id_right.split(' ')[0], 'Wrongly splitted files!! %s\n%s' %(id_right, id_left)
 *     barcode = seq_right[:idx_base]             # <<<<<<<<<<<<<<
 *     constant_region = seq_right[idx_base:usable_seq]
 *     barcodeQualmean = int(np.mean(map(ord,qual_right[:idx_base])) - 33)
 */
  if (unlikely(__pyx_v_seq_right == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 229, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx_base); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 229, __pyx_L1_error)
  __pyx_t_2 = PySequence_GetSlice(__pyx_v_seq_right, 0, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_barcode = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":230
 *     assert id_left.split(' ')[0] == id_right.split(' ')[0], 'Wrongly splitted files!! %s\n%s' %(id_right, id_left)
 *     barcode = seq_right[:idx_base]
 *     constant_region = seq_right[idx_base:usable_seq]             # <<<<<<<<<<<<<<
 *     barcodeQualmean = int(np.mean(map(ord,qual_right[:idx_base])) - 33)
 * 
 */
  if (unlikely(__pyx_v_seq_right == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 230, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx_base); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 230, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_usable_seq); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 230, __pyx_L1_error)
  __pyx_t_2 = PySequence_GetSlice(__pyx_v_seq_right, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_constant_region = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":231
 *     barcode = seq_right[:idx_base]
 *     constant_region = seq_right[idx_base:usable_seq]
 *     barcodeQualmean = int(np.mean(map(ord,qual_right[:idx_base])) - 33)             # <<<<<<<<<<<<<<
 * 
 *     no_N_barcode = 'N' not in barcode
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_mean); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetBuiltinName(__pyx_n_s_ord); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_v_qual_right == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 231, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx_base); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
  __pyx_t_7 = PySequence_GetSlice(__pyx_v_qual_right, 0, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_3 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 231, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_7};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 231, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_7};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 231, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_t_2, __pyx_int_33, 33, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_barcodeQualmean = __pyx_t_9;

  /* "tgirt_seq_tools/cluster_reads.pyx":233
 *     barcodeQualmean = int(np.mean(map(ord,qual_right[:idx_base])) - 33)
 * 
 *     no_N_barcode = 'N' not in barcode             # <<<<<<<<<<<<<<
 *     is_low_complexity_barcode = bool(low_complexity_composition.search(barcode))
 *     hiQ_barcode = barcodeQualmean > barcode_cut_off
 */
  __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_N, __pyx_v_barcode, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 233, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7cpython_4bool_bool)))) __PYX_ERR(0, 233, __pyx_L1_error)
  __pyx_v_no_N_barcode = ((PyBoolObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":234
 * 
 *     no_N_barcode = 'N' not in barcode
 *     is_low_complexity_barcode = bool(low_complexity_composition.search(barcode))             # <<<<<<<<<<<<<<
 *     hiQ_barcode = barcodeQualmean > barcode_cut_off
 *     accurate_constant = hamming_distance(constant, constant_region) <= hamming_threshold
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_low_complexity_composition, __pyx_n_s_search); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_barcode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_barcode};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 234, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_barcode};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 234, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 234, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_barcode);
      __Pyx_GIVEREF(__pyx_v_barcode);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_barcode);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 234, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_4bool_bool), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_is_low_complexity_barcode = ((PyBoolObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":235
 *     no_N_barcode = 'N' not in barcode
 *     is_low_complexity_barcode = bool(low_complexity_composition.search(barcode))
 *     hiQ_barcode = barcodeQualmean > barcode_cut_off             # <<<<<<<<<<<<<<
 *     accurate_constant = hamming_distance(constant, constant_region) <= hamming_threshold
 *     min_qual_left = np.min(map(ord, qual_left))
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_barcodeQualmean); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_v_barcode_cut_off, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7cpython_4bool_bool))))) __PYX_ERR(0, 235, __pyx_L1_error)
  __pyx_v_hiQ_barcode = ((PyBoolObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":236
 *     is_low_complexity_barcode = bool(low_complexity_composition.search(barcode))
 *     hiQ_barcode = barcodeQualmean > barcode_cut_off
 *     accurate_constant = hamming_distance(constant, constant_region) <= hamming_threshold             # <<<<<<<<<<<<<<
 *     min_qual_left = np.min(map(ord, qual_left))
 *     min_qual_right = np.min(map(ord, qual_right))
 */
  if (!(likely(PyString_CheckExact(__pyx_v_constant))||((__pyx_v_constant) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_constant)->tp_name), 0))) __PYX_ERR(0, 236, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_15tgirt_seq_tools_13cluster_reads_hamming_distance(((PyObject*)__pyx_v_constant), __pyx_v_constant_region, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_v_hamming_threshold, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7cpython_4bool_bool))))) __PYX_ERR(0, 236, __pyx_L1_error)
  __pyx_v_accurate_constant = ((PyBoolObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":237
 *     hiQ_barcode = barcodeQualmean > barcode_cut_off
 *     accurate_constant = hamming_distance(constant, constant_region) <= hamming_threshold
 *     min_qual_left = np.min(map(ord, qual_left))             # <<<<<<<<<<<<<<
 *     min_qual_right = np.min(map(ord, qual_right))
 *     qual_pass = np.min([min_qual_left,min_qual_right])  >= 53
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_min); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetBuiltinName(__pyx_n_s_ord); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_qual_left);
  __Pyx_GIVEREF(__pyx_v_qual_left);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_qual_left);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 237, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_min_qual_left = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":238
 *     accurate_constant = hamming_distance(constant, constant_region) <= hamming_threshold
 *     min_qual_left = np.min(map(ord, qual_left))
 *     min_qual_right = np.min(map(ord, qual_right))             # <<<<<<<<<<<<<<
 *     qual_pass = np.min([min_qual_left,min_qual_right])  >= 53
 * 
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_min); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_GetBuiltinName(__pyx_n_s_ord); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __Pyx_INCREF(__pyx_v_qual_right);
  __Pyx_GIVEREF(__pyx_v_qual_right);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_qual_right);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_7};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 238, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_7};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 238, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 238, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 238, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_min_qual_right = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":239
 *     min_qual_left = np.min(map(ord, qual_left))
 *     min_qual_right = np.min(map(ord, qual_right))
 *     qual_pass = np.min([min_qual_left,min_qual_right])  >= 53             # <<<<<<<<<<<<<<
 * 
 *     if no_N_barcode and hiQ_barcode and accurate_constant: #and not is_low_complexity_barcode):
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_min); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyList_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_v_min_qual_left);
  __Pyx_GIVEREF(__pyx_v_min_qual_left);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_v_min_qual_left);
  __Pyx_INCREF(__pyx_v_min_qual_right);
  __Pyx_GIVEREF(__pyx_v_min_qual_right);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_v_min_qual_right);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_8};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_8};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_53, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_qual_pass = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":241
 *     qual_pass = np.min([min_qual_left,min_qual_right])  >= 53
 * 
 *     if no_N_barcode and hiQ_barcode and accurate_constant: #and not is_low_complexity_barcode):             # <<<<<<<<<<<<<<
 *         seq_right = seq_right[usable_seq:]
 *         qual_right = qual_right[usable_seq:]
 */
  __pyx_t_10 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_no_N_barcode)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 241, __pyx_L1_error)
  if (__pyx_t_10) {
  } else {
    __pyx_t_4 = __pyx_t_10;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_10 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_hiQ_barcode)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 241, __pyx_L1_error)
  if (__pyx_t_10) {
  } else {
    __pyx_t_4 = __pyx_t_10;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_10 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_accurate_constant)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 241, __pyx_L1_error)
  __pyx_t_4 = __pyx_t_10;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_4) {

    /* "tgirt_seq_tools/cluster_reads.pyx":242
 * 
 *     if no_N_barcode and hiQ_barcode and accurate_constant: #and not is_low_complexity_barcode):
 *         seq_right = seq_right[usable_seq:]             # <<<<<<<<<<<<<<
 *         qual_right = qual_right[usable_seq:]
 *         barcode_dict[barcode].append([seq_left,seq_right,qual_left, qual_right])
 */
    if (unlikely(__pyx_v_seq_right == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 242, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_usable_seq); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 242, __pyx_L1_error)
    __pyx_t_3 = PySequence_GetSlice(__pyx_v_seq_right, __pyx_t_6, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_seq_right, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":243
 *     if no_N_barcode and hiQ_barcode and accurate_constant: #and not is_low_complexity_barcode):
 *         seq_right = seq_right[usable_seq:]
 *         qual_right = qual_right[usable_seq:]             # <<<<<<<<<<<<<<
 *         barcode_dict[barcode].append([seq_left,seq_right,qual_left, qual_right])
 *         return 0
 */
    if (unlikely(__pyx_v_qual_right == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 243, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_usable_seq); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 243, __pyx_L1_error)
    __pyx_t_3 = PySequence_GetSlice(__pyx_v_qual_right, __pyx_t_6, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_qual_right, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":244
 *         seq_right = seq_right[usable_seq:]
 *         qual_right = qual_right[usable_seq:]
 *         barcode_dict[barcode].append([seq_left,seq_right,qual_left, qual_right])             # <<<<<<<<<<<<<<
 *         return 0
 *     else:
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_barcode_dict, __pyx_v_barcode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyList_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_seq_left);
    __Pyx_GIVEREF(__pyx_v_seq_left);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_v_seq_left);
    __Pyx_INCREF(__pyx_v_seq_right);
    __Pyx_GIVEREF(__pyx_v_seq_right);
    PyList_SET_ITEM(__pyx_t_2, 1, __pyx_v_seq_right);
    __Pyx_INCREF(__pyx_v_qual_left);
    __Pyx_GIVEREF(__pyx_v_qual_left);
    PyList_SET_ITEM(__pyx_t_2, 2, __pyx_v_qual_left);
    __Pyx_INCREF(__pyx_v_qual_right);
    __Pyx_GIVEREF(__pyx_v_qual_right);
    PyList_SET_ITEM(__pyx_t_2, 3, __pyx_v_qual_right);
    __pyx_t_11 = __Pyx_PyObject_Append(__pyx_t_3, __pyx_t_2); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":245
 *         qual_right = qual_right[usable_seq:]
 *         barcode_dict[barcode].append([seq_left,seq_right,qual_left, qual_right])
 *         return 0             # <<<<<<<<<<<<<<
 *     else:
 *         failed_file.write('\t'.join([id_left, seq_left, qual_left, seq_right, qual_right]) + '\n')
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "tgirt_seq_tools/cluster_reads.pyx":241
 *     qual_pass = np.min([min_qual_left,min_qual_right])  >= 53
 * 
 *     if no_N_barcode and hiQ_barcode and accurate_constant: #and not is_low_complexity_barcode):             # <<<<<<<<<<<<<<
 *         seq_right = seq_right[usable_seq:]
 *         qual_right = qual_right[usable_seq:]
 */
  }

  /* "tgirt_seq_tools/cluster_reads.pyx":247
 *         return 0
 *     else:
 *         failed_file.write('\t'.join([id_left, seq_left, qual_left, seq_right, qual_right]) + '\n')             # <<<<<<<<<<<<<<
 *         return 1
 * 
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_failed_file, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyList_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_id_left);
    __Pyx_GIVEREF(__pyx_v_id_left);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_id_left);
    __Pyx_INCREF(__pyx_v_seq_left);
    __Pyx_GIVEREF(__pyx_v_seq_left);
    PyList_SET_ITEM(__pyx_t_1, 1, __pyx_v_seq_left);
    __Pyx_INCREF(__pyx_v_qual_left);
    __Pyx_GIVEREF(__pyx_v_qual_left);
    PyList_SET_ITEM(__pyx_t_1, 2, __pyx_v_qual_left);
    __Pyx_INCREF(__pyx_v_seq_right);
    __Pyx_GIVEREF(__pyx_v_seq_right);
    PyList_SET_ITEM(__pyx_t_1, 3, __pyx_v_seq_right);
    __Pyx_INCREF(__pyx_v_qual_right);
    __Pyx_GIVEREF(__pyx_v_qual_right);
    PyList_SET_ITEM(__pyx_t_1, 4, __pyx_v_qual_right);
    __pyx_t_8 = __Pyx_PyString_Join(__pyx_kp_s__31, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_8, __pyx_kp_s__23); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_8) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 247, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_1};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 247, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_1};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 247, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 247, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 247, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":248
 *     else:
 *         failed_file.write('\t'.join([id_left, seq_left, qual_left, seq_right, qual_right]) + '\n')
 *         return 1             # <<<<<<<<<<<<<<
 * 
 * cpdef int readClusteringR1(barcode_dict, idx_base, barcode_cut_off, constant,
 */
    __pyx_r = 1;
    goto __pyx_L0;
  }

  /* "tgirt_seq_tools/cluster_reads.pyx":211
 * 
 * 
 * cpdef int readClusteringR2(barcode_dict, idx_base, barcode_cut_off, constant,             # <<<<<<<<<<<<<<
 *                    constant_length, hamming_threshold, usable_seq, failed_file,
 *                    low_complexity_composition, read1, read2):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("tgirt_seq_tools.cluster_reads.readClusteringR2", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_id_left);
  __Pyx_XDECREF(__pyx_v_seq_left);
  __Pyx_XDECREF(__pyx_v_qual_left);
  __Pyx_XDECREF(__pyx_v_id_right);
  __Pyx_XDECREF(__pyx_v_seq_right);
  __Pyx_XDECREF(__pyx_v_qual_right);
  __Pyx_XDECREF(__pyx_v_barcode);
  __Pyx_XDECREF(__pyx_v_constant_region);
  __Pyx_XDECREF((PyObject *)__pyx_v_no_N_barcode);
  __Pyx_XDECREF((PyObject *)__pyx_v_is_low_complexity_barcode);
  __Pyx_XDECREF((PyObject *)__pyx_v_hiQ_barcode);
  __Pyx_XDECREF((PyObject *)__pyx_v_accurate_constant);
  __Pyx_XDECREF(__pyx_v_min_qual_left);
  __Pyx_XDECREF(__pyx_v_min_qual_right);
  __Pyx_XDECREF(__pyx_v_qual_pass);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_21readClusteringR2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15tgirt_seq_tools_13cluster_reads_20readClusteringR2[] = "\n    generate read cluster with a dictionary object and seqRecord class.\n    index of the dictionary is the barcode extracted from first /idx_bases/ of read 1\n    ";
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_21readClusteringR2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_barcode_dict = 0;
  PyObject *__pyx_v_idx_base = 0;
  PyObject *__pyx_v_barcode_cut_off = 0;
  PyObject *__pyx_v_constant = 0;
  PyObject *__pyx_v_constant_length = 0;
  PyObject *__pyx_v_hamming_threshold = 0;
  PyObject *__pyx_v_usable_seq = 0;
  PyObject *__pyx_v_failed_file = 0;
  PyObject *__pyx_v_low_complexity_composition = 0;
  PyObject *__pyx_v_read1 = 0;
  PyObject *__pyx_v_read2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readClusteringR2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_barcode_dict,&__pyx_n_s_idx_base,&__pyx_n_s_barcode_cut_off,&__pyx_n_s_constant,&__pyx_n_s_constant_length,&__pyx_n_s_hamming_threshold,&__pyx_n_s_usable_seq,&__pyx_n_s_failed_file,&__pyx_n_s_low_complexity_composition,&__pyx_n_s_read1,&__pyx_n_s_read2,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_barcode_dict)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_idx_base)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readClusteringR2", 1, 11, 11, 1); __PYX_ERR(0, 211, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_barcode_cut_off)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readClusteringR2", 1, 11, 11, 2); __PYX_ERR(0, 211, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_constant)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readClusteringR2", 1, 11, 11, 3); __PYX_ERR(0, 211, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_constant_length)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readClusteringR2", 1, 11, 11, 4); __PYX_ERR(0, 211, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hamming_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readClusteringR2", 1, 11, 11, 5); __PYX_ERR(0, 211, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_usable_seq)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readClusteringR2", 1, 11, 11, 6); __PYX_ERR(0, 211, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_failed_file)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readClusteringR2", 1, 11, 11, 7); __PYX_ERR(0, 211, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_low_complexity_composition)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readClusteringR2", 1, 11, 11, 8); __PYX_ERR(0, 211, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_read1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readClusteringR2", 1, 11, 11, 9); __PYX_ERR(0, 211, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_read2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readClusteringR2", 1, 11, 11, 10); __PYX_ERR(0, 211, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "readClusteringR2") < 0)) __PYX_ERR(0, 211, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 11) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
    }
    __pyx_v_barcode_dict = values[0];
    __pyx_v_idx_base = values[1];
    __pyx_v_barcode_cut_off = values[2];
    __pyx_v_constant = values[3];
    __pyx_v_constant_length = values[4];
    __pyx_v_hamming_threshold = values[5];
    __pyx_v_usable_seq = values[6];
    __pyx_v_failed_file = values[7];
    __pyx_v_low_complexity_composition = values[8];
    __pyx_v_read1 = values[9];
    __pyx_v_read2 = values[10];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readClusteringR2", 1, 11, 11, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 211, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.readClusteringR2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_20readClusteringR2(__pyx_self, __pyx_v_barcode_dict, __pyx_v_idx_base, __pyx_v_barcode_cut_off, __pyx_v_constant, __pyx_v_constant_length, __pyx_v_hamming_threshold, __pyx_v_usable_seq, __pyx_v_failed_file, __pyx_v_low_complexity_composition, __pyx_v_read1, __pyx_v_read2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_20readClusteringR2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_barcode_dict, PyObject *__pyx_v_idx_base, PyObject *__pyx_v_barcode_cut_off, PyObject *__pyx_v_constant, PyObject *__pyx_v_constant_length, PyObject *__pyx_v_hamming_threshold, PyObject *__pyx_v_usable_seq, PyObject *__pyx_v_failed_file, PyObject *__pyx_v_low_complexity_composition, PyObject *__pyx_v_read1, PyObject *__pyx_v_read2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("readClusteringR2", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_15tgirt_seq_tools_13cluster_reads_readClusteringR2(__pyx_v_barcode_dict, __pyx_v_idx_base, __pyx_v_barcode_cut_off, __pyx_v_constant, __pyx_v_constant_length, __pyx_v_hamming_threshold, __pyx_v_usable_seq, __pyx_v_failed_file, __pyx_v_low_complexity_composition, __pyx_v_read1, __pyx_v_read2, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.readClusteringR2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/cluster_reads.pyx":250
 *         return 1
 * 
 * cpdef int readClusteringR1(barcode_dict, idx_base, barcode_cut_off, constant,             # <<<<<<<<<<<<<<
 *                      constant_length, hamming_threshold, usable_seq, failed_file,
 *                      low_complexity_composition, read1, read2):
 */

static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_23readClusteringR1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_15tgirt_seq_tools_13cluster_reads_readClusteringR1(PyObject *__pyx_v_barcode_dict, PyObject *__pyx_v_idx_base, PyObject *__pyx_v_barcode_cut_off, PyObject *__pyx_v_constant, CYTHON_UNUSED PyObject *__pyx_v_constant_length, PyObject *__pyx_v_hamming_threshold, PyObject *__pyx_v_usable_seq, CYTHON_UNUSED PyObject *__pyx_v_failed_file, PyObject *__pyx_v_low_complexity_composition, PyObject *__pyx_v_read1, PyObject *__pyx_v_read2, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_id_left = 0;
  PyObject *__pyx_v_seq_left = 0;
  PyObject *__pyx_v_qual_left = 0;
  PyObject *__pyx_v_id_right = 0;
  PyObject *__pyx_v_seq_right = 0;
  PyObject *__pyx_v_qual_right = 0;
  PyObject *__pyx_v_barcode = 0;
  PyObject *__pyx_v_constant_region = 0;
  int __pyx_v_barcode_qual_min;
  PyBoolObject *__pyx_v_no_N_barcode = 0;
  CYTHON_UNUSED PyBoolObject *__pyx_v_is_low_complexity_barcode = 0;
  PyBoolObject *__pyx_v_hiQ_barcode = 0;
  PyBoolObject *__pyx_v_accurate_constant = 0;
  PyObject *__pyx_v_min_qual_left = NULL;
  PyObject *__pyx_v_min_qual_right = NULL;
  PyObject *__pyx_v_qual_pass = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("readClusteringR1", 0);

  /* "tgirt_seq_tools/cluster_reads.pyx":265
 * 
 * 
 *     id_left, seq_left, qual_left = read1.id, read1.seq, read1.qual             # <<<<<<<<<<<<<<
 *     id_right, seq_right, qual_right = read2.id, read2.seq, read2.qual
 *     assert id_left.split(' ')[0] == id_right.split(' ')[0], 'Wrongly splitted files!! %s\n%s' %(id_right, id_left)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_read1, __pyx_n_s_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 265, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_read1, __pyx_n_s_seq); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 265, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_read1, __pyx_n_s_qual); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(PyString_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 265, __pyx_L1_error)
  __pyx_v_id_left = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_seq_left = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_qual_left = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":266
 * 
 *     id_left, seq_left, qual_left = read1.id, read1.seq, read1.qual
 *     id_right, seq_right, qual_right = read2.id, read2.seq, read2.qual             # <<<<<<<<<<<<<<
 *     assert id_left.split(' ')[0] == id_right.split(' ')[0], 'Wrongly splitted files!! %s\n%s' %(id_right, id_left)
 *     barcode = seq_left[:idx_base]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_read2, __pyx_n_s_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(PyString_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 266, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_read2, __pyx_n_s_seq); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 266, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_read2, __pyx_n_s_qual); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 266, __pyx_L1_error)
  __pyx_v_id_right = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_v_seq_right = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_qual_right = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":267
 *     id_left, seq_left, qual_left = read1.id, read1.seq, read1.qual
 *     id_right, seq_right, qual_right = read2.id, read2.seq, read2.qual
 *     assert id_left.split(' ')[0] == id_right.split(' ')[0], 'Wrongly splitted files!! %s\n%s' %(id_right, id_left)             # <<<<<<<<<<<<<<
 *     barcode = seq_left[:idx_base]
 *     constant_region = seq_left[idx_base:usable_seq]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_id_left, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_id_right, __pyx_n_s_split); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) {
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 267, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_id_right);
      __Pyx_GIVEREF(__pyx_v_id_right);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_id_right);
      __Pyx_INCREF(__pyx_v_id_left);
      __Pyx_GIVEREF(__pyx_v_id_left);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_id_left);
      __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Wrongly_splitted_files_s_s, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 267, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      PyErr_SetObject(PyExc_AssertionError, __pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 267, __pyx_L1_error)
    }
  }
  #endif

  /* "tgirt_seq_tools/cluster_reads.pyx":268
 *     id_right, seq_right, qual_right = read2.id, read2.seq, read2.qual
 *     assert id_left.split(' ')[0] == id_right.split(' ')[0], 'Wrongly splitted files!! %s\n%s' %(id_right, id_left)
 *     barcode = seq_left[:idx_base]             # <<<<<<<<<<<<<<
 *     constant_region = seq_left[idx_base:usable_seq]
 *     barcode_qual_min = int(np.min(map(ord,qual_left[:idx_base])) - 33)
 */
  if (unlikely(__pyx_v_seq_left == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 268, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx_base); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 268, __pyx_L1_error)
  __pyx_t_2 = PySequence_GetSlice(__pyx_v_seq_left, 0, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_barcode = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":269
 *     assert id_left.split(' ')[0] == id_right.split(' ')[0], 'Wrongly splitted files!! %s\n%s' %(id_right, id_left)
 *     barcode = seq_left[:idx_base]
 *     constant_region = seq_left[idx_base:usable_seq]             # <<<<<<<<<<<<<<
 *     barcode_qual_min = int(np.min(map(ord,qual_left[:idx_base])) - 33)
 * 
 */
  if (unlikely(__pyx_v_seq_left == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 269, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx_base); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 269, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_usable_seq); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 269, __pyx_L1_error)
  __pyx_t_2 = PySequence_GetSlice(__pyx_v_seq_left, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_constant_region = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":270
 *     barcode = seq_left[:idx_base]
 *     constant_region = seq_left[idx_base:usable_seq]
 *     barcode_qual_min = int(np.min(map(ord,qual_left[:idx_base])) - 33)             # <<<<<<<<<<<<<<
 * 
 *     no_N_barcode = 'N' not in barcode
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_min); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetBuiltinName(__pyx_n_s_ord); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_v_qual_left == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 270, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx_base); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 270, __pyx_L1_error)
  __pyx_t_7 = PySequence_GetSlice(__pyx_v_qual_left, 0, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_3 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 270, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_7};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 270, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_7};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 270, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 270, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 270, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_t_2, __pyx_int_33, 33, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_barcode_qual_min = __pyx_t_9;

  /* "tgirt_seq_tools/cluster_reads.pyx":272
 *     barcode_qual_min = int(np.min(map(ord,qual_left[:idx_base])) - 33)
 * 
 *     no_N_barcode = 'N' not in barcode             # <<<<<<<<<<<<<<
 *     is_low_complexity_barcode = bool(low_complexity_composition.search(barcode))
 *     hiQ_barcode = barcode_qual_min >= barcode_cut_off
 */
  __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_N, __pyx_v_barcode, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 272, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7cpython_4bool_bool)))) __PYX_ERR(0, 272, __pyx_L1_error)
  __pyx_v_no_N_barcode = ((PyBoolObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":273
 * 
 *     no_N_barcode = 'N' not in barcode
 *     is_low_complexity_barcode = bool(low_complexity_composition.search(barcode))             # <<<<<<<<<<<<<<
 *     hiQ_barcode = barcode_qual_min >= barcode_cut_off
 *     accurate_constant = hamming_distance(constant, constant_region) <= hamming_threshold
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_low_complexity_composition, __pyx_n_s_search); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_barcode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_barcode};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 273, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_barcode};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 273, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 273, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_barcode);
      __Pyx_GIVEREF(__pyx_v_barcode);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_barcode);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 273, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_4bool_bool), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_is_low_complexity_barcode = ((PyBoolObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":274
 *     no_N_barcode = 'N' not in barcode
 *     is_low_complexity_barcode = bool(low_complexity_composition.search(barcode))
 *     hiQ_barcode = barcode_qual_min >= barcode_cut_off             # <<<<<<<<<<<<<<
 *     accurate_constant = hamming_distance(constant, constant_region) <= hamming_threshold
 *     min_qual_left = np.min(map(ord, qual_left))
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_barcode_qual_min); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_v_barcode_cut_off, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7cpython_4bool_bool))))) __PYX_ERR(0, 274, __pyx_L1_error)
  __pyx_v_hiQ_barcode = ((PyBoolObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":275
 *     is_low_complexity_barcode = bool(low_complexity_composition.search(barcode))
 *     hiQ_barcode = barcode_qual_min >= barcode_cut_off
 *     accurate_constant = hamming_distance(constant, constant_region) <= hamming_threshold             # <<<<<<<<<<<<<<
 *     min_qual_left = np.min(map(ord, qual_left))
 *     min_qual_right = np.min(map(ord, qual_right))
 */
  if (!(likely(PyString_CheckExact(__pyx_v_constant))||((__pyx_v_constant) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_constant)->tp_name), 0))) __PYX_ERR(0, 275, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_15tgirt_seq_tools_13cluster_reads_hamming_distance(((PyObject*)__pyx_v_constant), __pyx_v_constant_region, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_v_hamming_threshold, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7cpython_4bool_bool))))) __PYX_ERR(0, 275, __pyx_L1_error)
  __pyx_v_accurate_constant = ((PyBoolObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":276
 *     hiQ_barcode = barcode_qual_min >= barcode_cut_off
 *     accurate_constant = hamming_distance(constant, constant_region) <= hamming_threshold
 *     min_qual_left = np.min(map(ord, qual_left))             # <<<<<<<<<<<<<<
 *     min_qual_right = np.min(map(ord, qual_right))
 *     qual_pass = np.min([min_qual_left,min_qual_right])  >= 53
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_min); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetBuiltinName(__pyx_n_s_ord); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_qual_left);
  __Pyx_GIVEREF(__pyx_v_qual_left);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_qual_left);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 276, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 276, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_min_qual_left = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":277
 *     accurate_constant = hamming_distance(constant, constant_region) <= hamming_threshold
 *     min_qual_left = np.min(map(ord, qual_left))
 *     min_qual_right = np.min(map(ord, qual_right))             # <<<<<<<<<<<<<<
 *     qual_pass = np.min([min_qual_left,min_qual_right])  >= 53
 * 
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_min); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_GetBuiltinName(__pyx_n_s_ord); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __Pyx_INCREF(__pyx_v_qual_right);
  __Pyx_GIVEREF(__pyx_v_qual_right);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_qual_right);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_7};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 277, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_7};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 277, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 277, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 277, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_min_qual_right = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":278
 *     min_qual_left = np.min(map(ord, qual_left))
 *     min_qual_right = np.min(map(ord, qual_right))
 *     qual_pass = np.min([min_qual_left,min_qual_right])  >= 53             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_min); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyList_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_v_min_qual_left);
  __Pyx_GIVEREF(__pyx_v_min_qual_left);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_v_min_qual_left);
  __Pyx_INCREF(__pyx_v_min_qual_right);
  __Pyx_GIVEREF(__pyx_v_min_qual_right);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_v_min_qual_right);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_8};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_8};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_53, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_qual_pass = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":281
 * 
 * 
 *     if no_N_barcode and hiQ_barcode and accurate_constant and qual_pass: #and not low_complexity_barcode:             # <<<<<<<<<<<<<<
 *         seq_left = seq_left[usable_seq:]
 *         qual_left = qual_left[usable_seq:]
 */
  __pyx_t_10 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_no_N_barcode)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 281, __pyx_L1_error)
  if (__pyx_t_10) {
  } else {
    __pyx_t_4 = __pyx_t_10;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_10 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_hiQ_barcode)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 281, __pyx_L1_error)
  if (__pyx_t_10) {
  } else {
    __pyx_t_4 = __pyx_t_10;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_10 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_accurate_constant)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 281, __pyx_L1_error)
  if (__pyx_t_10) {
  } else {
    __pyx_t_4 = __pyx_t_10;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_qual_pass); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 281, __pyx_L1_error)
  __pyx_t_4 = __pyx_t_10;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_4) {

    /* "tgirt_seq_tools/cluster_reads.pyx":282
 * 
 *     if no_N_barcode and hiQ_barcode and accurate_constant and qual_pass: #and not low_complexity_barcode:
 *         seq_left = seq_left[usable_seq:]             # <<<<<<<<<<<<<<
 *         qual_left = qual_left[usable_seq:]
 *         barcode_dict[barcode].append([seq_left, seq_right, qual_left, qual_right])
 */
    if (unlikely(__pyx_v_seq_left == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 282, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_usable_seq); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 282, __pyx_L1_error)
    __pyx_t_3 = PySequence_GetSlice(__pyx_v_seq_left, __pyx_t_6, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_seq_left, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":283
 *     if no_N_barcode and hiQ_barcode and accurate_constant and qual_pass: #and not low_complexity_barcode:
 *         seq_left = seq_left[usable_seq:]
 *         qual_left = qual_left[usable_seq:]             # <<<<<<<<<<<<<<
 *         barcode_dict[barcode].append([seq_left, seq_right, qual_left, qual_right])
 *         return 0
 */
    if (unlikely(__pyx_v_qual_left == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 283, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_usable_seq); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 283, __pyx_L1_error)
    __pyx_t_3 = PySequence_GetSlice(__pyx_v_qual_left, __pyx_t_6, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_qual_left, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":284
 *         seq_left = seq_left[usable_seq:]
 *         qual_left = qual_left[usable_seq:]
 *         barcode_dict[barcode].append([seq_left, seq_right, qual_left, qual_right])             # <<<<<<<<<<<<<<
 *         return 0
 *     return 1
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_barcode_dict, __pyx_v_barcode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyList_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_seq_left);
    __Pyx_GIVEREF(__pyx_v_seq_left);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_v_seq_left);
    __Pyx_INCREF(__pyx_v_seq_right);
    __Pyx_GIVEREF(__pyx_v_seq_right);
    PyList_SET_ITEM(__pyx_t_2, 1, __pyx_v_seq_right);
    __Pyx_INCREF(__pyx_v_qual_left);
    __Pyx_GIVEREF(__pyx_v_qual_left);
    PyList_SET_ITEM(__pyx_t_2, 2, __pyx_v_qual_left);
    __Pyx_INCREF(__pyx_v_qual_right);
    __Pyx_GIVEREF(__pyx_v_qual_right);
    PyList_SET_ITEM(__pyx_t_2, 3, __pyx_v_qual_right);
    __pyx_t_11 = __Pyx_PyObject_Append(__pyx_t_3, __pyx_t_2); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":285
 *         qual_left = qual_left[usable_seq:]
 *         barcode_dict[barcode].append([seq_left, seq_right, qual_left, qual_right])
 *         return 0             # <<<<<<<<<<<<<<
 *     return 1
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "tgirt_seq_tools/cluster_reads.pyx":281
 * 
 * 
 *     if no_N_barcode and hiQ_barcode and accurate_constant and qual_pass: #and not low_complexity_barcode:             # <<<<<<<<<<<<<<
 *         seq_left = seq_left[usable_seq:]
 *         qual_left = qual_left[usable_seq:]
 */
  }

  /* "tgirt_seq_tools/cluster_reads.pyx":286
 *         barcode_dict[barcode].append([seq_left, seq_right, qual_left, qual_right])
 *         return 0
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * def recordsToDict(str outputprefix, str inFastq1, str inFastq2, int idx_base, int barcode_cut_off,
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "tgirt_seq_tools/cluster_reads.pyx":250
 *         return 1
 * 
 * cpdef int readClusteringR1(barcode_dict, idx_base, barcode_cut_off, constant,             # <<<<<<<<<<<<<<
 *                      constant_length, hamming_threshold, usable_seq, failed_file,
 *                      low_complexity_composition, read1, read2):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("tgirt_seq_tools.cluster_reads.readClusteringR1", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_id_left);
  __Pyx_XDECREF(__pyx_v_seq_left);
  __Pyx_XDECREF(__pyx_v_qual_left);
  __Pyx_XDECREF(__pyx_v_id_right);
  __Pyx_XDECREF(__pyx_v_seq_right);
  __Pyx_XDECREF(__pyx_v_qual_right);
  __Pyx_XDECREF(__pyx_v_barcode);
  __Pyx_XDECREF(__pyx_v_constant_region);
  __Pyx_XDECREF((PyObject *)__pyx_v_no_N_barcode);
  __Pyx_XDECREF((PyObject *)__pyx_v_is_low_complexity_barcode);
  __Pyx_XDECREF((PyObject *)__pyx_v_hiQ_barcode);
  __Pyx_XDECREF((PyObject *)__pyx_v_accurate_constant);
  __Pyx_XDECREF(__pyx_v_min_qual_left);
  __Pyx_XDECREF(__pyx_v_min_qual_right);
  __Pyx_XDECREF(__pyx_v_qual_pass);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_23readClusteringR1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15tgirt_seq_tools_13cluster_reads_22readClusteringR1[] = "\n    generate read cluster with a dictionary object and seqRecord class.\n    index of the dictionary is the barcode extracted from first /idx_bases/ of read 1\n    ";
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_23readClusteringR1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_barcode_dict = 0;
  PyObject *__pyx_v_idx_base = 0;
  PyObject *__pyx_v_barcode_cut_off = 0;
  PyObject *__pyx_v_constant = 0;
  PyObject *__pyx_v_constant_length = 0;
  PyObject *__pyx_v_hamming_threshold = 0;
  PyObject *__pyx_v_usable_seq = 0;
  PyObject *__pyx_v_failed_file = 0;
  PyObject *__pyx_v_low_complexity_composition = 0;
  PyObject *__pyx_v_read1 = 0;
  PyObject *__pyx_v_read2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readClusteringR1 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_barcode_dict,&__pyx_n_s_idx_base,&__pyx_n_s_barcode_cut_off,&__pyx_n_s_constant,&__pyx_n_s_constant_length,&__pyx_n_s_hamming_threshold,&__pyx_n_s_usable_seq,&__pyx_n_s_failed_file,&__pyx_n_s_low_complexity_composition,&__pyx_n_s_read1,&__pyx_n_s_read2,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_barcode_dict)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_idx_base)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readClusteringR1", 1, 11, 11, 1); __PYX_ERR(0, 250, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_barcode_cut_off)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readClusteringR1", 1, 11, 11, 2); __PYX_ERR(0, 250, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_constant)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readClusteringR1", 1, 11, 11, 3); __PYX_ERR(0, 250, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_constant_length)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readClusteringR1", 1, 11, 11, 4); __PYX_ERR(0, 250, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hamming_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readClusteringR1", 1, 11, 11, 5); __PYX_ERR(0, 250, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_usable_seq)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readClusteringR1", 1, 11, 11, 6); __PYX_ERR(0, 250, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_failed_file)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readClusteringR1", 1, 11, 11, 7); __PYX_ERR(0, 250, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_low_complexity_composition)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readClusteringR1", 1, 11, 11, 8); __PYX_ERR(0, 250, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_read1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readClusteringR1", 1, 11, 11, 9); __PYX_ERR(0, 250, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_read2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readClusteringR1", 1, 11, 11, 10); __PYX_ERR(0, 250, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "readClusteringR1") < 0)) __PYX_ERR(0, 250, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 11) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
    }
    __pyx_v_barcode_dict = values[0];
    __pyx_v_idx_base = values[1];
    __pyx_v_barcode_cut_off = values[2];
    __pyx_v_constant = values[3];
    __pyx_v_constant_length = values[4];
    __pyx_v_hamming_threshold = values[5];
    __pyx_v_usable_seq = values[6];
    __pyx_v_failed_file = values[7];
    __pyx_v_low_complexity_composition = values[8];
    __pyx_v_read1 = values[9];
    __pyx_v_read2 = values[10];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readClusteringR1", 1, 11, 11, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 250, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.readClusteringR1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_22readClusteringR1(__pyx_self, __pyx_v_barcode_dict, __pyx_v_idx_base, __pyx_v_barcode_cut_off, __pyx_v_constant, __pyx_v_constant_length, __pyx_v_hamming_threshold, __pyx_v_usable_seq, __pyx_v_failed_file, __pyx_v_low_complexity_composition, __pyx_v_read1, __pyx_v_read2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_22readClusteringR1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_barcode_dict, PyObject *__pyx_v_idx_base, PyObject *__pyx_v_barcode_cut_off, PyObject *__pyx_v_constant, PyObject *__pyx_v_constant_length, PyObject *__pyx_v_hamming_threshold, PyObject *__pyx_v_usable_seq, PyObject *__pyx_v_failed_file, PyObject *__pyx_v_low_complexity_composition, PyObject *__pyx_v_read1, PyObject *__pyx_v_read2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("readClusteringR1", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_15tgirt_seq_tools_13cluster_reads_readClusteringR1(__pyx_v_barcode_dict, __pyx_v_idx_base, __pyx_v_barcode_cut_off, __pyx_v_constant, __pyx_v_constant_length, __pyx_v_hamming_threshold, __pyx_v_usable_seq, __pyx_v_failed_file, __pyx_v_low_complexity_composition, __pyx_v_read1, __pyx_v_read2, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.readClusteringR1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/cluster_reads.pyx":288
 *     return 1
 * 
 * def recordsToDict(str outputprefix, str inFastq1, str inFastq2, int idx_base, int barcode_cut_off,             # <<<<<<<<<<<<<<
 *                 str constant, barcode_dict, int allow_mismatch, str which_side, str programname):
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_25recordsToDict(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15tgirt_seq_tools_13cluster_reads_25recordsToDict = {"recordsToDict", (PyCFunction)__pyx_pw_15tgirt_seq_tools_13cluster_reads_25recordsToDict, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_25recordsToDict(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_outputprefix = 0;
  PyObject *__pyx_v_inFastq1 = 0;
  PyObject *__pyx_v_inFastq2 = 0;
  int __pyx_v_idx_base;
  int __pyx_v_barcode_cut_off;
  PyObject *__pyx_v_constant = 0;
  PyObject *__pyx_v_barcode_dict = 0;
  int __pyx_v_allow_mismatch;
  PyObject *__pyx_v_which_side = 0;
  PyObject *__pyx_v_programname = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("recordsToDict (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_outputprefix,&__pyx_n_s_inFastq1,&__pyx_n_s_inFastq2,&__pyx_n_s_idx_base,&__pyx_n_s_barcode_cut_off,&__pyx_n_s_constant,&__pyx_n_s_barcode_dict,&__pyx_n_s_allow_mismatch,&__pyx_n_s_which_side,&__pyx_n_s_programname,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_outputprefix)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inFastq1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("recordsToDict", 1, 10, 10, 1); __PYX_ERR(0, 288, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inFastq2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("recordsToDict", 1, 10, 10, 2); __PYX_ERR(0, 288, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_idx_base)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("recordsToDict", 1, 10, 10, 3); __PYX_ERR(0, 288, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_barcode_cut_off)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("recordsToDict", 1, 10, 10, 4); __PYX_ERR(0, 288, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_constant)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("recordsToDict", 1, 10, 10, 5); __PYX_ERR(0, 288, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_barcode_dict)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("recordsToDict", 1, 10, 10, 6); __PYX_ERR(0, 288, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allow_mismatch)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("recordsToDict", 1, 10, 10, 7); __PYX_ERR(0, 288, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_which_side)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("recordsToDict", 1, 10, 10, 8); __PYX_ERR(0, 288, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_programname)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("recordsToDict", 1, 10, 10, 9); __PYX_ERR(0, 288, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "recordsToDict") < 0)) __PYX_ERR(0, 288, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_outputprefix = ((PyObject*)values[0]);
    __pyx_v_inFastq1 = ((PyObject*)values[1]);
    __pyx_v_inFastq2 = ((PyObject*)values[2]);
    __pyx_v_idx_base = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_idx_base == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 288, __pyx_L3_error)
    __pyx_v_barcode_cut_off = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_barcode_cut_off == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 288, __pyx_L3_error)
    __pyx_v_constant = ((PyObject*)values[5]);
    __pyx_v_barcode_dict = values[6];
    __pyx_v_allow_mismatch = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_allow_mismatch == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 289, __pyx_L3_error)
    __pyx_v_which_side = ((PyObject*)values[8]);
    __pyx_v_programname = ((PyObject*)values[9]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("recordsToDict", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 288, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.recordsToDict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_outputprefix), (&PyString_Type), 1, "outputprefix", 1))) __PYX_ERR(0, 288, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inFastq1), (&PyString_Type), 1, "inFastq1", 1))) __PYX_ERR(0, 288, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inFastq2), (&PyString_Type), 1, "inFastq2", 1))) __PYX_ERR(0, 288, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_constant), (&PyString_Type), 1, "constant", 1))) __PYX_ERR(0, 289, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_which_side), (&PyString_Type), 1, "which_side", 1))) __PYX_ERR(0, 289, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_programname), (&PyString_Type), 1, "programname", 1))) __PYX_ERR(0, 289, __pyx_L1_error)
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_24recordsToDict(__pyx_self, __pyx_v_outputprefix, __pyx_v_inFastq1, __pyx_v_inFastq2, __pyx_v_idx_base, __pyx_v_barcode_cut_off, __pyx_v_constant, __pyx_v_barcode_dict, __pyx_v_allow_mismatch, __pyx_v_which_side, __pyx_v_programname);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_24recordsToDict(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_outputprefix, PyObject *__pyx_v_inFastq1, PyObject *__pyx_v_inFastq2, int __pyx_v_idx_base, int __pyx_v_barcode_cut_off, PyObject *__pyx_v_constant, PyObject *__pyx_v_barcode_dict, int __pyx_v_allow_mismatch, PyObject *__pyx_v_which_side, PyObject *__pyx_v_programname) {
  int __pyx_v_discarded_sequence_count;
  int __pyx_v_constant_length;
  int __pyx_v_usable_seq;
  int __pyx_v_mul;
  PyObject *__pyx_v_failed_reads = 0;
  int __pyx_v_read_num;
  struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_read1 = 0;
  struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_read2 = 0;
  PyObject *__pyx_v_low_complexity_base = NULL;
  PyObject *__pyx_v_low_complexity_composition = NULL;
  PyObject *__pyx_v_fq1 = NULL;
  PyObject *__pyx_v_fq2 = NULL;
  PyObject *__pyx_v_failed_file = NULL;
  PyObject *__pyx_v_cluster_reads = NULL;
  PyObject *__pyx_v_iterator = NULL;
  Py_ssize_t __pyx_v_barcode_count;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  int __pyx_t_21;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  PyObject *(*__pyx_t_27)(PyObject *);
  PyObject *(*__pyx_t_28)(PyObject *);
  PyObject *__pyx_t_29 = NULL;
  __Pyx_RefNannySetupContext("recordsToDict", 0);

  /* "tgirt_seq_tools/cluster_reads.pyx":292
 * 
 *     cdef:
 *         int discarded_sequence_count = 0             # <<<<<<<<<<<<<<
 *         int constant_length = len(constant)
 *         int usable_seq = idx_base + constant_length
 */
  __pyx_v_discarded_sequence_count = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":293
 *     cdef:
 *         int discarded_sequence_count = 0
 *         int constant_length = len(constant)             # <<<<<<<<<<<<<<
 *         int usable_seq = idx_base + constant_length
 *         int mul = 6
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_constant); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 293, __pyx_L1_error)
  __pyx_v_constant_length = __pyx_t_1;

  /* "tgirt_seq_tools/cluster_reads.pyx":294
 *         int discarded_sequence_count = 0
 *         int constant_length = len(constant)
 *         int usable_seq = idx_base + constant_length             # <<<<<<<<<<<<<<
 *         int mul = 6
 *         str failed_reads
 */
  __pyx_v_usable_seq = (__pyx_v_idx_base + __pyx_v_constant_length);

  /* "tgirt_seq_tools/cluster_reads.pyx":295
 *         int constant_length = len(constant)
 *         int usable_seq = idx_base + constant_length
 *         int mul = 6             # <<<<<<<<<<<<<<
 *         str failed_reads
 *         int read_num
 */
  __pyx_v_mul = 6;

  /* "tgirt_seq_tools/cluster_reads.pyx":300
 *         fastqRecord read1, read2
 * 
 *     low_complexity_base = ['A' * mul,'C' * mul,'T' * mul,'G' * mul]             # <<<<<<<<<<<<<<
 *     low_complexity_composition = re.compile('|'.join(low_complexity_base))
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_mul); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_n_s_A, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_mul); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Multiply(__pyx_n_s_C, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_mul); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyNumber_Multiply(__pyx_n_s_T, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_mul); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyNumber_Multiply(__pyx_n_s_G, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_t_6);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_v_low_complexity_base = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":301
 * 
 *     low_complexity_base = ['A' * mul,'C' * mul,'T' * mul,'G' * mul]
 *     low_complexity_composition = re.compile('|'.join(low_complexity_base))             # <<<<<<<<<<<<<<
 * 
 *     failed_reads = outputprefix + '-failed.tsv'
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_compile); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyString_Join(__pyx_kp_s__34, __pyx_v_low_complexity_base); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 301, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_low_complexity_composition = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":303
 *     low_complexity_composition = re.compile('|'.join(low_complexity_base))
 * 
 *     failed_reads = outputprefix + '-failed.tsv'             # <<<<<<<<<<<<<<
 *     with gzip_open(inFastq1,'rb') as fq1, gzip_open(inFastq2,'rb') as fq2, open(failed_reads,'w') as failed_file:
 * 
 */
  __pyx_t_2 = PyNumber_Add(__pyx_v_outputprefix, __pyx_kp_s_failed_tsv); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_failed_reads = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":304
 * 
 *     failed_reads = outputprefix + '-failed.tsv'
 *     with gzip_open(inFastq1,'rb') as fq1, gzip_open(inFastq2,'rb') as fq2, open(failed_reads,'w') as failed_file:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*with:*/ {
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_gzip_open); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_inFastq1, __pyx_n_s_rb};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_inFastq1, __pyx_n_s_rb};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 304, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_inFastq1);
      __Pyx_GIVEREF(__pyx_v_inFastq1);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, __pyx_v_inFastq1);
      __Pyx_INCREF(__pyx_n_s_rb);
      __Pyx_GIVEREF(__pyx_n_s_rb);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, __pyx_n_s_rb);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 304, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 304, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 304, __pyx_L3_error)
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __pyx_t_5;
    __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        /*try:*/ {
          __pyx_v_fq1 = __pyx_t_6;
          __pyx_t_6 = 0;
          /*with:*/ {
            __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_gzip_open); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_5 = NULL;
            __pyx_t_7 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_2, function);
                __pyx_t_7 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_2)) {
              PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_inFastq2, __pyx_n_s_rb};
              __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 304, __pyx_L7_error)
              __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_GOTREF(__pyx_t_6);
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
              PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_inFastq2, __pyx_n_s_rb};
              __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 304, __pyx_L7_error)
              __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_GOTREF(__pyx_t_6);
            } else
            #endif
            {
              __pyx_t_3 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 304, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_3);
              if (__pyx_t_5) {
                __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
              }
              __Pyx_INCREF(__pyx_v_inFastq2);
              __Pyx_GIVEREF(__pyx_v_inFastq2);
              PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_7, __pyx_v_inFastq2);
              __Pyx_INCREF(__pyx_n_s_rb);
              __Pyx_GIVEREF(__pyx_n_s_rb);
              PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_7, __pyx_n_s_rb);
              __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 304, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            }
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_12 = __Pyx_PyObject_LookupSpecial(__pyx_t_6, __pyx_n_s_exit); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 304, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_6, __pyx_n_s_enter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 304, __pyx_L15_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_5 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
              }
            }
            if (__pyx_t_5) {
              __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L15_error)
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            } else {
              __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L15_error)
            }
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = __pyx_t_2;
            __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            /*try:*/ {
              {
                __Pyx_PyThreadState_declare
                __Pyx_PyThreadState_assign
                __Pyx_ExceptionSave(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
                __Pyx_XGOTREF(__pyx_t_13);
                __Pyx_XGOTREF(__pyx_t_14);
                __Pyx_XGOTREF(__pyx_t_15);
                /*try:*/ {
                  __pyx_v_fq2 = __pyx_t_3;
                  __pyx_t_3 = 0;
                  /*with:*/ {
                    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 304, __pyx_L21_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __Pyx_INCREF(__pyx_v_failed_reads);
                    __Pyx_GIVEREF(__pyx_v_failed_reads);
                    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_failed_reads);
                    __Pyx_INCREF(__pyx_n_s_w);
                    __Pyx_GIVEREF(__pyx_n_s_w);
                    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_w);
                    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 304, __pyx_L21_error)
                    __Pyx_GOTREF(__pyx_t_6);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    __pyx_t_16 = __Pyx_PyObject_LookupSpecial(__pyx_t_6, __pyx_n_s_exit); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 304, __pyx_L21_error)
                    __Pyx_GOTREF(__pyx_t_16);
                    __pyx_t_2 = __Pyx_PyObject_LookupSpecial(__pyx_t_6, __pyx_n_s_enter); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L29_error)
                    __Pyx_GOTREF(__pyx_t_2);
                    __pyx_t_5 = NULL;
                    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
                      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
                      if (likely(__pyx_t_5)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                        __Pyx_INCREF(__pyx_t_5);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_2, function);
                      }
                    }
                    if (__pyx_t_5) {
                      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 304, __pyx_L29_error)
                      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                    } else {
                      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 304, __pyx_L29_error)
                    }
                    __Pyx_GOTREF(__pyx_t_3);
                    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                    __pyx_t_2 = __pyx_t_3;
                    __pyx_t_3 = 0;
                    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                    /*try:*/ {
                      {
                        __Pyx_PyThreadState_declare
                        __Pyx_PyThreadState_assign
                        __Pyx_ExceptionSave(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
                        __Pyx_XGOTREF(__pyx_t_17);
                        __Pyx_XGOTREF(__pyx_t_18);
                        __Pyx_XGOTREF(__pyx_t_19);
                        /*try:*/ {
                          __pyx_v_failed_file = __pyx_t_2;
                          __pyx_t_2 = 0;

                          /* "tgirt_seq_tools/cluster_reads.pyx":307
 * 
 * 
 *         if which_side == 'read2':             # <<<<<<<<<<<<<<
 *             cluster_reads = partial(readClusteringR2, barcode_dict, idx_base, barcode_cut_off,
 *                             constant, constant_length, allow_mismatch, usable_seq,
 */
                          __pyx_t_20 = (__Pyx_PyString_Equals(__pyx_v_which_side, __pyx_n_s_read2, Py_EQ)); if (unlikely(__pyx_t_20 < 0)) __PYX_ERR(0, 307, __pyx_L35_error)
                          __pyx_t_21 = (__pyx_t_20 != 0);
                          if (__pyx_t_21) {

                            /* "tgirt_seq_tools/cluster_reads.pyx":308
 * 
 *         if which_side == 'read2':
 *             cluster_reads = partial(readClusteringR2, barcode_dict, idx_base, barcode_cut_off,             # <<<<<<<<<<<<<<
 *                             constant, constant_length, allow_mismatch, usable_seq,
 *                             failed_file, low_complexity_composition)
 */
                            __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_partial); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 308, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_6);
                            __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_readClusteringR2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 308, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_3);
                            __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_idx_base); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 308, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_5);
                            __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_barcode_cut_off); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 308, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_4);

                            /* "tgirt_seq_tools/cluster_reads.pyx":309
 *         if which_side == 'read2':
 *             cluster_reads = partial(readClusteringR2, barcode_dict, idx_base, barcode_cut_off,
 *                             constant, constant_length, allow_mismatch, usable_seq,             # <<<<<<<<<<<<<<
 *                             failed_file, low_complexity_composition)
 *         elif which_side == 'read1':
 */
                            __pyx_t_22 = __Pyx_PyInt_From_int(__pyx_v_constant_length); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 309, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_22);
                            __pyx_t_23 = __Pyx_PyInt_From_int(__pyx_v_allow_mismatch); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 309, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_23);
                            __pyx_t_24 = __Pyx_PyInt_From_int(__pyx_v_usable_seq); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 309, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_24);

                            /* "tgirt_seq_tools/cluster_reads.pyx":310
 *             cluster_reads = partial(readClusteringR2, barcode_dict, idx_base, barcode_cut_off,
 *                             constant, constant_length, allow_mismatch, usable_seq,
 *                             failed_file, low_complexity_composition)             # <<<<<<<<<<<<<<
 *         elif which_side == 'read1':
 *             cluster_reads = partial(readClusteringR1, barcode_dict, idx_base, barcode_cut_off,
 */
                            __pyx_t_25 = NULL;
                            __pyx_t_7 = 0;
                            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
                              __pyx_t_25 = PyMethod_GET_SELF(__pyx_t_6);
                              if (likely(__pyx_t_25)) {
                                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                                __Pyx_INCREF(__pyx_t_25);
                                __Pyx_INCREF(function);
                                __Pyx_DECREF_SET(__pyx_t_6, function);
                                __pyx_t_7 = 1;
                              }
                            }
                            #if CYTHON_FAST_PYCALL
                            if (PyFunction_Check(__pyx_t_6)) {
                              PyObject *__pyx_temp[11] = {__pyx_t_25, __pyx_t_3, __pyx_v_barcode_dict, __pyx_t_5, __pyx_t_4, __pyx_v_constant, __pyx_t_22, __pyx_t_23, __pyx_t_24, __pyx_v_failed_file, __pyx_v_low_complexity_composition};
                              __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 10+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 308, __pyx_L35_error)
                              __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
                              __Pyx_GOTREF(__pyx_t_2);
                              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                              __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
                              __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                              __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
                            } else
                            #endif
                            #if CYTHON_FAST_PYCCALL
                            if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
                              PyObject *__pyx_temp[11] = {__pyx_t_25, __pyx_t_3, __pyx_v_barcode_dict, __pyx_t_5, __pyx_t_4, __pyx_v_constant, __pyx_t_22, __pyx_t_23, __pyx_t_24, __pyx_v_failed_file, __pyx_v_low_complexity_composition};
                              __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 10+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 308, __pyx_L35_error)
                              __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
                              __Pyx_GOTREF(__pyx_t_2);
                              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                              __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
                              __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                              __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
                            } else
                            #endif
                            {
                              __pyx_t_26 = PyTuple_New(10+__pyx_t_7); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 308, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_26);
                              if (__pyx_t_25) {
                                __Pyx_GIVEREF(__pyx_t_25); PyTuple_SET_ITEM(__pyx_t_26, 0, __pyx_t_25); __pyx_t_25 = NULL;
                              }
                              __Pyx_GIVEREF(__pyx_t_3);
                              PyTuple_SET_ITEM(__pyx_t_26, 0+__pyx_t_7, __pyx_t_3);
                              __Pyx_INCREF(__pyx_v_barcode_dict);
                              __Pyx_GIVEREF(__pyx_v_barcode_dict);
                              PyTuple_SET_ITEM(__pyx_t_26, 1+__pyx_t_7, __pyx_v_barcode_dict);
                              __Pyx_GIVEREF(__pyx_t_5);
                              PyTuple_SET_ITEM(__pyx_t_26, 2+__pyx_t_7, __pyx_t_5);
                              __Pyx_GIVEREF(__pyx_t_4);
                              PyTuple_SET_ITEM(__pyx_t_26, 3+__pyx_t_7, __pyx_t_4);
                              __Pyx_INCREF(__pyx_v_constant);
                              __Pyx_GIVEREF(__pyx_v_constant);
                              PyTuple_SET_ITEM(__pyx_t_26, 4+__pyx_t_7, __pyx_v_constant);
                              __Pyx_GIVEREF(__pyx_t_22);
                              PyTuple_SET_ITEM(__pyx_t_26, 5+__pyx_t_7, __pyx_t_22);
                              __Pyx_GIVEREF(__pyx_t_23);
                              PyTuple_SET_ITEM(__pyx_t_26, 6+__pyx_t_7, __pyx_t_23);
                              __Pyx_GIVEREF(__pyx_t_24);
                              PyTuple_SET_ITEM(__pyx_t_26, 7+__pyx_t_7, __pyx_t_24);
                              __Pyx_INCREF(__pyx_v_failed_file);
                              __Pyx_GIVEREF(__pyx_v_failed_file);
                              PyTuple_SET_ITEM(__pyx_t_26, 8+__pyx_t_7, __pyx_v_failed_file);
                              __Pyx_INCREF(__pyx_v_low_complexity_composition);
                              __Pyx_GIVEREF(__pyx_v_low_complexity_composition);
                              PyTuple_SET_ITEM(__pyx_t_26, 9+__pyx_t_7, __pyx_v_low_complexity_composition);
                              __pyx_t_3 = 0;
                              __pyx_t_5 = 0;
                              __pyx_t_4 = 0;
                              __pyx_t_22 = 0;
                              __pyx_t_23 = 0;
                              __pyx_t_24 = 0;
                              __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_26, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 308, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_2);
                              __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
                            }
                            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                            __pyx_v_cluster_reads = __pyx_t_2;
                            __pyx_t_2 = 0;

                            /* "tgirt_seq_tools/cluster_reads.pyx":307
 * 
 * 
 *         if which_side == 'read2':             # <<<<<<<<<<<<<<
 *             cluster_reads = partial(readClusteringR2, barcode_dict, idx_base, barcode_cut_off,
 *                             constant, constant_length, allow_mismatch, usable_seq,
 */
                            goto __pyx_L43;
                          }

                          /* "tgirt_seq_tools/cluster_reads.pyx":311
 *                             constant, constant_length, allow_mismatch, usable_seq,
 *                             failed_file, low_complexity_composition)
 *         elif which_side == 'read1':             # <<<<<<<<<<<<<<
 *             cluster_reads = partial(readClusteringR1, barcode_dict, idx_base, barcode_cut_off,
 *                             constant, constant_length, allow_mismatch, usable_seq,
 */
                          __pyx_t_21 = (__Pyx_PyString_Equals(__pyx_v_which_side, __pyx_n_s_read1, Py_EQ)); if (unlikely(__pyx_t_21 < 0)) __PYX_ERR(0, 311, __pyx_L35_error)
                          __pyx_t_20 = (__pyx_t_21 != 0);
                          if (__pyx_t_20) {

                            /* "tgirt_seq_tools/cluster_reads.pyx":312
 *                             failed_file, low_complexity_composition)
 *         elif which_side == 'read1':
 *             cluster_reads = partial(readClusteringR1, barcode_dict, idx_base, barcode_cut_off,             # <<<<<<<<<<<<<<
 *                             constant, constant_length, allow_mismatch, usable_seq,
 *                             failed_file, low_complexity_composition)
 */
                            __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_partial); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 312, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_6);
                            __pyx_t_26 = __Pyx_GetModuleGlobalName(__pyx_n_s_readClusteringR1); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 312, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_26);
                            __pyx_t_24 = __Pyx_PyInt_From_int(__pyx_v_idx_base); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 312, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_24);
                            __pyx_t_23 = __Pyx_PyInt_From_int(__pyx_v_barcode_cut_off); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 312, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_23);

                            /* "tgirt_seq_tools/cluster_reads.pyx":313
 *         elif which_side == 'read1':
 *             cluster_reads = partial(readClusteringR1, barcode_dict, idx_base, barcode_cut_off,
 *                             constant, constant_length, allow_mismatch, usable_seq,             # <<<<<<<<<<<<<<
 *                             failed_file, low_complexity_composition)
 * 
 */
                            __pyx_t_22 = __Pyx_PyInt_From_int(__pyx_v_constant_length); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 313, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_22);
                            __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_allow_mismatch); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 313, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_4);
                            __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_usable_seq); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 313, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_5);

                            /* "tgirt_seq_tools/cluster_reads.pyx":314
 *             cluster_reads = partial(readClusteringR1, barcode_dict, idx_base, barcode_cut_off,
 *                             constant, constant_length, allow_mismatch, usable_seq,
 *                             failed_file, low_complexity_composition)             # <<<<<<<<<<<<<<
 * 
 *         iterator = enumerate(izip(read_fastq(fq1), read_fastq(fq2)))
 */
                            __pyx_t_3 = NULL;
                            __pyx_t_7 = 0;
                            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
                              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
                              if (likely(__pyx_t_3)) {
                                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                                __Pyx_INCREF(__pyx_t_3);
                                __Pyx_INCREF(function);
                                __Pyx_DECREF_SET(__pyx_t_6, function);
                                __pyx_t_7 = 1;
                              }
                            }
                            #if CYTHON_FAST_PYCALL
                            if (PyFunction_Check(__pyx_t_6)) {
                              PyObject *__pyx_temp[11] = {__pyx_t_3, __pyx_t_26, __pyx_v_barcode_dict, __pyx_t_24, __pyx_t_23, __pyx_v_constant, __pyx_t_22, __pyx_t_4, __pyx_t_5, __pyx_v_failed_file, __pyx_v_low_complexity_composition};
                              __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 10+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 312, __pyx_L35_error)
                              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                              __Pyx_GOTREF(__pyx_t_2);
                              __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
                              __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
                              __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                              __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
                              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                            } else
                            #endif
                            #if CYTHON_FAST_PYCCALL
                            if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
                              PyObject *__pyx_temp[11] = {__pyx_t_3, __pyx_t_26, __pyx_v_barcode_dict, __pyx_t_24, __pyx_t_23, __pyx_v_constant, __pyx_t_22, __pyx_t_4, __pyx_t_5, __pyx_v_failed_file, __pyx_v_low_complexity_composition};
                              __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 10+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 312, __pyx_L35_error)
                              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                              __Pyx_GOTREF(__pyx_t_2);
                              __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
                              __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
                              __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                              __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
                              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                            } else
                            #endif
                            {
                              __pyx_t_25 = PyTuple_New(10+__pyx_t_7); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 312, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_25);
                              if (__pyx_t_3) {
                                __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_25, 0, __pyx_t_3); __pyx_t_3 = NULL;
                              }
                              __Pyx_GIVEREF(__pyx_t_26);
                              PyTuple_SET_ITEM(__pyx_t_25, 0+__pyx_t_7, __pyx_t_26);
                              __Pyx_INCREF(__pyx_v_barcode_dict);
                              __Pyx_GIVEREF(__pyx_v_barcode_dict);
                              PyTuple_SET_ITEM(__pyx_t_25, 1+__pyx_t_7, __pyx_v_barcode_dict);
                              __Pyx_GIVEREF(__pyx_t_24);
                              PyTuple_SET_ITEM(__pyx_t_25, 2+__pyx_t_7, __pyx_t_24);
                              __Pyx_GIVEREF(__pyx_t_23);
                              PyTuple_SET_ITEM(__pyx_t_25, 3+__pyx_t_7, __pyx_t_23);
                              __Pyx_INCREF(__pyx_v_constant);
                              __Pyx_GIVEREF(__pyx_v_constant);
                              PyTuple_SET_ITEM(__pyx_t_25, 4+__pyx_t_7, __pyx_v_constant);
                              __Pyx_GIVEREF(__pyx_t_22);
                              PyTuple_SET_ITEM(__pyx_t_25, 5+__pyx_t_7, __pyx_t_22);
                              __Pyx_GIVEREF(__pyx_t_4);
                              PyTuple_SET_ITEM(__pyx_t_25, 6+__pyx_t_7, __pyx_t_4);
                              __Pyx_GIVEREF(__pyx_t_5);
                              PyTuple_SET_ITEM(__pyx_t_25, 7+__pyx_t_7, __pyx_t_5);
                              __Pyx_INCREF(__pyx_v_failed_file);
                              __Pyx_GIVEREF(__pyx_v_failed_file);
                              PyTuple_SET_ITEM(__pyx_t_25, 8+__pyx_t_7, __pyx_v_failed_file);
                              __Pyx_INCREF(__pyx_v_low_complexity_composition);
                              __Pyx_GIVEREF(__pyx_v_low_complexity_composition);
                              PyTuple_SET_ITEM(__pyx_t_25, 9+__pyx_t_7, __pyx_v_low_complexity_composition);
                              __pyx_t_26 = 0;
                              __pyx_t_24 = 0;
                              __pyx_t_23 = 0;
                              __pyx_t_22 = 0;
                              __pyx_t_4 = 0;
                              __pyx_t_5 = 0;
                              __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_25, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 312, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_2);
                              __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
                            }
                            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                            __pyx_v_cluster_reads = __pyx_t_2;
                            __pyx_t_2 = 0;

                            /* "tgirt_seq_tools/cluster_reads.pyx":311
 *                             constant, constant_length, allow_mismatch, usable_seq,
 *                             failed_file, low_complexity_composition)
 *         elif which_side == 'read1':             # <<<<<<<<<<<<<<
 *             cluster_reads = partial(readClusteringR1, barcode_dict, idx_base, barcode_cut_off,
 *                             constant, constant_length, allow_mismatch, usable_seq,
 */
                          }
                          __pyx_L43:;

                          /* "tgirt_seq_tools/cluster_reads.pyx":316
 *                             failed_file, low_complexity_composition)
 * 
 *         iterator = enumerate(izip(read_fastq(fq1), read_fastq(fq2)))             # <<<<<<<<<<<<<<
 *         for read_num, (read1,read2) in iterator:
 *             discarded_sequence_count += cluster_reads(read1, read2)
 */
                          __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_izip); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 316, __pyx_L35_error)
                          __Pyx_GOTREF(__pyx_t_6);
                          __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_read_fastq); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 316, __pyx_L35_error)
                          __Pyx_GOTREF(__pyx_t_5);
                          __pyx_t_4 = NULL;
                          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
                            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
                            if (likely(__pyx_t_4)) {
                              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                              __Pyx_INCREF(__pyx_t_4);
                              __Pyx_INCREF(function);
                              __Pyx_DECREF_SET(__pyx_t_5, function);
                            }
                          }
                          if (!__pyx_t_4) {
                            __pyx_t_25 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_fq1); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 316, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_25);
                          } else {
                            #if CYTHON_FAST_PYCALL
                            if (PyFunction_Check(__pyx_t_5)) {
                              PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_fq1};
                              __pyx_t_25 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 316, __pyx_L35_error)
                              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                              __Pyx_GOTREF(__pyx_t_25);
                            } else
                            #endif
                            #if CYTHON_FAST_PYCCALL
                            if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
                              PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_fq1};
                              __pyx_t_25 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 316, __pyx_L35_error)
                              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                              __Pyx_GOTREF(__pyx_t_25);
                            } else
                            #endif
                            {
                              __pyx_t_22 = PyTuple_New(1+1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 316, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_22);
                              __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_4); __pyx_t_4 = NULL;
                              __Pyx_INCREF(__pyx_v_fq1);
                              __Pyx_GIVEREF(__pyx_v_fq1);
                              PyTuple_SET_ITEM(__pyx_t_22, 0+1, __pyx_v_fq1);
                              __pyx_t_25 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_22, NULL); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 316, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_25);
                              __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
                            }
                          }
                          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                          __pyx_t_22 = __Pyx_GetModuleGlobalName(__pyx_n_s_read_fastq); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 316, __pyx_L35_error)
                          __Pyx_GOTREF(__pyx_t_22);
                          __pyx_t_4 = NULL;
                          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_22))) {
                            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_22);
                            if (likely(__pyx_t_4)) {
                              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_22);
                              __Pyx_INCREF(__pyx_t_4);
                              __Pyx_INCREF(function);
                              __Pyx_DECREF_SET(__pyx_t_22, function);
                            }
                          }
                          if (!__pyx_t_4) {
                            __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_22, __pyx_v_fq2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 316, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_5);
                          } else {
                            #if CYTHON_FAST_PYCALL
                            if (PyFunction_Check(__pyx_t_22)) {
                              PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_fq2};
                              __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_22, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 316, __pyx_L35_error)
                              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                              __Pyx_GOTREF(__pyx_t_5);
                            } else
                            #endif
                            #if CYTHON_FAST_PYCCALL
                            if (__Pyx_PyFastCFunction_Check(__pyx_t_22)) {
                              PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_fq2};
                              __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_22, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 316, __pyx_L35_error)
                              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                              __Pyx_GOTREF(__pyx_t_5);
                            } else
                            #endif
                            {
                              __pyx_t_23 = PyTuple_New(1+1); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 316, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_23);
                              __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_t_4); __pyx_t_4 = NULL;
                              __Pyx_INCREF(__pyx_v_fq2);
                              __Pyx_GIVEREF(__pyx_v_fq2);
                              PyTuple_SET_ITEM(__pyx_t_23, 0+1, __pyx_v_fq2);
                              __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_22, __pyx_t_23, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 316, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_5);
                              __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                            }
                          }
                          __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
                          __pyx_t_22 = NULL;
                          __pyx_t_7 = 0;
                          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
                            __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_6);
                            if (likely(__pyx_t_22)) {
                              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                              __Pyx_INCREF(__pyx_t_22);
                              __Pyx_INCREF(function);
                              __Pyx_DECREF_SET(__pyx_t_6, function);
                              __pyx_t_7 = 1;
                            }
                          }
                          #if CYTHON_FAST_PYCALL
                          if (PyFunction_Check(__pyx_t_6)) {
                            PyObject *__pyx_temp[3] = {__pyx_t_22, __pyx_t_25, __pyx_t_5};
                            __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 316, __pyx_L35_error)
                            __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
                            __Pyx_GOTREF(__pyx_t_2);
                            __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
                            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                          } else
                          #endif
                          #if CYTHON_FAST_PYCCALL
                          if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
                            PyObject *__pyx_temp[3] = {__pyx_t_22, __pyx_t_25, __pyx_t_5};
                            __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 316, __pyx_L35_error)
                            __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
                            __Pyx_GOTREF(__pyx_t_2);
                            __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
                            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                          } else
                          #endif
                          {
                            __pyx_t_23 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 316, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_23);
                            if (__pyx_t_22) {
                              __Pyx_GIVEREF(__pyx_t_22); PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_t_22); __pyx_t_22 = NULL;
                            }
                            __Pyx_GIVEREF(__pyx_t_25);
                            PyTuple_SET_ITEM(__pyx_t_23, 0+__pyx_t_7, __pyx_t_25);
                            __Pyx_GIVEREF(__pyx_t_5);
                            PyTuple_SET_ITEM(__pyx_t_23, 1+__pyx_t_7, __pyx_t_5);
                            __pyx_t_25 = 0;
                            __pyx_t_5 = 0;
                            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_23, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 316, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_2);
                            __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                          }
                          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                          __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 316, __pyx_L35_error)
                          __Pyx_GOTREF(__pyx_t_6);
                          __Pyx_GIVEREF(__pyx_t_2);
                          PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
                          __pyx_t_2 = 0;
                          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_enumerate, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 316, __pyx_L35_error)
                          __Pyx_GOTREF(__pyx_t_2);
                          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                          __pyx_v_iterator = __pyx_t_2;
                          __pyx_t_2 = 0;

                          /* "tgirt_seq_tools/cluster_reads.pyx":317
 * 
 *         iterator = enumerate(izip(read_fastq(fq1), read_fastq(fq2)))
 *         for read_num, (read1,read2) in iterator:             # <<<<<<<<<<<<<<
 *             discarded_sequence_count += cluster_reads(read1, read2)
 *             if read_num % 10000000 == 0:
 */
                          if (likely(PyList_CheckExact(__pyx_v_iterator)) || PyTuple_CheckExact(__pyx_v_iterator)) {
                            __pyx_t_2 = __pyx_v_iterator; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
                            __pyx_t_27 = NULL;
                          } else {
                            __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_iterator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 317, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_2);
                            __pyx_t_27 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 317, __pyx_L35_error)
                          }
                          for (;;) {
                            if (likely(!__pyx_t_27)) {
                              if (likely(PyList_CheckExact(__pyx_t_2))) {
                                if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
                                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                                __pyx_t_6 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_6); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 317, __pyx_L35_error)
                                #else
                                __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 317, __pyx_L35_error)
                                __Pyx_GOTREF(__pyx_t_6);
                                #endif
                              } else {
                                if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
                                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                                __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_6); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 317, __pyx_L35_error)
                                #else
                                __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 317, __pyx_L35_error)
                                __Pyx_GOTREF(__pyx_t_6);
                                #endif
                              }
                            } else {
                              __pyx_t_6 = __pyx_t_27(__pyx_t_2);
                              if (unlikely(!__pyx_t_6)) {
                                PyObject* exc_type = PyErr_Occurred();
                                if (exc_type) {
                                  if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                                  else __PYX_ERR(0, 317, __pyx_L35_error)
                                }
                                break;
                              }
                              __Pyx_GOTREF(__pyx_t_6);
                            }
                            if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
                              PyObject* sequence = __pyx_t_6;
                              #if !CYTHON_COMPILING_IN_PYPY
                              Py_ssize_t size = Py_SIZE(sequence);
                              #else
                              Py_ssize_t size = PySequence_Size(sequence);
                              #endif
                              if (unlikely(size != 2)) {
                                if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                                else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                                __PYX_ERR(0, 317, __pyx_L35_error)
                              }
                              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                              if (likely(PyTuple_CheckExact(sequence))) {
                                __pyx_t_23 = PyTuple_GET_ITEM(sequence, 0); 
                                __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
                              } else {
                                __pyx_t_23 = PyList_GET_ITEM(sequence, 0); 
                                __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
                              }
                              __Pyx_INCREF(__pyx_t_23);
                              __Pyx_INCREF(__pyx_t_5);
                              #else
                              __pyx_t_23 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 317, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_23);
                              __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 317, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_5);
                              #endif
                              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                            } else {
                              Py_ssize_t index = -1;
                              __pyx_t_25 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 317, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_25);
                              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                              __pyx_t_28 = Py_TYPE(__pyx_t_25)->tp_iternext;
                              index = 0; __pyx_t_23 = __pyx_t_28(__pyx_t_25); if (unlikely(!__pyx_t_23)) goto __pyx_L46_unpacking_failed;
                              __Pyx_GOTREF(__pyx_t_23);
                              index = 1; __pyx_t_5 = __pyx_t_28(__pyx_t_25); if (unlikely(!__pyx_t_5)) goto __pyx_L46_unpacking_failed;
                              __Pyx_GOTREF(__pyx_t_5);
                              if (__Pyx_IternextUnpackEndCheck(__pyx_t_28(__pyx_t_25), 2) < 0) __PYX_ERR(0, 317, __pyx_L35_error)
                              __pyx_t_28 = NULL;
                              __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
                              goto __pyx_L47_unpacking_done;
                              __pyx_L46_unpacking_failed:;
                              __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
                              __pyx_t_28 = NULL;
                              if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                              __PYX_ERR(0, 317, __pyx_L35_error)
                              __pyx_L47_unpacking_done:;
                            }
                            __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_23); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 317, __pyx_L35_error)
                            __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                            __pyx_v_read_num = __pyx_t_7;
                            if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
                              PyObject* sequence = __pyx_t_5;
                              #if !CYTHON_COMPILING_IN_PYPY
                              Py_ssize_t size = Py_SIZE(sequence);
                              #else
                              Py_ssize_t size = PySequence_Size(sequence);
                              #endif
                              if (unlikely(size != 2)) {
                                if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                                else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                                __PYX_ERR(0, 317, __pyx_L35_error)
                              }
                              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                              if (likely(PyTuple_CheckExact(sequence))) {
                                __pyx_t_25 = PyTuple_GET_ITEM(sequence, 0); 
                                __pyx_t_22 = PyTuple_GET_ITEM(sequence, 1); 
                              } else {
                                __pyx_t_25 = PyList_GET_ITEM(sequence, 0); 
                                __pyx_t_22 = PyList_GET_ITEM(sequence, 1); 
                              }
                              __Pyx_INCREF(__pyx_t_25);
                              __Pyx_INCREF(__pyx_t_22);
                              #else
                              __pyx_t_25 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 317, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_25);
                              __pyx_t_22 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 317, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_22);
                              #endif
                              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                            } else {
                              Py_ssize_t index = -1;
                              __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 317, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_4);
                              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                              __pyx_t_28 = Py_TYPE(__pyx_t_4)->tp_iternext;
                              index = 0; __pyx_t_25 = __pyx_t_28(__pyx_t_4); if (unlikely(!__pyx_t_25)) goto __pyx_L48_unpacking_failed;
                              __Pyx_GOTREF(__pyx_t_25);
                              index = 1; __pyx_t_22 = __pyx_t_28(__pyx_t_4); if (unlikely(!__pyx_t_22)) goto __pyx_L48_unpacking_failed;
                              __Pyx_GOTREF(__pyx_t_22);
                              if (__Pyx_IternextUnpackEndCheck(__pyx_t_28(__pyx_t_4), 2) < 0) __PYX_ERR(0, 317, __pyx_L35_error)
                              __pyx_t_28 = NULL;
                              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                              goto __pyx_L49_unpacking_done;
                              __pyx_L48_unpacking_failed:;
                              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                              __pyx_t_28 = NULL;
                              if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                              __PYX_ERR(0, 317, __pyx_L35_error)
                              __pyx_L49_unpacking_done:;
                            }
                            if (!(likely(((__pyx_t_25) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_25, __pyx_ptype_15tgirt_seq_tools_13cluster_reads_fastqRecord))))) __PYX_ERR(0, 317, __pyx_L35_error)
                            if (!(likely(((__pyx_t_22) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_22, __pyx_ptype_15tgirt_seq_tools_13cluster_reads_fastqRecord))))) __PYX_ERR(0, 317, __pyx_L35_error)
                            __Pyx_XDECREF_SET(__pyx_v_read1, ((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *)__pyx_t_25));
                            __pyx_t_25 = 0;
                            __Pyx_XDECREF_SET(__pyx_v_read2, ((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *)__pyx_t_22));
                            __pyx_t_22 = 0;

                            /* "tgirt_seq_tools/cluster_reads.pyx":318
 *         iterator = enumerate(izip(read_fastq(fq1), read_fastq(fq2)))
 *         for read_num, (read1,read2) in iterator:
 *             discarded_sequence_count += cluster_reads(read1, read2)             # <<<<<<<<<<<<<<
 *             if read_num % 10000000 == 0:
 *                 stderr.write('[%s] Parsed: %i sequence\n' %(programname,read_num))
 */
                            __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_discarded_sequence_count); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 318, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_6);
                            if (unlikely(!__pyx_v_cluster_reads)) { __Pyx_RaiseUnboundLocalError("cluster_reads"); __PYX_ERR(0, 318, __pyx_L35_error) }
                            __Pyx_INCREF(__pyx_v_cluster_reads);
                            __pyx_t_23 = __pyx_v_cluster_reads; __pyx_t_22 = NULL;
                            __pyx_t_7 = 0;
                            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_23))) {
                              __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_23);
                              if (likely(__pyx_t_22)) {
                                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_23);
                                __Pyx_INCREF(__pyx_t_22);
                                __Pyx_INCREF(function);
                                __Pyx_DECREF_SET(__pyx_t_23, function);
                                __pyx_t_7 = 1;
                              }
                            }
                            #if CYTHON_FAST_PYCALL
                            if (PyFunction_Check(__pyx_t_23)) {
                              PyObject *__pyx_temp[3] = {__pyx_t_22, ((PyObject *)__pyx_v_read1), ((PyObject *)__pyx_v_read2)};
                              __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_23, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 318, __pyx_L35_error)
                              __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
                              __Pyx_GOTREF(__pyx_t_5);
                            } else
                            #endif
                            #if CYTHON_FAST_PYCCALL
                            if (__Pyx_PyFastCFunction_Check(__pyx_t_23)) {
                              PyObject *__pyx_temp[3] = {__pyx_t_22, ((PyObject *)__pyx_v_read1), ((PyObject *)__pyx_v_read2)};
                              __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_23, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 318, __pyx_L35_error)
                              __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
                              __Pyx_GOTREF(__pyx_t_5);
                            } else
                            #endif
                            {
                              __pyx_t_25 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 318, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_25);
                              if (__pyx_t_22) {
                                __Pyx_GIVEREF(__pyx_t_22); PyTuple_SET_ITEM(__pyx_t_25, 0, __pyx_t_22); __pyx_t_22 = NULL;
                              }
                              __Pyx_INCREF(((PyObject *)__pyx_v_read1));
                              __Pyx_GIVEREF(((PyObject *)__pyx_v_read1));
                              PyTuple_SET_ITEM(__pyx_t_25, 0+__pyx_t_7, ((PyObject *)__pyx_v_read1));
                              __Pyx_INCREF(((PyObject *)__pyx_v_read2));
                              __Pyx_GIVEREF(((PyObject *)__pyx_v_read2));
                              PyTuple_SET_ITEM(__pyx_t_25, 1+__pyx_t_7, ((PyObject *)__pyx_v_read2));
                              __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_23, __pyx_t_25, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 318, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_5);
                              __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
                            }
                            __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                            __pyx_t_23 = PyNumber_InPlaceAdd(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 318, __pyx_L35_error)
                            __Pyx_GOTREF(__pyx_t_23);
                            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                            __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_23); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 318, __pyx_L35_error)
                            __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                            __pyx_v_discarded_sequence_count = __pyx_t_7;

                            /* "tgirt_seq_tools/cluster_reads.pyx":319
 *         for read_num, (read1,read2) in iterator:
 *             discarded_sequence_count += cluster_reads(read1, read2)
 *             if read_num % 10000000 == 0:             # <<<<<<<<<<<<<<
 *                 stderr.write('[%s] Parsed: %i sequence\n' %(programname,read_num))
 * 
 */
                            __pyx_t_20 = ((__Pyx_mod_long(__pyx_v_read_num, 0x989680) == 0) != 0);
                            if (__pyx_t_20) {

                              /* "tgirt_seq_tools/cluster_reads.pyx":320
 *             discarded_sequence_count += cluster_reads(read1, read2)
 *             if read_num % 10000000 == 0:
 *                 stderr.write('[%s] Parsed: %i sequence\n' %(programname,read_num))             # <<<<<<<<<<<<<<
 * 
 *     barcode_count = len(barcode_dict.keys())
 */
                              __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_stderr); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 320, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_5);
                              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_write); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 320, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_6);
                              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                              __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_read_num); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 320, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_5);
                              __pyx_t_25 = PyTuple_New(2); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 320, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_25);
                              __Pyx_INCREF(__pyx_v_programname);
                              __Pyx_GIVEREF(__pyx_v_programname);
                              PyTuple_SET_ITEM(__pyx_t_25, 0, __pyx_v_programname);
                              __Pyx_GIVEREF(__pyx_t_5);
                              PyTuple_SET_ITEM(__pyx_t_25, 1, __pyx_t_5);
                              __pyx_t_5 = 0;
                              __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_s_Parsed_i_sequence, __pyx_t_25); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 320, __pyx_L35_error)
                              __Pyx_GOTREF(__pyx_t_5);
                              __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
                              __pyx_t_25 = NULL;
                              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
                                __pyx_t_25 = PyMethod_GET_SELF(__pyx_t_6);
                                if (likely(__pyx_t_25)) {
                                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                                  __Pyx_INCREF(__pyx_t_25);
                                  __Pyx_INCREF(function);
                                  __Pyx_DECREF_SET(__pyx_t_6, function);
                                }
                              }
                              if (!__pyx_t_25) {
                                __pyx_t_23 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 320, __pyx_L35_error)
                                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                                __Pyx_GOTREF(__pyx_t_23);
                              } else {
                                #if CYTHON_FAST_PYCALL
                                if (PyFunction_Check(__pyx_t_6)) {
                                  PyObject *__pyx_temp[2] = {__pyx_t_25, __pyx_t_5};
                                  __pyx_t_23 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 320, __pyx_L35_error)
                                  __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
                                  __Pyx_GOTREF(__pyx_t_23);
                                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                                } else
                                #endif
                                #if CYTHON_FAST_PYCCALL
                                if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
                                  PyObject *__pyx_temp[2] = {__pyx_t_25, __pyx_t_5};
                                  __pyx_t_23 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 320, __pyx_L35_error)
                                  __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
                                  __Pyx_GOTREF(__pyx_t_23);
                                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                                } else
                                #endif
                                {
                                  __pyx_t_22 = PyTuple_New(1+1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 320, __pyx_L35_error)
                                  __Pyx_GOTREF(__pyx_t_22);
                                  __Pyx_GIVEREF(__pyx_t_25); PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_25); __pyx_t_25 = NULL;
                                  __Pyx_GIVEREF(__pyx_t_5);
                                  PyTuple_SET_ITEM(__pyx_t_22, 0+1, __pyx_t_5);
                                  __pyx_t_5 = 0;
                                  __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_22, NULL); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 320, __pyx_L35_error)
                                  __Pyx_GOTREF(__pyx_t_23);
                                  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
                                }
                              }
                              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                              __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

                              /* "tgirt_seq_tools/cluster_reads.pyx":319
 *         for read_num, (read1,read2) in iterator:
 *             discarded_sequence_count += cluster_reads(read1, read2)
 *             if read_num % 10000000 == 0:             # <<<<<<<<<<<<<<
 *                 stderr.write('[%s] Parsed: %i sequence\n' %(programname,read_num))
 * 
 */
                            }

                            /* "tgirt_seq_tools/cluster_reads.pyx":317
 * 
 *         iterator = enumerate(izip(read_fastq(fq1), read_fastq(fq2)))
 *         for read_num, (read1,read2) in iterator:             # <<<<<<<<<<<<<<
 *             discarded_sequence_count += cluster_reads(read1, read2)
 *             if read_num % 10000000 == 0:
 */
                          }
                          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                          /* "tgirt_seq_tools/cluster_reads.pyx":304
 * 
 *     failed_reads = outputprefix + '-failed.tsv'
 *     with gzip_open(inFastq1,'rb') as fq1, gzip_open(inFastq2,'rb') as fq2, open(failed_reads,'w') as failed_file:             # <<<<<<<<<<<<<<
 * 
 * 
 */
                        }
                        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
                        __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
                        goto __pyx_L42_try_end;
                        __pyx_L35_error:;
                        __Pyx_PyThreadState_assign
                        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __Pyx_XDECREF(__pyx_t_26); __pyx_t_26 = 0;
                        __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
                        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                        __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
                        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                        __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
                        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                        __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
                        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                        /*except:*/ {
                          __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.recordsToDict", __pyx_clineno, __pyx_lineno, __pyx_filename);
                          if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_23, &__pyx_t_6) < 0) __PYX_ERR(0, 304, __pyx_L37_except_error)
                          __Pyx_GOTREF(__pyx_t_2);
                          __Pyx_GOTREF(__pyx_t_23);
                          __Pyx_GOTREF(__pyx_t_6);
                          __pyx_t_22 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_23, __pyx_t_6); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 304, __pyx_L37_except_error)
                          __Pyx_GOTREF(__pyx_t_22);
                          __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_22, NULL);
                          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                          __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
                          if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 304, __pyx_L37_except_error)
                          __Pyx_GOTREF(__pyx_t_29);
                          __pyx_t_20 = __Pyx_PyObject_IsTrue(__pyx_t_29);
                          __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
                          if (__pyx_t_20 < 0) __PYX_ERR(0, 304, __pyx_L37_except_error)
                          __pyx_t_21 = ((!(__pyx_t_20 != 0)) != 0);
                          if (__pyx_t_21) {
                            __Pyx_GIVEREF(__pyx_t_2);
                            __Pyx_GIVEREF(__pyx_t_23);
                            __Pyx_XGIVEREF(__pyx_t_6);
                            __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_23, __pyx_t_6);
                            __pyx_t_2 = 0; __pyx_t_23 = 0; __pyx_t_6 = 0; 
                            __PYX_ERR(0, 304, __pyx_L37_except_error)
                          }
                          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                          __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                          goto __pyx_L36_exception_handled;
                        }
                        __pyx_L37_except_error:;
                        __Pyx_PyThreadState_assign
                        __Pyx_XGIVEREF(__pyx_t_17);
                        __Pyx_XGIVEREF(__pyx_t_18);
                        __Pyx_XGIVEREF(__pyx_t_19);
                        __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
                        goto __pyx_L21_error;
                        __pyx_L36_exception_handled:;
                        __Pyx_PyThreadState_assign
                        __Pyx_XGIVEREF(__pyx_t_17);
                        __Pyx_XGIVEREF(__pyx_t_18);
                        __Pyx_XGIVEREF(__pyx_t_19);
                        __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
                        __pyx_L42_try_end:;
                      }
                    }
                    /*finally:*/ {
                      /*normal exit:*/{
                        if (__pyx_t_16) {
                          __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_tuple__35, NULL);
                          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                          if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 304, __pyx_L21_error)
                          __Pyx_GOTREF(__pyx_t_19);
                          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                        }
                        goto __pyx_L34;
                      }
                      __pyx_L34:;
                    }
                    goto __pyx_L54;
                    __pyx_L29_error:;
                    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                    goto __pyx_L21_error;
                    __pyx_L54:;
                  }
                }
                __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
                __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
                __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                goto __pyx_L28_try_end;
                __pyx_L21_error:;
                __Pyx_PyThreadState_assign
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_XDECREF(__pyx_t_26); __pyx_t_26 = 0;
                __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
                __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
                __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
                __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
                __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                /*except:*/ {
                  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.recordsToDict", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_23, &__pyx_t_2) < 0) __PYX_ERR(0, 304, __pyx_L23_except_error)
                  __Pyx_GOTREF(__pyx_t_6);
                  __Pyx_GOTREF(__pyx_t_23);
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_22 = PyTuple_Pack(3, __pyx_t_6, __pyx_t_23, __pyx_t_2); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 304, __pyx_L23_except_error)
                  __Pyx_GOTREF(__pyx_t_22);
                  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_22, NULL);
                  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
                  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
                  if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 304, __pyx_L23_except_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  __pyx_t_21 = __Pyx_PyObject_IsTrue(__pyx_t_16);
                  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                  if (__pyx_t_21 < 0) __PYX_ERR(0, 304, __pyx_L23_except_error)
                  __pyx_t_20 = ((!(__pyx_t_21 != 0)) != 0);
                  if (__pyx_t_20) {
                    __Pyx_GIVEREF(__pyx_t_6);
                    __Pyx_GIVEREF(__pyx_t_23);
                    __Pyx_XGIVEREF(__pyx_t_2);
                    __Pyx_ErrRestoreWithState(__pyx_t_6, __pyx_t_23, __pyx_t_2);
                    __pyx_t_6 = 0; __pyx_t_23 = 0; __pyx_t_2 = 0; 
                    __PYX_ERR(0, 304, __pyx_L23_except_error)
                  }
                  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  goto __pyx_L22_exception_handled;
                }
                __pyx_L23_except_error:;
                __Pyx_PyThreadState_assign
                __Pyx_XGIVEREF(__pyx_t_13);
                __Pyx_XGIVEREF(__pyx_t_14);
                __Pyx_XGIVEREF(__pyx_t_15);
                __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
                goto __pyx_L7_error;
                __pyx_L22_exception_handled:;
                __Pyx_PyThreadState_assign
                __Pyx_XGIVEREF(__pyx_t_13);
                __Pyx_XGIVEREF(__pyx_t_14);
                __Pyx_XGIVEREF(__pyx_t_15);
                __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
                __pyx_L28_try_end:;
              }
            }
            /*finally:*/ {
              /*normal exit:*/{
                if (__pyx_t_12) {
                  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_tuple__36, NULL);
                  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
                  if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 304, __pyx_L7_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                }
                goto __pyx_L20;
              }
              __pyx_L20:;
            }
            goto __pyx_L58;
            __pyx_L15_error:;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            goto __pyx_L7_error;
            __pyx_L58:;
          }
        }
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L14_try_end;
        __pyx_L7_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_26); __pyx_t_26 = 0;
        __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.recordsToDict", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_23, &__pyx_t_6) < 0) __PYX_ERR(0, 304, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_23);
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_22 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_23, __pyx_t_6); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 304, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_22);
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_22, NULL);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 304, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_20 = __Pyx_PyObject_IsTrue(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (__pyx_t_20 < 0) __PYX_ERR(0, 304, __pyx_L9_except_error)
          __pyx_t_21 = ((!(__pyx_t_20 != 0)) != 0);
          if (__pyx_t_21) {
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_23);
            __Pyx_XGIVEREF(__pyx_t_6);
            __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_23, __pyx_t_6);
            __pyx_t_2 = 0; __pyx_t_23 = 0; __pyx_t_6 = 0; 
            __PYX_ERR(0, 304, __pyx_L9_except_error)
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        __pyx_L14_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_8) {
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__37, NULL);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 304, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L62;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L1_error;
    __pyx_L62:;
  }

  /* "tgirt_seq_tools/cluster_reads.pyx":322
 *                 stderr.write('[%s] Parsed: %i sequence\n' %(programname,read_num))
 * 
 *     barcode_count = len(barcode_dict.keys())             # <<<<<<<<<<<<<<
 *     return barcode_dict, read_num, barcode_count, discarded_sequence_count
 * 
 */
  __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_v_barcode_dict, __pyx_n_s_keys); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_23))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_23);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_23);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_23, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_23, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 322, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_23); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 322, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_1 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_barcode_count = __pyx_t_1;

  /* "tgirt_seq_tools/cluster_reads.pyx":323
 * 
 *     barcode_count = len(barcode_dict.keys())
 *     return barcode_dict, read_num, barcode_count, discarded_sequence_count             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_read_num); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_23 = PyInt_FromSsize_t(__pyx_v_barcode_count); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_discarded_sequence_count); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_22 = PyTuple_New(4); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_INCREF(__pyx_v_barcode_dict);
  __Pyx_GIVEREF(__pyx_v_barcode_dict);
  PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_v_barcode_dict);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_22, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_23);
  PyTuple_SET_ITEM(__pyx_t_22, 2, __pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_22, 3, __pyx_t_2);
  __pyx_t_6 = 0;
  __pyx_t_23 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_22;
  __pyx_t_22 = 0;
  goto __pyx_L0;

  /* "tgirt_seq_tools/cluster_reads.pyx":288
 *     return 1
 * 
 * def recordsToDict(str outputprefix, str inFastq1, str inFastq2, int idx_base, int barcode_cut_off,             # <<<<<<<<<<<<<<
 *                 str constant, barcode_dict, int allow_mismatch, str which_side, str programname):
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.recordsToDict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_failed_reads);
  __Pyx_XDECREF((PyObject *)__pyx_v_read1);
  __Pyx_XDECREF((PyObject *)__pyx_v_read2);
  __Pyx_XDECREF(__pyx_v_low_complexity_base);
  __Pyx_XDECREF(__pyx_v_low_complexity_composition);
  __Pyx_XDECREF(__pyx_v_fq1);
  __Pyx_XDECREF(__pyx_v_fq2);
  __Pyx_XDECREF(__pyx_v_failed_file);
  __Pyx_XDECREF(__pyx_v_cluster_reads);
  __Pyx_XDECREF(__pyx_v_iterator);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/cluster_reads.pyx":333
 *         public id, seq, qual
 * 
 *     def __init__(self, str id, str seq, str qual):             # <<<<<<<<<<<<<<
 *         self.id, self.seq, self.qual = (id, seq, qual)
 * 
 */

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_seq = 0;
  PyObject *__pyx_v_qual = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_seq,&__pyx_n_s_qual,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_seq)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(0, 333, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_qual)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(0, 333, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 333, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_id = ((PyObject*)values[0]);
    __pyx_v_seq = ((PyObject*)values[1]);
    __pyx_v_qual = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 333, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.fastqRecord.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_id), (&PyString_Type), 1, "id", 1))) __PYX_ERR(0, 333, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_seq), (&PyString_Type), 1, "seq", 1))) __PYX_ERR(0, 333, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_qual), (&PyString_Type), 1, "qual", 1))) __PYX_ERR(0, 333, __pyx_L1_error)
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord___init__(((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *)__pyx_v_self), __pyx_v_id, __pyx_v_seq, __pyx_v_qual);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord___init__(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_self, PyObject *__pyx_v_id, PyObject *__pyx_v_seq, PyObject *__pyx_v_qual) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "tgirt_seq_tools/cluster_reads.pyx":334
 * 
 *     def __init__(self, str id, str seq, str qual):
 *         self.id, self.seq, self.qual = (id, seq, qual)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_v_id;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_seq;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = __pyx_v_qual;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->id);
  __Pyx_DECREF(__pyx_v_self->id);
  __pyx_v_self->id = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->seq);
  __Pyx_DECREF(__pyx_v_self->seq);
  __pyx_v_self->seq = __pyx_t_2;
  __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->qual);
  __Pyx_DECREF(__pyx_v_self->qual);
  __pyx_v_self->qual = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":333
 *         public id, seq, qual
 * 
 *     def __init__(self, str id, str seq, str qual):             # <<<<<<<<<<<<<<
 *         self.id, self.seq, self.qual = (id, seq, qual)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tgirt_seq_tools/cluster_reads.pyx":331
 * cdef class fastqRecord:
 *     cdef:
 *         public id, seq, qual             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, str id, str seq, str qual):
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_2id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_2id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_2id___get__(((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_2id___get__(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->id);
  __pyx_r = __pyx_v_self->id;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_2id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_2id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_2id_2__set__(((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_2id_2__set__(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->id);
  __Pyx_DECREF(__pyx_v_self->id);
  __pyx_v_self->id = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_2id_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_2id_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_2id_4__del__(((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_2id_4__del__(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->id);
  __Pyx_DECREF(__pyx_v_self->id);
  __pyx_v_self->id = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_3seq_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_3seq_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_3seq___get__(((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_3seq___get__(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->seq);
  __pyx_r = __pyx_v_self->seq;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_3seq_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_3seq_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_3seq_2__set__(((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_3seq_2__set__(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->seq);
  __Pyx_DECREF(__pyx_v_self->seq);
  __pyx_v_self->seq = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_3seq_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_3seq_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_3seq_4__del__(((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_3seq_4__del__(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->seq);
  __Pyx_DECREF(__pyx_v_self->seq);
  __pyx_v_self->seq = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_4qual_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_4qual_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_4qual___get__(((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_4qual___get__(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->qual);
  __pyx_r = __pyx_v_self->qual;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_4qual_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_4qual_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_4qual_2__set__(((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_4qual_2__set__(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->qual);
  __Pyx_DECREF(__pyx_v_self->qual);
  __pyx_v_self->qual = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_4qual_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_4qual_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_4qual_4__del__(((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15tgirt_seq_tools_13cluster_reads_11fastqRecord_4qual_4__del__(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->qual);
  __Pyx_DECREF(__pyx_v_self->qual);
  __pyx_v_self->qual = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_15tgirt_seq_tools_13cluster_reads_28generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "tgirt_seq_tools/cluster_reads.pyx":337
 * 
 * 
 * def read_fastq(file_fq):             # <<<<<<<<<<<<<<
 *     """
 *     takes a fastq file as input
 */

/* Python wrapper */
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_27read_fastq(PyObject *__pyx_self, PyObject *__pyx_v_file_fq); /*proto*/
static char __pyx_doc_15tgirt_seq_tools_13cluster_reads_26read_fastq[] = "\n    takes a fastq file as input\n    yields idSeq, sequence and score\n    for each fastq entry\n    http://codereview.stackexchange.com/questions/32897/efficient-parsing-of-fastq\n    ";
static PyMethodDef __pyx_mdef_15tgirt_seq_tools_13cluster_reads_27read_fastq = {"read_fastq", (PyCFunction)__pyx_pw_15tgirt_seq_tools_13cluster_reads_27read_fastq, METH_O, __pyx_doc_15tgirt_seq_tools_13cluster_reads_26read_fastq};
static PyObject *__pyx_pw_15tgirt_seq_tools_13cluster_reads_27read_fastq(PyObject *__pyx_self, PyObject *__pyx_v_file_fq) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_fastq (wrapper)", 0);
  __pyx_r = __pyx_pf_15tgirt_seq_tools_13cluster_reads_26read_fastq(__pyx_self, ((PyObject *)__pyx_v_file_fq));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15tgirt_seq_tools_13cluster_reads_26read_fastq(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_fq) {
  struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_fastq", 0);
  __pyx_cur_scope = (struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq *)__pyx_tp_new_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq(__pyx_ptype_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 337, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_file_fq = __pyx_v_file_fq;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_file_fq);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_file_fq);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_15tgirt_seq_tools_13cluster_reads_28generator, (PyObject *) __pyx_cur_scope, __pyx_n_s_read_fastq, __pyx_n_s_read_fastq, __pyx_n_s_tgirt_seq_tools_cluster_reads); if (unlikely(!gen)) __PYX_ERR(0, 337, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("tgirt_seq_tools.cluster_reads.read_fastq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_15tgirt_seq_tools_13cluster_reads_28generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq *__pyx_cur_scope = ((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L10_resume_from_yield;
    case 2: goto __pyx_L13_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 337, __pyx_L1_error)

  /* "tgirt_seq_tools/cluster_reads.pyx":347
 *     #initialize the idSeq, sequence, score and index
 *     cdef:
 *         str idSeq = ''             # <<<<<<<<<<<<<<
 *         str sequence = ''
 *         str score = ''
 */
  __Pyx_INCREF(__pyx_kp_s__4);
  __Pyx_GIVEREF(__pyx_kp_s__4);
  __pyx_cur_scope->__pyx_v_idSeq = __pyx_kp_s__4;

  /* "tgirt_seq_tools/cluster_reads.pyx":348
 *     cdef:
 *         str idSeq = ''
 *         str sequence = ''             # <<<<<<<<<<<<<<
 *         str score = ''
 *         str line
 */
  __Pyx_INCREF(__pyx_kp_s__4);
  __Pyx_GIVEREF(__pyx_kp_s__4);
  __pyx_cur_scope->__pyx_v_sequence = __pyx_kp_s__4;

  /* "tgirt_seq_tools/cluster_reads.pyx":349
 *         str idSeq = ''
 *         str sequence = ''
 *         str score = ''             # <<<<<<<<<<<<<<
 *         str line
 *         fastqRecord fastq_record
 */
  __Pyx_INCREF(__pyx_kp_s__4);
  __Pyx_GIVEREF(__pyx_kp_s__4);
  __pyx_cur_scope->__pyx_v_score = __pyx_kp_s__4;

  /* "tgirt_seq_tools/cluster_reads.pyx":353
 *         fastqRecord fastq_record
 * 
 *     while True:             # <<<<<<<<<<<<<<
 * 
 *         line = file_fq.readline()
 */
  while (1) {

    /* "tgirt_seq_tools/cluster_reads.pyx":355
 *     while True:
 * 
 *         line = file_fq.readline()             # <<<<<<<<<<<<<<
 * 
 *         #break if we hit the end of the file
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_file_fq, __pyx_n_s_readline); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_line);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_line, ((PyObject*)__pyx_t_1));
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "tgirt_seq_tools/cluster_reads.pyx":358
 * 
 *         #break if we hit the end of the file
 *         if not line:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_line); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 358, __pyx_L1_error)
    __pyx_t_5 = ((!__pyx_t_4) != 0);
    if (__pyx_t_5) {

      /* "tgirt_seq_tools/cluster_reads.pyx":359
 *         #break if we hit the end of the file
 *         if not line:
 *             break             # <<<<<<<<<<<<<<
 * 
 *         if line.startswith('@') and sequence != '':
 */
      goto __pyx_L5_break;

      /* "tgirt_seq_tools/cluster_reads.pyx":358
 * 
 *         #break if we hit the end of the file
 *         if not line:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "tgirt_seq_tools/cluster_reads.pyx":361
 *             break
 * 
 *         if line.startswith('@') and sequence != '':             # <<<<<<<<<<<<<<
 * 
 *             fastq_record = fastqRecord(idSeq, sequence, score)
 */
    if (unlikely(__pyx_cur_scope->__pyx_v_line == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "startswith");
      __PYX_ERR(0, 361, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyStr_Tailmatch(__pyx_cur_scope->__pyx_v_line, __pyx_kp_s__38, 0, PY_SSIZE_T_MAX, -1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 361, __pyx_L1_error)
    if ((__pyx_t_4 != 0)) {
    } else {
      __pyx_t_5 = (__pyx_t_4 != 0);
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_cur_scope->__pyx_v_sequence, __pyx_kp_s__4, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 361, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_4 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_5) {

      /* "tgirt_seq_tools/cluster_reads.pyx":363
 *         if line.startswith('@') and sequence != '':
 * 
 *             fastq_record = fastqRecord(idSeq, sequence, score)             # <<<<<<<<<<<<<<
 *             yield fastq_record
 * 
 */
      __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 363, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_idSeq);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_idSeq);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_idSeq);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_sequence);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_sequence);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_cur_scope->__pyx_v_sequence);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_score);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_score);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_cur_scope->__pyx_v_score);
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_15tgirt_seq_tools_13cluster_reads_fastqRecord), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 363, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XGOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_fastq_record));
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_fastq_record, ((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *)__pyx_t_2));
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "tgirt_seq_tools/cluster_reads.pyx":364
 * 
 *             fastq_record = fastqRecord(idSeq, sequence, score)
 *             yield fastq_record             # <<<<<<<<<<<<<<
 * 
 *             #reset to default values
 */
      __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_fastq_record));
      __pyx_r = ((PyObject *)__pyx_cur_scope->__pyx_v_fastq_record);
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L10_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 364, __pyx_L1_error)

      /* "tgirt_seq_tools/cluster_reads.pyx":367
 * 
 *             #reset to default values
 *             sequence = ''             # <<<<<<<<<<<<<<
 *             score = ''
 *             idSeq = line.strip().lstrip('@')
 */
      __Pyx_INCREF(__pyx_kp_s__4);
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_sequence);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_sequence, __pyx_kp_s__4);
      __Pyx_GIVEREF(__pyx_kp_s__4);

      /* "tgirt_seq_tools/cluster_reads.pyx":368
 *             #reset to default values
 *             sequence = ''
 *             score = ''             # <<<<<<<<<<<<<<
 *             idSeq = line.strip().lstrip('@')
 * 
 */
      __Pyx_INCREF(__pyx_kp_s__4);
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_score);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_score, __pyx_kp_s__4);
      __Pyx_GIVEREF(__pyx_kp_s__4);

      /* "tgirt_seq_tools/cluster_reads.pyx":369
 *             sequence = ''
 *             score = ''
 *             idSeq = line.strip().lstrip('@')             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 369, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (__pyx_t_3) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 369, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 369, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_lstrip); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 369, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 369, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 369, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_idSeq);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_idSeq, ((PyObject*)__pyx_t_2));
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "tgirt_seq_tools/cluster_reads.pyx":361
 *             break
 * 
 *         if line.startswith('@') and sequence != '':             # <<<<<<<<<<<<<<
 * 
 *             fastq_record = fastqRecord(idSeq, sequence, score)
 */
      goto __pyx_L7;
    }

    /* "tgirt_seq_tools/cluster_reads.pyx":372
 * 
 * 
 *         elif idSeq == '':             # <<<<<<<<<<<<<<
 *             #get our first idSeq
 *             idSeq = line.strip()
 */
    __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_cur_scope->__pyx_v_idSeq, __pyx_kp_s__4, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 372, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "tgirt_seq_tools/cluster_reads.pyx":374
 *         elif idSeq == '':
 *             #get our first idSeq
 *             idSeq = line.strip()             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (__pyx_t_3) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 374, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 374, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_idSeq);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_idSeq, ((PyObject*)__pyx_t_2));
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "tgirt_seq_tools/cluster_reads.pyx":375
 *             #get our first idSeq
 *             idSeq = line.strip()
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         elif sequence == '':
 */
      goto __pyx_L4_continue;

      /* "tgirt_seq_tools/cluster_reads.pyx":372
 * 
 * 
 *         elif idSeq == '':             # <<<<<<<<<<<<<<
 *             #get our first idSeq
 *             idSeq = line.strip()
 */
    }

    /* "tgirt_seq_tools/cluster_reads.pyx":377
 *             continue
 * 
 *         elif sequence == '':             # <<<<<<<<<<<<<<
 *             sequence = line.strip()
 *         elif score == '' and line != '+\n':
 */
    __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_cur_scope->__pyx_v_sequence, __pyx_kp_s__4, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 377, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_6 != 0);
    if (__pyx_t_5) {

      /* "tgirt_seq_tools/cluster_reads.pyx":378
 * 
 *         elif sequence == '':
 *             sequence = line.strip()             # <<<<<<<<<<<<<<
 *         elif score == '' and line != '+\n':
 *             score = line.strip()
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (__pyx_t_3) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 378, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_sequence);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_sequence, ((PyObject*)__pyx_t_2));
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "tgirt_seq_tools/cluster_reads.pyx":377
 *             continue
 * 
 *         elif sequence == '':             # <<<<<<<<<<<<<<
 *             sequence = line.strip()
 *         elif score == '' and line != '+\n':
 */
      goto __pyx_L7;
    }

    /* "tgirt_seq_tools/cluster_reads.pyx":379
 *         elif sequence == '':
 *             sequence = line.strip()
 *         elif score == '' and line != '+\n':             # <<<<<<<<<<<<<<
 *             score = line.strip()
 * #            assert len(score) == len(sequence), 'Wrongly parsed Fastq' +'\n'+ sequence + '\n' + score
 */
    __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_cur_scope->__pyx_v_score, __pyx_kp_s__4, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 379, __pyx_L1_error)
    __pyx_t_4 = (__pyx_t_6 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_5 = __pyx_t_4;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_cur_scope->__pyx_v_line, __pyx_kp_s__40, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 379, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_4 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_5) {

      /* "tgirt_seq_tools/cluster_reads.pyx":380
 *             sequence = line.strip()
 *         elif score == '' and line != '+\n':
 *             score = line.strip()             # <<<<<<<<<<<<<<
 * #            assert len(score) == len(sequence), 'Wrongly parsed Fastq' +'\n'+ sequence + '\n' + score
 * 
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (__pyx_t_3) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 380, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 380, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_score);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_score, ((PyObject*)__pyx_t_2));
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "tgirt_seq_tools/cluster_reads.pyx":379
 *         elif sequence == '':
 *             sequence = line.strip()
 *         elif score == '' and line != '+\n':             # <<<<<<<<<<<<<<
 *             score = line.strip()
 * #            assert len(score) == len(sequence), 'Wrongly parsed Fastq' +'\n'+ sequence + '\n' + score
 */
    }
    __pyx_L7:;
    __pyx_L4_continue:;
  }
  __pyx_L5_break:;

  /* "tgirt_seq_tools/cluster_reads.pyx":384
 * 
 *     #yield our final idSeq, sequence and score
 *     fastq_record = fastqRecord(idSeq, sequence, score)             # <<<<<<<<<<<<<<
 *     yield fastq_record
 */
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_idSeq);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_idSeq);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_cur_scope->__pyx_v_idSeq);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_sequence);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_sequence);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_cur_scope->__pyx_v_sequence);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_score);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_score);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_cur_scope->__pyx_v_score);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_15tgirt_seq_tools_13cluster_reads_fastqRecord), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_XGOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_fastq_record));
  __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_fastq_record, ((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":385
 *     #yield our final idSeq, sequence and score
 *     fastq_record = fastqRecord(idSeq, sequence, score)
 *     yield fastq_record             # <<<<<<<<<<<<<<
 */
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_fastq_record));
  __pyx_r = ((PyObject *)__pyx_cur_scope->__pyx_v_fastq_record);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 2;
  return __pyx_r;
  __pyx_L13_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 385, __pyx_L1_error)
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "tgirt_seq_tools/cluster_reads.pyx":337
 * 
 * 
 * def read_fastq(file_fq):             # <<<<<<<<<<<<<<
 *     """
 *     takes a fastq file as input
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("read_fastq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_15tgirt_seq_tools_13cluster_reads_fastqRecord(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *)o);
  p->id = Py_None; Py_INCREF(Py_None);
  p->seq = Py_None; Py_INCREF(Py_None);
  p->qual = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_15tgirt_seq_tools_13cluster_reads_fastqRecord(PyObject *o) {
  struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *p = (struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->id);
  Py_CLEAR(p->seq);
  Py_CLEAR(p->qual);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_15tgirt_seq_tools_13cluster_reads_fastqRecord(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *p = (struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *)o;
  if (p->id) {
    e = (*v)(p->id, a); if (e) return e;
  }
  if (p->seq) {
    e = (*v)(p->seq, a); if (e) return e;
  }
  if (p->qual) {
    e = (*v)(p->qual, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15tgirt_seq_tools_13cluster_reads_fastqRecord(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *p = (struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *)o;
  tmp = ((PyObject*)p->id);
  p->id = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->seq);
  p->seq = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->qual);
  p->qual = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_15tgirt_seq_tools_13cluster_reads_11fastqRecord_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_2id_1__get__(o);
}

static int __pyx_setprop_15tgirt_seq_tools_13cluster_reads_11fastqRecord_id(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_2id_3__set__(o, v);
  }
  else {
    return __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_2id_5__del__(o);
  }
}

static PyObject *__pyx_getprop_15tgirt_seq_tools_13cluster_reads_11fastqRecord_seq(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_3seq_1__get__(o);
}

static int __pyx_setprop_15tgirt_seq_tools_13cluster_reads_11fastqRecord_seq(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_3seq_3__set__(o, v);
  }
  else {
    return __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_3seq_5__del__(o);
  }
}

static PyObject *__pyx_getprop_15tgirt_seq_tools_13cluster_reads_11fastqRecord_qual(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_4qual_1__get__(o);
}

static int __pyx_setprop_15tgirt_seq_tools_13cluster_reads_11fastqRecord_qual(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_4qual_3__set__(o, v);
  }
  else {
    return __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_4qual_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_15tgirt_seq_tools_13cluster_reads_fastqRecord[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_15tgirt_seq_tools_13cluster_reads_fastqRecord[] = {
  {(char *)"id", __pyx_getprop_15tgirt_seq_tools_13cluster_reads_11fastqRecord_id, __pyx_setprop_15tgirt_seq_tools_13cluster_reads_11fastqRecord_id, (char *)0, 0},
  {(char *)"seq", __pyx_getprop_15tgirt_seq_tools_13cluster_reads_11fastqRecord_seq, __pyx_setprop_15tgirt_seq_tools_13cluster_reads_11fastqRecord_seq, (char *)0, 0},
  {(char *)"qual", __pyx_getprop_15tgirt_seq_tools_13cluster_reads_11fastqRecord_qual, __pyx_setprop_15tgirt_seq_tools_13cluster_reads_11fastqRecord_qual, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_15tgirt_seq_tools_13cluster_reads_fastqRecord = {
  PyVarObject_HEAD_INIT(0, 0)
  "tgirt_seq_tools.cluster_reads.fastqRecord", /*tp_name*/
  sizeof(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15tgirt_seq_tools_13cluster_reads_fastqRecord, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15tgirt_seq_tools_13cluster_reads_fastqRecord, /*tp_traverse*/
  __pyx_tp_clear_15tgirt_seq_tools_13cluster_reads_fastqRecord, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_15tgirt_seq_tools_13cluster_reads_fastqRecord, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_15tgirt_seq_tools_13cluster_reads_fastqRecord, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_15tgirt_seq_tools_13cluster_reads_11fastqRecord_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15tgirt_seq_tools_13cluster_reads_fastqRecord, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq *__pyx_freelist_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq[8];
static int __pyx_freecount_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq = 0;

static PyObject *__pyx_tp_new_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq)))) {
    o = (PyObject*)__pyx_freelist_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq[--__pyx_freecount_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq];
    memset(o, 0, sizeof(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq(PyObject *o) {
  struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq *p = (struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_qual_list);
  Py_CLEAR(p->__pyx_v_seq_list);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq)))) {
    __pyx_freelist_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq[__pyx_freecount_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq++] = ((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq *p = (struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq *)o;
  if (p->__pyx_v_qual_list) {
    e = (*v)(p->__pyx_v_qual_list, a); if (e) return e;
  }
  if (p->__pyx_v_seq_list) {
    e = (*v)(p->__pyx_v_seq_list, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq *p = (struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq *)o;
  tmp = ((PyObject*)p->__pyx_v_qual_list);
  p->__pyx_v_qual_list = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_seq_list);
  p->__pyx_v_seq_list = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq = {
  PyVarObject_HEAD_INIT(0, 0)
  "tgirt_seq_tools.cluster_reads.__pyx_scope_struct__concensusSeq", /*tp_name*/
  sizeof(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq, /*tp_traverse*/
  __pyx_tp_clear_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr *__pyx_freelist_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr[--__pyx_freecount_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr[__pyx_freecount_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "tgirt_seq_tools.cluster_reads.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  __pyx_tp_clear_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq *__pyx_freelist_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq[8];
static int __pyx_freecount_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq = 0;

static PyObject *__pyx_tp_new_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq)))) {
    o = (PyObject*)__pyx_freelist_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq[--__pyx_freecount_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq];
    memset(o, 0, sizeof(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq(PyObject *o) {
  struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq *p = (struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fastq_record);
  Py_CLEAR(p->__pyx_v_file_fq);
  Py_CLEAR(p->__pyx_v_idSeq);
  Py_CLEAR(p->__pyx_v_line);
  Py_CLEAR(p->__pyx_v_score);
  Py_CLEAR(p->__pyx_v_sequence);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq)))) {
    __pyx_freelist_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq[__pyx_freecount_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq++] = ((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq *p = (struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq *)o;
  if (p->__pyx_v_fastq_record) {
    e = (*v)(((PyObject*)p->__pyx_v_fastq_record), a); if (e) return e;
  }
  if (p->__pyx_v_file_fq) {
    e = (*v)(p->__pyx_v_file_fq, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq *p = (struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq *)o;
  tmp = ((PyObject*)p->__pyx_v_fastq_record);
  p->__pyx_v_fastq_record = ((struct __pyx_obj_15tgirt_seq_tools_13cluster_reads_fastqRecord *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_file_fq);
  p->__pyx_v_file_fq = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq = {
  PyVarObject_HEAD_INIT(0, 0)
  "tgirt_seq_tools.cluster_reads.__pyx_scope_struct_2_read_fastq", /*tp_name*/
  sizeof(struct __pyx_obj_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq, /*tp_traverse*/
  __pyx_tp_clear_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"hamming_distance", (PyCFunction)__pyx_pw_15tgirt_seq_tools_13cluster_reads_7hamming_distance, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15tgirt_seq_tools_13cluster_reads_6hamming_distance},
  {"readClusteringR2", (PyCFunction)__pyx_pw_15tgirt_seq_tools_13cluster_reads_21readClusteringR2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15tgirt_seq_tools_13cluster_reads_20readClusteringR2},
  {"readClusteringR1", (PyCFunction)__pyx_pw_15tgirt_seq_tools_13cluster_reads_23readClusteringR1, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15tgirt_seq_tools_13cluster_reads_22readClusteringR1},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "cluster_reads",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_n_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 1},
  {&__pyx_n_s_Agg, __pyx_k_Agg, sizeof(__pyx_k_Agg), 0, 0, 1, 1},
  {&__pyx_n_s_BufferedReader, __pyx_k_BufferedReader, sizeof(__pyx_k_BufferedReader), 0, 0, 1, 1},
  {&__pyx_n_s_BufferedWriter, __pyx_k_BufferedWriter, sizeof(__pyx_k_BufferedWriter), 0, 0, 1, 1},
  {&__pyx_n_s_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 0, 1, 1},
  {&__pyx_kp_s_Count_of_tags, __pyx_k_Count_of_tags, sizeof(__pyx_k_Count_of_tags), 0, 0, 1, 0},
  {&__pyx_n_s_G, __pyx_k_G, sizeof(__pyx_k_G), 0, 0, 1, 1},
  {&__pyx_n_s_N, __pyx_k_N, sizeof(__pyx_k_N), 0, 0, 1, 1},
  {&__pyx_n_s_No, __pyx_k_No, sizeof(__pyx_k_No), 0, 0, 1, 1},
  {&__pyx_kp_s_Number_of_occurence, __pyx_k_Number_of_occurence, sizeof(__pyx_k_Number_of_occurence), 0, 0, 1, 0},
  {&__pyx_kp_s_Plotted_s, __pyx_k_Plotted_s, sizeof(__pyx_k_Plotted_s), 0, 0, 1, 0},
  {&__pyx_n_s_Pool, __pyx_k_Pool, sizeof(__pyx_k_Pool), 0, 0, 1, 1},
  {&__pyx_kp_s_Processed_i_read_clusters, __pyx_k_Processed_i_read_clusters, sizeof(__pyx_k_Processed_i_read_clusters), 0, 0, 1, 0},
  {&__pyx_kp_s_R1_001_fastq_gz, __pyx_k_R1_001_fastq_gz, sizeof(__pyx_k_R1_001_fastq_gz), 0, 0, 1, 0},
  {&__pyx_kp_s_R2_001_fastq_gz, __pyx_k_R2_001_fastq_gz, sizeof(__pyx_k_R2_001_fastq_gz), 0, 0, 1, 0},
  {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
  {&__pyx_kp_s_Users_wckdouglas_scripts_softwa, __pyx_k_Users_wckdouglas_scripts_softwa, sizeof(__pyx_k_Users_wckdouglas_scripts_softwa), 0, 0, 1, 0},
  {&__pyx_kp_s_Wrongly_splitted_files_s_s, __pyx_k_Wrongly_splitted_files_s_s, sizeof(__pyx_k_Wrongly_splitted_files_s_s), 0, 0, 1, 0},
  {&__pyx_kp_s__11, __pyx_k__11, sizeof(__pyx_k__11), 0, 0, 1, 0},
  {&__pyx_kp_s__23, __pyx_k__23, sizeof(__pyx_k__23), 0, 0, 1, 0},
  {&__pyx_kp_s__28, __pyx_k__28, sizeof(__pyx_k__28), 0, 0, 1, 0},
  {&__pyx_kp_s__31, __pyx_k__31, sizeof(__pyx_k__31), 0, 0, 1, 0},
  {&__pyx_kp_s__34, __pyx_k__34, sizeof(__pyx_k__34), 0, 0, 1, 0},
  {&__pyx_kp_s__38, __pyx_k__38, sizeof(__pyx_k__38), 0, 0, 1, 0},
  {&__pyx_kp_s__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 0, 1, 0},
  {&__pyx_kp_s__40, __pyx_k__40, sizeof(__pyx_k__40), 0, 0, 1, 0},
  {&__pyx_n_s__42, __pyx_k__42, sizeof(__pyx_k__42), 0, 0, 1, 1},
  {&__pyx_n_s_add_subplot, __pyx_k_add_subplot, sizeof(__pyx_k_add_subplot), 0, 0, 1, 1},
  {&__pyx_n_s_align, __pyx_k_align, sizeof(__pyx_k_align), 0, 0, 1, 1},
  {&__pyx_n_s_allow_mismatch, __pyx_k_allow_mismatch, sizeof(__pyx_k_allow_mismatch), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_arg, __pyx_k_arg, sizeof(__pyx_k_arg), 0, 0, 1, 1},
  {&__pyx_n_s_argmax, __pyx_k_argmax, sizeof(__pyx_k_argmax), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_ax, __pyx_k_ax, sizeof(__pyx_k_ax), 0, 0, 1, 1},
  {&__pyx_n_s_bar, __pyx_k_bar, sizeof(__pyx_k_bar), 0, 0, 1, 1},
  {&__pyx_n_s_barcode_count, __pyx_k_barcode_count, sizeof(__pyx_k_barcode_count), 0, 0, 1, 1},
  {&__pyx_n_s_barcode_cut_off, __pyx_k_barcode_cut_off, sizeof(__pyx_k_barcode_cut_off), 0, 0, 1, 1},
  {&__pyx_n_s_barcode_dict, __pyx_k_barcode_dict, sizeof(__pyx_k_barcode_dict), 0, 0, 1, 1},
  {&__pyx_n_s_barcode_family_count, __pyx_k_barcode_family_count, sizeof(__pyx_k_barcode_family_count), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_bases, __pyx_k_bases, sizeof(__pyx_k_bases), 0, 0, 1, 1},
  {&__pyx_n_s_bins, __pyx_k_bins, sizeof(__pyx_k_bins), 0, 0, 1, 1},
  {&__pyx_n_s_center, __pyx_k_center, sizeof(__pyx_k_center), 0, 0, 1, 1},
  {&__pyx_n_s_centers, __pyx_k_centers, sizeof(__pyx_k_centers), 0, 0, 1, 1},
  {&__pyx_n_s_chr, __pyx_k_chr, sizeof(__pyx_k_chr), 0, 0, 1, 1},
  {&__pyx_n_s_chunksize, __pyx_k_chunksize, sizeof(__pyx_k_chunksize), 0, 0, 1, 1},
  {&__pyx_n_s_cjson, __pyx_k_cjson, sizeof(__pyx_k_cjson), 0, 0, 1, 1},
  {&__pyx_n_s_clip, __pyx_k_clip, sizeof(__pyx_k_clip), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_kp_s_cluster_i__s, __pyx_k_cluster_i__s, sizeof(__pyx_k_cluster_i__s), 0, 0, 1, 0},
  {&__pyx_n_s_cluster_reads, __pyx_k_cluster_reads, sizeof(__pyx_k_cluster_reads), 0, 0, 1, 1},
  {&__pyx_n_s_column_bases, __pyx_k_column_bases, sizeof(__pyx_k_column_bases), 0, 0, 1, 1},
  {&__pyx_n_s_column_qualities, __pyx_k_column_qualities, sizeof(__pyx_k_column_qualities), 0, 0, 1, 1},
  {&__pyx_n_s_column_qualities_number, __pyx_k_column_qualities_number, sizeof(__pyx_k_column_qualities_number), 0, 0, 1, 1},
  {&__pyx_n_s_compile, __pyx_k_compile, sizeof(__pyx_k_compile), 0, 0, 1, 1},
  {&__pyx_n_s_concensusPairs, __pyx_k_concensusPairs, sizeof(__pyx_k_concensusPairs), 0, 0, 1, 1},
  {&__pyx_n_s_concensusSeq, __pyx_k_concensusSeq, sizeof(__pyx_k_concensusSeq), 0, 0, 1, 1},
  {&__pyx_n_s_concensusSeq_locals_genexpr, __pyx_k_concensusSeq_locals_genexpr, sizeof(__pyx_k_concensusSeq_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_concensus_position, __pyx_k_concensus_position, sizeof(__pyx_k_concensus_position), 0, 0, 1, 1},
  {&__pyx_n_s_constant, __pyx_k_constant, sizeof(__pyx_k_constant), 0, 0, 1, 1},
  {&__pyx_n_s_constant_length, __pyx_k_constant_length, sizeof(__pyx_k_constant_length), 0, 0, 1, 1},
  {&__pyx_n_s_constant_region, __pyx_k_constant_region, sizeof(__pyx_k_constant_region), 0, 0, 1, 1},
  {&__pyx_n_s_counter, __pyx_k_counter, sizeof(__pyx_k_counter), 0, 0, 1, 1},
  {&__pyx_n_s_counts, __pyx_k_counts, sizeof(__pyx_k_counts), 0, 0, 1, 1},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_s_depth, __pyx_k_depth, sizeof(__pyx_k_depth), 0, 0, 1, 1},
  {&__pyx_n_s_dictToJson, __pyx_k_dictToJson, sizeof(__pyx_k_dictToJson), 0, 0, 1, 1},
  {&__pyx_n_s_discarded_sequence_count, __pyx_k_discarded_sequence_count, sizeof(__pyx_k_discarded_sequence_count), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_errorFreeReads, __pyx_k_errorFreeReads, sizeof(__pyx_k_errorFreeReads), 0, 0, 1, 1},
  {&__pyx_n_s_error_func, __pyx_k_error_func, sizeof(__pyx_k_error_func), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_expected_constant, __pyx_k_expected_constant, sizeof(__pyx_k_expected_constant), 0, 0, 1, 1},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_failed_file, __pyx_k_failed_file, sizeof(__pyx_k_failed_file), 0, 0, 1, 1},
  {&__pyx_n_s_failed_reads, __pyx_k_failed_reads, sizeof(__pyx_k_failed_reads), 0, 0, 1, 1},
  {&__pyx_kp_s_failed_tsv, __pyx_k_failed_tsv, sizeof(__pyx_k_failed_tsv), 0, 0, 1, 0},
  {&__pyx_n_s_fastq_record, __pyx_k_fastq_record, sizeof(__pyx_k_fastq_record), 0, 0, 1, 1},
  {&__pyx_n_s_fig, __pyx_k_fig, sizeof(__pyx_k_fig), 0, 0, 1, 1},
  {&__pyx_n_s_figure, __pyx_k_figure, sizeof(__pyx_k_figure), 0, 0, 1, 1},
  {&__pyx_n_s_figurename, __pyx_k_figurename, sizeof(__pyx_k_figurename), 0, 0, 1, 1},
  {&__pyx_n_s_file_fq, __pyx_k_file_fq, sizeof(__pyx_k_file_fq), 0, 0, 1, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_fq1, __pyx_k_fq1, sizeof(__pyx_k_fq1), 0, 0, 1, 1},
  {&__pyx_n_s_fq2, __pyx_k_fq2, sizeof(__pyx_k_fq2), 0, 0, 1, 1},
  {&__pyx_n_s_fraction_threshold, __pyx_k_fraction_threshold, sizeof(__pyx_k_fraction_threshold), 0, 0, 1, 1},
  {&__pyx_n_s_functools, __pyx_k_functools, sizeof(__pyx_k_functools), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_gzip, __pyx_k_gzip, sizeof(__pyx_k_gzip), 0, 0, 1, 1},
  {&__pyx_n_s_gzip_open, __pyx_k_gzip_open, sizeof(__pyx_k_gzip_open), 0, 0, 1, 1},
  {&__pyx_n_s_hamming_threshold, __pyx_k_hamming_threshold, sizeof(__pyx_k_hamming_threshold), 0, 0, 1, 1},
  {&__pyx_n_s_hist, __pyx_k_hist, sizeof(__pyx_k_hist), 0, 0, 1, 1},
  {&__pyx_n_s_histogram, __pyx_k_histogram, sizeof(__pyx_k_histogram), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_idSeq, __pyx_k_idSeq, sizeof(__pyx_k_idSeq), 0, 0, 1, 1},
  {&__pyx_n_s_idx_base, __pyx_k_idx_base, sizeof(__pyx_k_idx_base), 0, 0, 1, 1},
  {&__pyx_n_s_imap, __pyx_k_imap, sizeof(__pyx_k_imap), 0, 0, 1, 1},
  {&__pyx_n_s_imap_unordered, __pyx_k_imap_unordered, sizeof(__pyx_k_imap_unordered), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_inFastq1, __pyx_k_inFastq1, sizeof(__pyx_k_inFastq1), 0, 0, 1, 1},
  {&__pyx_n_s_inFastq2, __pyx_k_inFastq2, sizeof(__pyx_k_inFastq2), 0, 0, 1, 1},
  {&__pyx_n_s_in_qual_list, __pyx_k_in_qual_list, sizeof(__pyx_k_in_qual_list), 0, 0, 1, 1},
  {&__pyx_n_s_in_seq_list, __pyx_k_in_seq_list, sizeof(__pyx_k_in_seq_list), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_infile, __pyx_k_infile, sizeof(__pyx_k_infile), 0, 0, 1, 1},
  {&__pyx_n_s_int64, __pyx_k_int64, sizeof(__pyx_k_int64), 0, 0, 1, 1},
  {&__pyx_n_s_io, __pyx_k_io, sizeof(__pyx_k_io), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_iter_list, __pyx_k_iter_list, sizeof(__pyx_k_iter_list), 0, 0, 1, 1},
  {&__pyx_n_s_iterator, __pyx_k_iterator, sizeof(__pyx_k_iterator), 0, 0, 1, 1},
  {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
  {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
  {&__pyx_n_s_izip, __pyx_k_izip, sizeof(__pyx_k_izip), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_json_file, __pyx_k_json_file, sizeof(__pyx_k_json_file), 0, 0, 1, 1},
  {&__pyx_n_s_json_record, __pyx_k_json_record, sizeof(__pyx_k_json_record), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_left_record, __pyx_k_left_record, sizeof(__pyx_k_left_record), 0, 0, 1, 1},
  {&__pyx_n_s_line, __pyx_k_line, sizeof(__pyx_k_line), 0, 0, 1, 1},
  {&__pyx_n_s_log, __pyx_k_log, sizeof(__pyx_k_log), 0, 0, 1, 1},
  {&__pyx_n_s_low_complexity_base, __pyx_k_low_complexity_base, sizeof(__pyx_k_low_complexity_base), 0, 0, 1, 1},
  {&__pyx_n_s_low_complexity_composition, __pyx_k_low_complexity_composition, sizeof(__pyx_k_low_complexity_composition), 0, 0, 1, 1},
  {&__pyx_n_s_lstrip, __pyx_k_lstrip, sizeof(__pyx_k_lstrip), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_map, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
  {&__pyx_n_s_matplotlib, __pyx_k_matplotlib, sizeof(__pyx_k_matplotlib), 0, 0, 1, 1},
  {&__pyx_n_s_matplotlib_pyplot, __pyx_k_matplotlib_pyplot, sizeof(__pyx_k_matplotlib_pyplot), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_maxtasksperchild, __pyx_k_maxtasksperchild, sizeof(__pyx_k_maxtasksperchild), 0, 0, 1, 1},
  {&__pyx_n_s_mean, __pyx_k_mean, sizeof(__pyx_k_mean), 0, 0, 1, 1},
  {&__pyx_n_s_member_count, __pyx_k_member_count, sizeof(__pyx_k_member_count), 0, 0, 1, 1},
  {&__pyx_n_s_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 0, 1, 1},
  {&__pyx_n_s_min_family_member_count, __pyx_k_min_family_member_count, sizeof(__pyx_k_min_family_member_count), 0, 0, 1, 1},
  {&__pyx_n_s_mpl_use, __pyx_k_mpl_use, sizeof(__pyx_k_mpl_use), 0, 0, 1, 1},
  {&__pyx_n_s_mul, __pyx_k_mul, sizeof(__pyx_k_mul), 0, 0, 1, 1},
  {&__pyx_n_s_multiprocessing, __pyx_k_multiprocessing, sizeof(__pyx_k_multiprocessing), 0, 0, 1, 1},
  {&__pyx_n_s_nonposy, __pyx_k_nonposy, sizeof(__pyx_k_nonposy), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_np_ord, __pyx_k_np_ord, sizeof(__pyx_k_np_ord), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_ord, __pyx_k_ord, sizeof(__pyx_k_ord), 0, 0, 1, 1},
  {&__pyx_n_s_output_cluster_count, __pyx_k_output_cluster_count, sizeof(__pyx_k_output_cluster_count), 0, 0, 1, 1},
  {&__pyx_n_s_outputprefix, __pyx_k_outputprefix, sizeof(__pyx_k_outputprefix), 0, 0, 1, 1},
  {&__pyx_n_s_partial, __pyx_k_partial, sizeof(__pyx_k_partial), 0, 0, 1, 1},
  {&__pyx_n_s_plotBCdistribution, __pyx_k_plotBCdistribution, sizeof(__pyx_k_plotBCdistribution), 0, 0, 1, 1},
  {&__pyx_n_s_plt, __pyx_k_plt, sizeof(__pyx_k_plt), 0, 0, 1, 1},
  {&__pyx_n_s_pool, __pyx_k_pool, sizeof(__pyx_k_pool), 0, 0, 1, 1},
  {&__pyx_n_s_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 0, 1, 1},
  {&__pyx_n_s_processes, __pyx_k_processes, sizeof(__pyx_k_processes), 0, 0, 1, 1},
  {&__pyx_n_s_programname, __pyx_k_programname, sizeof(__pyx_k_programname), 0, 0, 1, 1},
  {&__pyx_n_s_qual, __pyx_k_qual, sizeof(__pyx_k_qual), 0, 0, 1, 1},
  {&__pyx_n_s_qual_left_list, __pyx_k_qual_left_list, sizeof(__pyx_k_qual_left_list), 0, 0, 1, 1},
  {&__pyx_n_s_qual_list, __pyx_k_qual_list, sizeof(__pyx_k_qual_list), 0, 0, 1, 1},
  {&__pyx_n_s_qual_num, __pyx_k_qual_num, sizeof(__pyx_k_qual_num), 0, 0, 1, 1},
  {&__pyx_n_s_qual_right_list, __pyx_k_qual_right_list, sizeof(__pyx_k_qual_right_list), 0, 0, 1, 1},
  {&__pyx_n_s_quality, __pyx_k_quality, sizeof(__pyx_k_quality), 0, 0, 1, 1},
  {&__pyx_n_s_quality_left, __pyx_k_quality_left, sizeof(__pyx_k_quality_left), 0, 0, 1, 1},
  {&__pyx_n_s_quality_right, __pyx_k_quality_right, sizeof(__pyx_k_quality_right), 0, 0, 1, 1},
  {&__pyx_n_s_quals, __pyx_k_quals, sizeof(__pyx_k_quals), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rb, __pyx_k_rb, sizeof(__pyx_k_rb), 0, 0, 1, 1},
  {&__pyx_n_s_re, __pyx_k_re, sizeof(__pyx_k_re), 0, 0, 1, 1},
  {&__pyx_n_s_read1, __pyx_k_read1, sizeof(__pyx_k_read1), 0, 0, 1, 1},
  {&__pyx_n_s_read1File, __pyx_k_read1File, sizeof(__pyx_k_read1File), 0, 0, 1, 1},
  {&__pyx_n_s_read2, __pyx_k_read2, sizeof(__pyx_k_read2), 0, 0, 1, 1},
  {&__pyx_n_s_read2File, __pyx_k_read2File, sizeof(__pyx_k_read2File), 0, 0, 1, 1},
  {&__pyx_n_s_readClusteringR1, __pyx_k_readClusteringR1, sizeof(__pyx_k_readClusteringR1), 0, 0, 1, 1},
  {&__pyx_n_s_readClusteringR2, __pyx_k_readClusteringR2, sizeof(__pyx_k_readClusteringR2), 0, 0, 1, 1},
  {&__pyx_n_s_read_fastq, __pyx_k_read_fastq, sizeof(__pyx_k_read_fastq), 0, 0, 1, 1},
  {&__pyx_n_s_read_flag, __pyx_k_read_flag, sizeof(__pyx_k_read_flag), 0, 0, 1, 1},
  {&__pyx_n_s_read_num, __pyx_k_read_num, sizeof(__pyx_k_read_num), 0, 0, 1, 1},
  {&__pyx_n_s_readline, __pyx_k_readline, sizeof(__pyx_k_readline), 0, 0, 1, 1},
  {&__pyx_n_s_record, __pyx_k_record, sizeof(__pyx_k_record), 0, 0, 1, 1},
  {&__pyx_n_s_recordsToDict, __pyx_k_recordsToDict, sizeof(__pyx_k_recordsToDict), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_return_counts, __pyx_k_return_counts, sizeof(__pyx_k_return_counts), 0, 0, 1, 1},
  {&__pyx_n_s_right, __pyx_k_right, sizeof(__pyx_k_right), 0, 0, 1, 1},
  {&__pyx_n_s_right_record, __pyx_k_right_record, sizeof(__pyx_k_right_record), 0, 0, 1, 1},
  {&__pyx_kp_s_s_Parsed_i_sequence, __pyx_k_s_Parsed_i_sequence, sizeof(__pyx_k_s_Parsed_i_sequence), 0, 0, 1, 0},
  {&__pyx_kp_s_s__i_readCluster_s_s, __pyx_k_s__i_readCluster_s_s, sizeof(__pyx_k_s__i_readCluster_s_s), 0, 0, 1, 0},
  {&__pyx_kp_s_s_pdf, __pyx_k_s_pdf, sizeof(__pyx_k_s_pdf), 0, 0, 1, 0},
  {&__pyx_n_s_savefig, __pyx_k_savefig, sizeof(__pyx_k_savefig), 0, 0, 1, 1},
  {&__pyx_n_s_score, __pyx_k_score, sizeof(__pyx_k_score), 0, 0, 1, 1},
  {&__pyx_n_s_search, __pyx_k_search, sizeof(__pyx_k_search), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_seq, __pyx_k_seq, sizeof(__pyx_k_seq), 0, 0, 1, 1},
  {&__pyx_n_s_seq_left_list, __pyx_k_seq_left_list, sizeof(__pyx_k_seq_left_list), 0, 0, 1, 1},
  {&__pyx_n_s_seq_len, __pyx_k_seq_len, sizeof(__pyx_k_seq_len), 0, 0, 1, 1},
  {&__pyx_n_s_seq_list, __pyx_k_seq_list, sizeof(__pyx_k_seq_list), 0, 0, 1, 1},
  {&__pyx_n_s_seq_right_list, __pyx_k_seq_right_list, sizeof(__pyx_k_seq_right_list), 0, 0, 1, 1},
  {&__pyx_n_s_sequence, __pyx_k_sequence, sizeof(__pyx_k_sequence), 0, 0, 1, 1},
  {&__pyx_n_s_sequence_left, __pyx_k_sequence_left, sizeof(__pyx_k_sequence_left), 0, 0, 1, 1},
  {&__pyx_n_s_sequence_right, __pyx_k_sequence_right, sizeof(__pyx_k_sequence_right), 0, 0, 1, 1},
  {&__pyx_n_s_set_title, __pyx_k_set_title, sizeof(__pyx_k_set_title), 0, 0, 1, 1},
  {&__pyx_n_s_set_visible, __pyx_k_set_visible, sizeof(__pyx_k_set_visible), 0, 0, 1, 1},
  {&__pyx_n_s_set_xlabel, __pyx_k_set_xlabel, sizeof(__pyx_k_set_xlabel), 0, 0, 1, 1},
  {&__pyx_n_s_set_ylabel, __pyx_k_set_ylabel, sizeof(__pyx_k_set_ylabel), 0, 0, 1, 1},
  {&__pyx_n_s_set_yscale, __pyx_k_set_yscale, sizeof(__pyx_k_set_yscale), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_spines, __pyx_k_spines, sizeof(__pyx_k_spines), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_stderr, __pyx_k_stderr, sizeof(__pyx_k_stderr), 0, 0, 1, 1},
  {&__pyx_n_s_strip, __pyx_k_strip, sizeof(__pyx_k_strip), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_table, __pyx_k_table, sizeof(__pyx_k_table), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_tgirt_seq_tools_cluster_reads, __pyx_k_tgirt_seq_tools_cluster_reads, sizeof(__pyx_k_tgirt_seq_tools_cluster_reads), 0, 0, 1, 1},
  {&__pyx_n_s_threads, __pyx_k_threads, sizeof(__pyx_k_threads), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_top, __pyx_k_top, sizeof(__pyx_k_top), 0, 0, 1, 1},
  {&__pyx_n_s_unique, __pyx_k_unique, sizeof(__pyx_k_unique), 0, 0, 1, 1},
  {&__pyx_n_s_usable_seq, __pyx_k_usable_seq, sizeof(__pyx_k_usable_seq), 0, 0, 1, 1},
  {&__pyx_n_s_use, __pyx_k_use, sizeof(__pyx_k_use), 0, 0, 1, 1},
  {&__pyx_n_s_vectorize, __pyx_k_vectorize, sizeof(__pyx_k_vectorize), 0, 0, 1, 1},
  {&__pyx_n_s_voteConcensusBase, __pyx_k_voteConcensusBase, sizeof(__pyx_k_voteConcensusBase), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_wb, __pyx_k_wb, sizeof(__pyx_k_wb), 0, 0, 1, 1},
  {&__pyx_n_s_which_side, __pyx_k_which_side, sizeof(__pyx_k_which_side), 0, 0, 1, 1},
  {&__pyx_n_s_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_n_s_writeSeqToFiles, __pyx_k_writeSeqToFiles, sizeof(__pyx_k_writeSeqToFiles), 0, 0, 1, 1},
  {&__pyx_n_s_write_func, __pyx_k_write_func, sizeof(__pyx_k_write_func), 0, 0, 1, 1},
  {&__pyx_n_s_writingAndClusteringReads, __pyx_k_writingAndClusteringReads, sizeof(__pyx_k_writingAndClusteringReads), 0, 0, 1, 1},
  {&__pyx_kp_s_written_s, __pyx_k_written_s, sizeof(__pyx_k_written_s), 0, 0, 1, 0},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_chr = __Pyx_GetBuiltinName(__pyx_n_s_chr); if (!__pyx_builtin_chr) __PYX_ERR(0, 43, __pyx_L1_error)
  __pyx_builtin_map = __Pyx_GetBuiltinName(__pyx_n_s_map); if (!__pyx_builtin_map) __PYX_ERR(0, 61, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 65, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 63, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 63, __pyx_L1_error)
  #endif
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(0, 141, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 316, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "tgirt_seq_tools/cluster_reads.pyx":63
 *         seq_list = np.array(map(list, in_seq_list))
 *         qual_list = np.array(map(list, in_qual_list))
 *         iter_list = ((seq_list[:,pos], qual_list[:,pos], fraction_threshold) for pos in xrange(seq_len))             # <<<<<<<<<<<<<<
 *         concensus_position = imap(voteConcensusBase, iter_list)
 *         bases, quals = zip(*concensus_position)
 */
  __pyx_slice__2 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__2)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__2);
  __Pyx_GIVEREF(__pyx_slice__2);
  __pyx_slice__3 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__3)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__3);
  __Pyx_GIVEREF(__pyx_slice__3);

  /* "tgirt_seq_tools/cluster_reads.pyx":104
 *     barcode_family_count = np.array(barcode_family_count, dtype=np.int64)
 *     hist, bins = np.histogram(barcode_family_count[barcode_family_count<50],bins=50)
 *     centers = (bins[:-1] + bins[1:]) / 2             # <<<<<<<<<<<<<<
 *     width = 0.7 * (bins[1] - bins[0])
 *     figurename = '%s.pdf' %(outputprefix)
 */
  __pyx_slice__5 = PySlice_New(Py_None, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__5)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__5);
  __Pyx_GIVEREF(__pyx_slice__5);
  __pyx_slice__6 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__6)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__6);
  __Pyx_GIVEREF(__pyx_slice__6);

  /* "tgirt_seq_tools/cluster_reads.pyx":108
 *     figurename = '%s.pdf' %(outputprefix)
 *     fig = plt.figure()
 *     ax = fig.add_subplot(111)             # <<<<<<<<<<<<<<
 *     ax.bar(centers,hist,align='center',width=width)
 *     ax.set_xlabel("Number of occurence")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_int_111); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "tgirt_seq_tools/cluster_reads.pyx":110
 *     ax = fig.add_subplot(111)
 *     ax.bar(centers,hist,align='center',width=width)
 *     ax.set_xlabel("Number of occurence")             # <<<<<<<<<<<<<<
 *     ax.set_ylabel("Count of tags")
 *     ax.set_yscale('log',nonposy='clip')
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_Number_of_occurence); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "tgirt_seq_tools/cluster_reads.pyx":111
 *     ax.bar(centers,hist,align='center',width=width)
 *     ax.set_xlabel("Number of occurence")
 *     ax.set_ylabel("Count of tags")             # <<<<<<<<<<<<<<
 *     ax.set_yscale('log',nonposy='clip')
 *     ax.set_title(outputprefix.split('/')[-1])
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_Count_of_tags); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "tgirt_seq_tools/cluster_reads.pyx":112
 *     ax.set_xlabel("Number of occurence")
 *     ax.set_ylabel("Count of tags")
 *     ax.set_yscale('log',nonposy='clip')             # <<<<<<<<<<<<<<
 *     ax.set_title(outputprefix.split('/')[-1])
 *     ax.spines['right'].set_visible(False)
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_n_s_log); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "tgirt_seq_tools/cluster_reads.pyx":113
 *     ax.set_ylabel("Count of tags")
 *     ax.set_yscale('log',nonposy='clip')
 *     ax.set_title(outputprefix.split('/')[-1])             # <<<<<<<<<<<<<<
 *     ax.spines['right'].set_visible(False)
 *     ax.spines['top'].set_visible(False)
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s__11); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "tgirt_seq_tools/cluster_reads.pyx":114
 *     ax.set_yscale('log',nonposy='clip')
 *     ax.set_title(outputprefix.split('/')[-1])
 *     ax.spines['right'].set_visible(False)             # <<<<<<<<<<<<<<
 *     ax.spines['top'].set_visible(False)
 *     fig.savefig(figurename)
 */
  __pyx_tuple__13 = PyTuple_Pack(1, Py_False); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "tgirt_seq_tools/cluster_reads.pyx":115
 *     ax.set_title(outputprefix.split('/')[-1])
 *     ax.spines['right'].set_visible(False)
 *     ax.spines['top'].set_visible(False)             # <<<<<<<<<<<<<<
 *     fig.savefig(figurename)
 *     stderr.write('Plotted %s.\n' %figurename)
 */
  __pyx_tuple__14 = PyTuple_Pack(1, Py_False); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "tgirt_seq_tools/cluster_reads.pyx":131
 *         str sequence_right, quality_right
 * 
 *     seq_left_list, qual_left_list = table[:,0], table[:,2]             # <<<<<<<<<<<<<<
 *     seq_right_list, qual_right_list = table[:,1], table[:,3]
 * 
 */
  __pyx_slice__15 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__15)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__15);
  __Pyx_GIVEREF(__pyx_slice__15);
  __pyx_tuple__16 = PyTuple_Pack(2, __pyx_slice__15, __pyx_int_0); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_slice__17 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__17)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__17);
  __Pyx_GIVEREF(__pyx_slice__17);
  __pyx_tuple__18 = PyTuple_Pack(2, __pyx_slice__17, __pyx_int_2); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "tgirt_seq_tools/cluster_reads.pyx":132
 * 
 *     seq_left_list, qual_left_list = table[:,0], table[:,2]
 *     seq_right_list, qual_right_list = table[:,1], table[:,3]             # <<<<<<<<<<<<<<
 * 
 *     # get concensus left reads first
 */
  __pyx_slice__19 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__19)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__19);
  __Pyx_GIVEREF(__pyx_slice__19);
  __pyx_tuple__20 = PyTuple_Pack(2, __pyx_slice__19, __pyx_int_1); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_slice__21 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__21)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__21);
  __Pyx_GIVEREF(__pyx_slice__21);
  __pyx_tuple__22 = PyTuple_Pack(2, __pyx_slice__21, __pyx_int_3); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "tgirt_seq_tools/cluster_reads.pyx":141
 * 
 * def dictToJson(barcode_dict, json_file):
 *     with open(json_file,'w') as f:             # <<<<<<<<<<<<<<
 *         [f.write(cjson.encode(items) + '\n') for items in barcode_dict.iteritems()]
 *     stderr.write('written %s' %(json_file) + '\n')
 */
  __pyx_tuple__24 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "tgirt_seq_tools/cluster_reads.pyx":193
 *     read2File = outputprefix + '_R2_001.fastq.gz'
 *     pool = Pool(threads,maxtasksperchild=1000)
 *     with gzip_open(read1File,'wb') as read1, gzip_open(read2File,'wb') as read2, open(json_file,'r') as infile:             # <<<<<<<<<<<<<<
 *         error_func = partial(errorFreeReads, min_family_member_count, fraction_threshold)
 *         write_func = partial(writeSeqToFiles,read1, read2)
 */
  __pyx_tuple__25 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_tuple__26 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_tuple__27 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "tgirt_seq_tools/cluster_reads.pyx":228
 *     id_left, seq_left, qual_left = read1.id, read1.seq, read1.qual
 *     id_right, seq_right, qual_right = read2.id, read2.seq, read2.qual
 *     assert id_left.split(' ')[0] == id_right.split(' ')[0], 'Wrongly splitted files!! %s\n%s' %(id_right, id_left)             # <<<<<<<<<<<<<<
 *     barcode = seq_right[:idx_base]
 *     constant_region = seq_right[idx_base:usable_seq]
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s__28); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s__28); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "tgirt_seq_tools/cluster_reads.pyx":267
 *     id_left, seq_left, qual_left = read1.id, read1.seq, read1.qual
 *     id_right, seq_right, qual_right = read2.id, read2.seq, read2.qual
 *     assert id_left.split(' ')[0] == id_right.split(' ')[0], 'Wrongly splitted files!! %s\n%s' %(id_right, id_left)             # <<<<<<<<<<<<<<
 *     barcode = seq_left[:idx_base]
 *     constant_region = seq_left[idx_base:usable_seq]
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s__28); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s__28); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "tgirt_seq_tools/cluster_reads.pyx":304
 * 
 *     failed_reads = outputprefix + '-failed.tsv'
 *     with gzip_open(inFastq1,'rb') as fq1, gzip_open(inFastq2,'rb') as fq2, open(failed_reads,'w') as failed_file:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__35 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_tuple__36 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_tuple__37 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "tgirt_seq_tools/cluster_reads.pyx":369
 *             sequence = ''
 *             score = ''
 *             idSeq = line.strip().lstrip('@')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s__38); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "tgirt_seq_tools/cluster_reads.pyx":4
 * import numpy as np
 * from matplotlib import use as mpl_use
 * mpl_use('Agg')  # Must be before importing matplotlib.pyplot or pylab             # <<<<<<<<<<<<<<
 * import matplotlib.pyplot as plt
 * from sys import stderr
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_n_s_Agg); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "tgirt_seq_tools/cluster_reads.pyx":18
 * np_ord = np.vectorize(ord)
 * 
 * def gzip_open(filename, read_flag = 'r'):             # <<<<<<<<<<<<<<
 *     if 'r' in read_flag:
 *         return io.BufferedReader(gzip.open(filename, read_flag))
 */
  __pyx_tuple__43 = PyTuple_Pack(2, __pyx_n_s_filename, __pyx_n_s_read_flag); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_wckdouglas_scripts_softwa, __pyx_n_s_gzip_open, 18, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 18, __pyx_L1_error)

  /* "tgirt_seq_tools/cluster_reads.pyx":25
 * 
 * 
 * def voteConcensusBase(arg):             # <<<<<<<<<<<<<<
 *     """Given a list of sequences,
 *         a list of quality line and
 */
  __pyx_tuple__45 = PyTuple_Pack(11, __pyx_n_s_arg, __pyx_n_s_depth, __pyx_n_s_column_bases, __pyx_n_s_column_qualities, __pyx_n_s_fraction_threshold, __pyx_n_s_column_qualities_number, __pyx_n_s_bases, __pyx_n_s_counts, __pyx_n_s_base, __pyx_n_s_qual_num, __pyx_n_s_qual); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_wckdouglas_scripts_softwa, __pyx_n_s_voteConcensusBase, 25, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 25, __pyx_L1_error)

  /* "tgirt_seq_tools/cluster_reads.pyx":50
 * 
 * 
 * def concensusSeq(in_seq_list, in_qual_list, float fraction_threshold):             # <<<<<<<<<<<<<<
 *     """given a list of sequences, a list of quality and sequence length.
 *         assertion: all seq in seqlist should have same length (see function: selectSeqLength)
 */
  __pyx_tuple__47 = PyTuple_Pack(15, __pyx_n_s_in_seq_list, __pyx_n_s_in_qual_list, __pyx_n_s_fraction_threshold, __pyx_n_s_seq_len, __pyx_n_s_pos, __pyx_n_s_sequence, __pyx_n_s_quality, __pyx_n_s_seq_list, __pyx_n_s_qual_list, __pyx_n_s_iter_list, __pyx_n_s_concensus_position, __pyx_n_s_bases, __pyx_n_s_quals, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(3, 0, 15, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_wckdouglas_scripts_softwa, __pyx_n_s_concensusSeq, 50, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(0, 50, __pyx_L1_error)

  /* "tgirt_seq_tools/cluster_reads.pyx":100
 * 
 * 
 * def plotBCdistribution(barcode_family_count, outputprefix):             # <<<<<<<<<<<<<<
 *     #plotting inspection of barcode distribution
 *     barcode_family_count = np.array(barcode_family_count, dtype=np.int64)
 */
  __pyx_tuple__49 = PyTuple_Pack(9, __pyx_n_s_barcode_family_count, __pyx_n_s_outputprefix, __pyx_n_s_hist, __pyx_n_s_bins, __pyx_n_s_centers, __pyx_n_s_width, __pyx_n_s_figurename, __pyx_n_s_fig, __pyx_n_s_ax); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(2, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_wckdouglas_scripts_softwa, __pyx_n_s_plotBCdistribution, 100, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(0, 100, __pyx_L1_error)

  /* "tgirt_seq_tools/cluster_reads.pyx":120
 *     return 0
 * 
 * def concensusPairs(table, float fraction_threshold):             # <<<<<<<<<<<<<<
 *     """ given a pair of reads as defined as the class: seqRecord
 *     return concensus sequence and mean quality of the pairs,
 */
  __pyx_tuple__51 = PyTuple_Pack(10, __pyx_n_s_table, __pyx_n_s_fraction_threshold, __pyx_n_s_sequence_left, __pyx_n_s_quality_left, __pyx_n_s_sequence_right, __pyx_n_s_quality_right, __pyx_n_s_seq_left_list, __pyx_n_s_qual_left_list, __pyx_n_s_seq_right_list, __pyx_n_s_qual_right_list); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(2, 0, 10, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_wckdouglas_scripts_softwa, __pyx_n_s_concensusPairs, 120, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(0, 120, __pyx_L1_error)

  /* "tgirt_seq_tools/cluster_reads.pyx":140
 *     return sequence_left, quality_left, sequence_right, quality_right
 * 
 * def dictToJson(barcode_dict, json_file):             # <<<<<<<<<<<<<<
 *     with open(json_file,'w') as f:
 *         [f.write(cjson.encode(items) + '\n') for items in barcode_dict.iteritems()]
 */
  __pyx_tuple__53 = PyTuple_Pack(4, __pyx_n_s_barcode_dict, __pyx_n_s_json_file, __pyx_n_s_f, __pyx_n_s_items); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_wckdouglas_scripts_softwa, __pyx_n_s_dictToJson, 140, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(0, 140, __pyx_L1_error)

  /* "tgirt_seq_tools/cluster_reads.pyx":146
 *     return 0
 * 
 * def errorFreeReads(int min_family_member_count, float fraction_threshold, str json_record):             # <<<<<<<<<<<<<<
 *     """
 *     main function for getting concensus sequences from read clusters.
 */
  __pyx_tuple__55 = PyTuple_Pack(13, __pyx_n_s_min_family_member_count, __pyx_n_s_fraction_threshold, __pyx_n_s_json_record, __pyx_n_s_index, __pyx_n_s_member_count, __pyx_n_s_sequence_left, __pyx_n_s_quality_left, __pyx_n_s_sequence_right, __pyx_n_s_quality_right, __pyx_n_s_left_record, __pyx_n_s_right_record, __pyx_n_s_record, __pyx_n_s_table); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(3, 0, 13, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_wckdouglas_scripts_softwa, __pyx_n_s_errorFreeReads, 146, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(0, 146, __pyx_L1_error)

  /* "tgirt_seq_tools/cluster_reads.pyx":174
 *         return 'No'
 * 
 * def writeSeqToFiles(read1, read2, output_cluster_count, result):             # <<<<<<<<<<<<<<
 *     if result!='No':
 *         read1.write('@cluster%i_%s' %(output_cluster_count, result[0]))
 */
  __pyx_tuple__57 = PyTuple_Pack(4, __pyx_n_s_read1, __pyx_n_s_read2, __pyx_n_s_output_cluster_count, __pyx_n_s_result); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_wckdouglas_scripts_softwa, __pyx_n_s_writeSeqToFiles, 174, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(0, 174, __pyx_L1_error)

  /* "tgirt_seq_tools/cluster_reads.pyx":182
 *         return 0
 * 
 * def writingAndClusteringReads(outputprefix, min_family_member_count, json_file,             # <<<<<<<<<<<<<<
 *                             threads, fraction_threshold):
 *     # From index library, generate error free reads
 */
  __pyx_tuple__59 = PyTuple_Pack(17, __pyx_n_s_outputprefix, __pyx_n_s_min_family_member_count, __pyx_n_s_json_file, __pyx_n_s_threads, __pyx_n_s_fraction_threshold, __pyx_n_s_counter, __pyx_n_s_output_cluster_count, __pyx_n_s_read1File, __pyx_n_s_read2File, __pyx_n_s_pool, __pyx_n_s_read1, __pyx_n_s_read2, __pyx_n_s_infile, __pyx_n_s_error_func, __pyx_n_s_write_func, __pyx_n_s_processes, __pyx_n_s_result); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(5, 0, 17, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_wckdouglas_scripts_softwa, __pyx_n_s_writingAndClusteringReads, 182, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 182, __pyx_L1_error)

  /* "tgirt_seq_tools/cluster_reads.pyx":288
 *     return 1
 * 
 * def recordsToDict(str outputprefix, str inFastq1, str inFastq2, int idx_base, int barcode_cut_off,             # <<<<<<<<<<<<<<
 *                 str constant, barcode_dict, int allow_mismatch, str which_side, str programname):
 * 
 */
  __pyx_tuple__61 = PyTuple_Pack(26, __pyx_n_s_outputprefix, __pyx_n_s_inFastq1, __pyx_n_s_inFastq2, __pyx_n_s_idx_base, __pyx_n_s_barcode_cut_off, __pyx_n_s_constant, __pyx_n_s_barcode_dict, __pyx_n_s_allow_mismatch, __pyx_n_s_which_side, __pyx_n_s_programname, __pyx_n_s_discarded_sequence_count, __pyx_n_s_constant_length, __pyx_n_s_usable_seq, __pyx_n_s_mul, __pyx_n_s_failed_reads, __pyx_n_s_read_num, __pyx_n_s_read1, __pyx_n_s_read2, __pyx_n_s_low_complexity_base, __pyx_n_s_low_complexity_composition, __pyx_n_s_fq1, __pyx_n_s_fq2, __pyx_n_s_failed_file, __pyx_n_s_cluster_reads, __pyx_n_s_iterator, __pyx_n_s_barcode_count); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(10, 0, 26, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_wckdouglas_scripts_softwa, __pyx_n_s_recordsToDict, 288, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(0, 288, __pyx_L1_error)

  /* "tgirt_seq_tools/cluster_reads.pyx":337
 * 
 * 
 * def read_fastq(file_fq):             # <<<<<<<<<<<<<<
 *     """
 *     takes a fastq file as input
 */
  __pyx_tuple__63 = PyTuple_Pack(6, __pyx_n_s_file_fq, __pyx_n_s_idSeq, __pyx_n_s_sequence, __pyx_n_s_score, __pyx_n_s_line, __pyx_n_s_fastq_record); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(1, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_wckdouglas_scripts_softwa, __pyx_n_s_read_fastq, 337, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 2, __pyx_L1_error);
  __pyx_float_0_7 = PyFloat_FromDouble(0.7); if (unlikely(!__pyx_float_0_7)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_33 = PyInt_FromLong(33); if (unlikely(!__pyx_int_33)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_41 = PyInt_FromLong(41); if (unlikely(!__pyx_int_41)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_50 = PyInt_FromLong(50); if (unlikely(!__pyx_int_50)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_53 = PyInt_FromLong(53); if (unlikely(!__pyx_int_53)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_111 = PyInt_FromLong(111); if (unlikely(!__pyx_int_111)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_1000 = PyInt_FromLong(1000); if (unlikely(!__pyx_int_1000)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initcluster_reads(void); /*proto*/
PyMODINIT_FUNC initcluster_reads(void)
#else
PyMODINIT_FUNC PyInit_cluster_reads(void); /*proto*/
PyMODINIT_FUNC PyInit_cluster_reads(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_cluster_reads(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 2, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("cluster_reads", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 2, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 2, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_tgirt_seq_tools__cluster_reads) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 2, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "tgirt_seq_tools.cluster_reads")) {
      if (unlikely(PyDict_SetItemString(modules, "tgirt_seq_tools.cluster_reads", __pyx_m) < 0)) __PYX_ERR(0, 2, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_15tgirt_seq_tools_13cluster_reads_fastqRecord) < 0) __PYX_ERR(0, 329, __pyx_L1_error)
  __pyx_type_15tgirt_seq_tools_13cluster_reads_fastqRecord.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "fastqRecord", (PyObject *)&__pyx_type_15tgirt_seq_tools_13cluster_reads_fastqRecord) < 0) __PYX_ERR(0, 329, __pyx_L1_error)
  __pyx_ptype_15tgirt_seq_tools_13cluster_reads_fastqRecord = &__pyx_type_15tgirt_seq_tools_13cluster_reads_fastqRecord;
  if (PyType_Ready(&__pyx_type_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __pyx_type_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq.tp_print = 0;
  __pyx_ptype_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq = &__pyx_type_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct__concensusSeq;
  if (PyType_Ready(&__pyx_type_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  __pyx_type_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr.tp_print = 0;
  __pyx_ptype_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr = &__pyx_type_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_1_genexpr;
  if (PyType_Ready(&__pyx_type_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq) < 0) __PYX_ERR(0, 337, __pyx_L1_error)
  __pyx_type_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq.tp_print = 0;
  __pyx_ptype_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq = &__pyx_type_15tgirt_seq_tools_13cluster_reads___pyx_scope_struct_2_read_fastq;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(1, 9, __pyx_L1_error)
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) __PYX_ERR(2, 8, __pyx_L1_error)
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) __PYX_ERR(3, 15, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif

  /* "tgirt_seq_tools/cluster_reads.pyx":2
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * from matplotlib import use as mpl_use
 * mpl_use('Agg')  # Must be before importing matplotlib.pyplot or pylab
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":3
 * 
 * import numpy as np
 * from matplotlib import use as mpl_use             # <<<<<<<<<<<<<<
 * mpl_use('Agg')  # Must be before importing matplotlib.pyplot or pylab
 * import matplotlib.pyplot as plt
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_use);
  __Pyx_GIVEREF(__pyx_n_s_use);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_use);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_matplotlib, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_use); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mpl_use, __pyx_t_1) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":4
 * import numpy as np
 * from matplotlib import use as mpl_use
 * mpl_use('Agg')  # Must be before importing matplotlib.pyplot or pylab             # <<<<<<<<<<<<<<
 * import matplotlib.pyplot as plt
 * from sys import stderr
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_mpl_use); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":5
 * from matplotlib import use as mpl_use
 * mpl_use('Agg')  # Must be before importing matplotlib.pyplot or pylab
 * import matplotlib.pyplot as plt             # <<<<<<<<<<<<<<
 * from sys import stderr
 * import cjson
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s__42);
  __Pyx_GIVEREF(__pyx_n_s__42);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__42);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_matplotlib_pyplot, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_plt, __pyx_t_2) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":6
 * mpl_use('Agg')  # Must be before importing matplotlib.pyplot or pylab
 * import matplotlib.pyplot as plt
 * from sys import stderr             # <<<<<<<<<<<<<<
 * import cjson
 * import gzip
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_stderr);
  __Pyx_GIVEREF(__pyx_n_s_stderr);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_stderr);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_stderr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_stderr, __pyx_t_2) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":7
 * import matplotlib.pyplot as plt
 * from sys import stderr
 * import cjson             # <<<<<<<<<<<<<<
 * import gzip
 * import re
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_cjson, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cjson, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":8
 * from sys import stderr
 * import cjson
 * import gzip             # <<<<<<<<<<<<<<
 * import re
 * from multiprocessing import Pool
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_gzip, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_gzip, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":9
 * import cjson
 * import gzip
 * import re             # <<<<<<<<<<<<<<
 * from multiprocessing import Pool
 * from itertools import imap, izip
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_re, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_re, __pyx_t_1) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":10
 * import gzip
 * import re
 * from multiprocessing import Pool             # <<<<<<<<<<<<<<
 * from itertools import imap, izip
 * from functools import partial
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Pool);
  __Pyx_GIVEREF(__pyx_n_s_Pool);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Pool);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_multiprocessing, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Pool); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Pool, __pyx_t_1) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":11
 * import re
 * from multiprocessing import Pool
 * from itertools import imap, izip             # <<<<<<<<<<<<<<
 * from functools import partial
 * from cpython cimport bool
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_imap);
  __Pyx_GIVEREF(__pyx_n_s_imap);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_imap);
  __Pyx_INCREF(__pyx_n_s_izip);
  __Pyx_GIVEREF(__pyx_n_s_izip);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_izip);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_itertools, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_imap); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_imap, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_izip); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_izip, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":12
 * from multiprocessing import Pool
 * from itertools import imap, izip
 * from functools import partial             # <<<<<<<<<<<<<<
 * from cpython cimport bool
 * import io
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_partial);
  __Pyx_GIVEREF(__pyx_n_s_partial);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_partial);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_functools, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_partial); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_partial, __pyx_t_1) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":14
 * from functools import partial
 * from cpython cimport bool
 * import io             # <<<<<<<<<<<<<<
 * 
 * np_ord = np.vectorize(ord)
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_io, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_io, __pyx_t_2) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":16
 * import io
 * 
 * np_ord = np.vectorize(ord)             # <<<<<<<<<<<<<<
 * 
 * def gzip_open(filename, read_flag = 'r'):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_vectorize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetBuiltinName(__pyx_n_s_ord); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 16, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np_ord, __pyx_t_2) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":18
 * np_ord = np.vectorize(ord)
 * 
 * def gzip_open(filename, read_flag = 'r'):             # <<<<<<<<<<<<<<
 *     if 'r' in read_flag:
 *         return io.BufferedReader(gzip.open(filename, read_flag))
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15tgirt_seq_tools_13cluster_reads_1gzip_open, NULL, __pyx_n_s_tgirt_seq_tools_cluster_reads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_gzip_open, __pyx_t_2) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":25
 * 
 * 
 * def voteConcensusBase(arg):             # <<<<<<<<<<<<<<
 *     """Given a list of sequences,
 *         a list of quality line and
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15tgirt_seq_tools_13cluster_reads_3voteConcensusBase, NULL, __pyx_n_s_tgirt_seq_tools_cluster_reads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_voteConcensusBase, __pyx_t_2) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":50
 * 
 * 
 * def concensusSeq(in_seq_list, in_qual_list, float fraction_threshold):             # <<<<<<<<<<<<<<
 *     """given a list of sequences, a list of quality and sequence length.
 *         assertion: all seq in seqlist should have same length (see function: selectSeqLength)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15tgirt_seq_tools_13cluster_reads_5concensusSeq, NULL, __pyx_n_s_tgirt_seq_tools_cluster_reads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_concensusSeq, __pyx_t_2) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":100
 * 
 * 
 * def plotBCdistribution(barcode_family_count, outputprefix):             # <<<<<<<<<<<<<<
 *     #plotting inspection of barcode distribution
 *     barcode_family_count = np.array(barcode_family_count, dtype=np.int64)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15tgirt_seq_tools_13cluster_reads_9plotBCdistribution, NULL, __pyx_n_s_tgirt_seq_tools_cluster_reads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_plotBCdistribution, __pyx_t_2) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":120
 *     return 0
 * 
 * def concensusPairs(table, float fraction_threshold):             # <<<<<<<<<<<<<<
 *     """ given a pair of reads as defined as the class: seqRecord
 *     return concensus sequence and mean quality of the pairs,
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15tgirt_seq_tools_13cluster_reads_11concensusPairs, NULL, __pyx_n_s_tgirt_seq_tools_cluster_reads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_concensusPairs, __pyx_t_2) < 0) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":140
 *     return sequence_left, quality_left, sequence_right, quality_right
 * 
 * def dictToJson(barcode_dict, json_file):             # <<<<<<<<<<<<<<
 *     with open(json_file,'w') as f:
 *         [f.write(cjson.encode(items) + '\n') for items in barcode_dict.iteritems()]
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15tgirt_seq_tools_13cluster_reads_13dictToJson, NULL, __pyx_n_s_tgirt_seq_tools_cluster_reads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dictToJson, __pyx_t_2) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":146
 *     return 0
 * 
 * def errorFreeReads(int min_family_member_count, float fraction_threshold, str json_record):             # <<<<<<<<<<<<<<
 *     """
 *     main function for getting concensus sequences from read clusters.
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15tgirt_seq_tools_13cluster_reads_15errorFreeReads, NULL, __pyx_n_s_tgirt_seq_tools_cluster_reads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_errorFreeReads, __pyx_t_2) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":174
 *         return 'No'
 * 
 * def writeSeqToFiles(read1, read2, output_cluster_count, result):             # <<<<<<<<<<<<<<
 *     if result!='No':
 *         read1.write('@cluster%i_%s' %(output_cluster_count, result[0]))
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15tgirt_seq_tools_13cluster_reads_17writeSeqToFiles, NULL, __pyx_n_s_tgirt_seq_tools_cluster_reads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_writeSeqToFiles, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":182
 *         return 0
 * 
 * def writingAndClusteringReads(outputprefix, min_family_member_count, json_file,             # <<<<<<<<<<<<<<
 *                             threads, fraction_threshold):
 *     # From index library, generate error free reads
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15tgirt_seq_tools_13cluster_reads_19writingAndClusteringReads, NULL, __pyx_n_s_tgirt_seq_tools_cluster_reads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_writingAndClusteringReads, __pyx_t_2) < 0) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":288
 *     return 1
 * 
 * def recordsToDict(str outputprefix, str inFastq1, str inFastq2, int idx_base, int barcode_cut_off,             # <<<<<<<<<<<<<<
 *                 str constant, barcode_dict, int allow_mismatch, str which_side, str programname):
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15tgirt_seq_tools_13cluster_reads_25recordsToDict, NULL, __pyx_n_s_tgirt_seq_tools_cluster_reads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_recordsToDict, __pyx_t_2) < 0) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":337
 * 
 * 
 * def read_fastq(file_fq):             # <<<<<<<<<<<<<<
 *     """
 *     takes a fastq file as input
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15tgirt_seq_tools_13cluster_reads_27read_fastq, NULL, __pyx_n_s_tgirt_seq_tools_cluster_reads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_read_fastq, __pyx_t_2) < 0) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tgirt_seq_tools/cluster_reads.pyx":2
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * from matplotlib import use as mpl_use
 * mpl_use('Agg')  # Must be before importing matplotlib.pyplot or pylab
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init tgirt_seq_tools.cluster_reads", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init tgirt_seq_tools.cluster_reads");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyCFunctionFastCall */
  #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* PyObjectCall */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* RaiseTooManyValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
    static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
    static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyIntBinop */
    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* PyObjectCallNoArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* GetItemInt */
      static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyIntBinop */
      #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* None */
      static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* StringJoin */
      #if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

/* BytesEquals */
      static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
      static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyErrFetchRestore */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
      static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* ArgTypeTest */
      static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* SliceObject */
      static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* PyObjectCallMethod0 */
      static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *function = PyMethod_GET_FUNCTION(method);
            result = __Pyx_PyObject_CallOneArg(function, self);
            Py_DECREF(method);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNoneIterError */
      static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
      static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
      static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                             int is_tuple, int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    if (!is_tuple && unlikely(!PyTuple_Check(tuple))) {
        iternextfunc iternext;
        iter = PyObject_GetIter(tuple);
        if (unlikely(!iter)) goto bad;
        if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
        iternext = Py_TYPE(iter)->tp_iternext;
        value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
        value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
        if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
        Py_DECREF(iter);
    } else {
        if (!has_known_size && unlikely(PyTuple_GET_SIZE(tuple) != 2)) {
            __Pyx_UnpackTupleError(tuple, 2);
            goto bad;
        }
#if CYTHON_COMPILING_IN_PYPY
        value1 = PySequence_ITEM(tuple, 0);
        if (unlikely(!value1)) goto bad;
        value2 = PySequence_ITEM(tuple, 1);
        if (unlikely(!value2)) goto bad;
#else
        value1 = PyTuple_GET_ITEM(tuple, 0);
        value2 = PyTuple_GET_ITEM(tuple, 1);
        Py_INCREF(value1);
        Py_INCREF(value2);
#endif
        if (decref_tuple) { Py_DECREF(tuple); }
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
      static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
#if !CYTHON_COMPILING_IN_PYPY
    if (is_dict) {
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#endif
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* SaveResetException */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
      #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* None */
        static CYTHON_INLINE long __Pyx_mod_long(long a, long b) {
    long r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* ExtTypeTest */
        static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyObjectCallMethod1 */
        static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto done;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
done:
    Py_XDECREF(method);
    return result;
}

/* append */
        static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* None */
        static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* bytes_tailmatch */
        static int __Pyx_PyBytes_SingleTailmatch(PyObject* self, PyObject* arg,
                                         Py_ssize_t start, Py_ssize_t end, int direction) {
    const char* self_ptr = PyBytes_AS_STRING(self);
    Py_ssize_t self_len = PyBytes_GET_SIZE(self);
    const char* sub_ptr;
    Py_ssize_t sub_len;
    int retval;
    Py_buffer view;
    view.obj = NULL;
    if ( PyBytes_Check(arg) ) {
        sub_ptr = PyBytes_AS_STRING(arg);
        sub_len = PyBytes_GET_SIZE(arg);
    }
#if PY_MAJOR_VERSION < 3
    else if ( PyUnicode_Check(arg) ) {
        return (int) PyUnicode_Tailmatch(self, arg, start, end, direction);
    }
#endif
    else {
        if (unlikely(PyObject_GetBuffer(self, &view, PyBUF_SIMPLE) == -1))
            return -1;
        sub_ptr = (const char*) view.buf;
        sub_len = view.len;
    }
    if (end > self_len)
        end = self_len;
    else if (end < 0)
        end += self_len;
    if (end < 0)
        end = 0;
    if (start < 0)
        start += self_len;
    if (start < 0)
        start = 0;
    if (direction > 0) {
        if (end-sub_len > start)
            start = end - sub_len;
    }
    if (start + sub_len <= end)
        retval = !memcmp(self_ptr+start, sub_ptr, (size_t)sub_len);
    else
        retval = 0;
    if (view.obj)
        PyBuffer_Release(&view);
    return retval;
}
static int __Pyx_PyBytes_Tailmatch(PyObject* self, PyObject* substr,
                                   Py_ssize_t start, Py_ssize_t end, int direction) {
    if (unlikely(PyTuple_Check(substr))) {
        Py_ssize_t i, count = PyTuple_GET_SIZE(substr);
        for (i = 0; i < count; i++) {
            int result;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            result = __Pyx_PyBytes_SingleTailmatch(self, PyTuple_GET_ITEM(substr, i),
                                                   start, end, direction);
#else
            PyObject* sub = PySequence_ITEM(substr, i);
            if (unlikely(!sub)) return -1;
            result = __Pyx_PyBytes_SingleTailmatch(self, sub, start, end, direction);
            Py_DECREF(sub);
#endif
            if (result) {
                return result;
            }
        }
        return 0;
    }
    return __Pyx_PyBytes_SingleTailmatch(self, substr, start, end, direction);
}

/* unicode_tailmatch */
        static int __Pyx_PyUnicode_Tailmatch(PyObject* s, PyObject* substr,
                                     Py_ssize_t start, Py_ssize_t end, int direction) {
    if (unlikely(PyTuple_Check(substr))) {
        Py_ssize_t i, count = PyTuple_GET_SIZE(substr);
        for (i = 0; i < count; i++) {
            Py_ssize_t result;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            result = PyUnicode_Tailmatch(s, PyTuple_GET_ITEM(substr, i),
                                         start, end, direction);
#else
            PyObject* sub = PySequence_ITEM(substr, i);
            if (unlikely(!sub)) return -1;
            result = PyUnicode_Tailmatch(s, sub, start, end, direction);
            Py_DECREF(sub);
#endif
            if (result) {
                return (int) result;
            }
        }
        return 0;
    }
    return (int) PyUnicode_Tailmatch(s, substr, start, end, direction);
}

/* str_tailmatch */
        static CYTHON_INLINE int __Pyx_PyStr_Tailmatch(PyObject* self, PyObject* arg, Py_ssize_t start,
                                               Py_ssize_t end, int direction)
{
    if (PY_MAJOR_VERSION < 3)
        return __Pyx_PyBytes_Tailmatch(self, arg, start, end, direction);
    else
        return __Pyx_PyUnicode_Tailmatch(self, arg, start, end, direction);
}

/* Import */
        static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
        static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CodeObjectCache */
        static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
        #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
        #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
        static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FetchCommonType */
        static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* RaiseException */
        #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* SwapException */
          #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* CoroutineBase */
          #include <structmember.h>
#include <frameobject.h>
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Coroutine_CheckRunning(__pyx_CoroutineObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value) {
    PyObject *retval;
    __Pyx_PyThreadState_declare
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    __Pyx_PyThreadState_assign
    if (value) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(__pyx_tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = __pyx_tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject *retval) {
    if (unlikely(!retval && !PyErr_Occurred())) {
        PyErr_SetNone(PyExc_StopIteration);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Coroutine_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value);
    }
    return __Pyx_Coroutine_MethodReturn(retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
            goto throw_here;
        }
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
}
static int __Pyx_Coroutine_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label > 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label <= 0)
        return ;
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Coroutine_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
              static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
              #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (!abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_VERSION_HEX >= 0x03030000) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_VERSION_HEX >= 0x03030000) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if (0) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
              static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if PY_VERSION_HEX >= 0x030400a1
    __Pyx_Coroutine_del,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
              static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
              #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
              #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
              static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
